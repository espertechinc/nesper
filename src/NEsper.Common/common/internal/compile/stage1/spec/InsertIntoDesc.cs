///////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2006-2019 Esper Team. All rights reserved.                           /
// http://esper.codehaus.org                                                          /
// ---------------------------------------------------------------------------------- /
// The software in this package is published under the terms of the GPL license       /
// a copy of which has been included with this distribution in the license.txt file.  /
///////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;

using com.espertech.esper.common.@internal.epl.expression.core;

namespace com.espertech.esper.common.@internal.compile.stage1.spec
{
    /// <summary>
    /// Descriptor generated by INSERT-INTO clauses specified in expressions to insert
    /// the results of statement as a stream to further statements.
    /// </summary>
    [Serializable]
    public class InsertIntoDesc
    {
        /// <summary>
        /// Ctor.
        /// </summary>
        /// <param name="streamSelector">selects insert, remove or insert+remove stream</param>
        /// <param name="eventTypeName">is the event type name</param>
        public InsertIntoDesc(
            SelectClauseStreamSelectorEnum streamSelector,
            string eventTypeName)
        {
            StreamSelector = streamSelector;
            EventTypeName = eventTypeName;
            ColumnNames = new List<string>();
        }

        /// <summary>
        /// Returns the stream(s) selected for inserting into.
        /// </summary>
        public SelectClauseStreamSelectorEnum StreamSelector { get; private set; }

        /// <summary>
        /// Returns name of event type to use for insert-into stream.
        /// </summary>
        /// <returns>
        /// event type name
        /// </returns>
        public string EventTypeName { get; private set; }

        /// <summary>
        /// Returns a list of column names specified optionally in the insert-into clause,
        /// or empty if none specified.
        /// </summary>
        /// <returns>
        /// column names or empty list if none supplied
        /// </returns>
        public IList<string> ColumnNames { get; private set; }

        public ExprNode EventPrecedence { get; set; }

        /// <summary>
        /// Add a column name to the insert-into clause.
        /// </summary>
        /// <param name="columnName">to add</param>
        public void Add(string columnName)
        {
            ColumnNames.Add(columnName);
        }

        public static InsertIntoDesc FromColumns(
            string streamName,
            IList<string> columns)
        {
            var insertIntoDesc = new InsertIntoDesc(SelectClauseStreamSelectorEnum.ISTREAM_ONLY, streamName);
            foreach (var col in columns) {
                insertIntoDesc.Add(col);
            }

            return insertIntoDesc;
        }
    }
}
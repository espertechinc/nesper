//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/src/Espertech/NEsper-8.9.0/NEsper/grammar/EsperEPL2Grammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace com.espertech.esper.grammar.@internal.generated {

  using System;
  using System.Collections.Generic;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class EsperEPL2GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CREATE=1, WINDOW=2, IN_SET=3, BETWEEN=4, LIKE=5, REGEXP=6, ESCAPE=7, OR_EXPR=8, 
		AND_EXPR=9, NOT_EXPR=10, EVERY_EXPR=11, EVERY_DISTINCT_EXPR=12, WHERE=13, 
		AS=14, SUM=15, AVG=16, MAX=17, MIN=18, COALESCE=19, MEDIAN=20, STDDEV=21, 
		AVEDEV=22, COUNT=23, SELECT=24, CASE=25, ELSE=26, WHEN=27, THEN=28, END=29, 
		FROM=30, OUTER=31, INNER=32, JOIN=33, LEFT=34, RIGHT=35, FULL=36, ON=37, 
		IS=38, BY=39, GROUP=40, HAVING=41, DISTINCT=42, ALL=43, ANY=44, SOME=45, 
		OUTPUT=46, EVENTS=47, FIRST=48, LAST=49, INSERT=50, INTO=51, VALUES=52, 
		ORDER=53, ASC=54, DESC=55, RSTREAM=56, ISTREAM=57, IRSTREAM=58, SCHEMA=59, 
		UNIDIRECTIONAL=60, RETAINUNION=61, RETAININTERSECTION=62, PATTERN=63, 
		SQL=64, METADATASQL=65, PREVIOUS=66, PREVIOUSTAIL=67, PREVIOUSCOUNT=68, 
		PREVIOUSWINDOW=69, PRIOR=70, EXISTS=71, WEEKDAY=72, LW=73, INSTANCEOF=74, 
		TYPEOF=75, CAST=76, CURRENT_TIMESTAMP=77, DELETE=78, SNAPSHOT=79, SET=80, 
		VARIABLE=81, TABLE=82, UNTIL=83, AT=84, INDEX=85, TIMEPERIOD_YEAR=86, 
		TIMEPERIOD_YEARS=87, TIMEPERIOD_MONTH=88, TIMEPERIOD_MONTHS=89, TIMEPERIOD_WEEK=90, 
		TIMEPERIOD_WEEKS=91, TIMEPERIOD_DAY=92, TIMEPERIOD_DAYS=93, TIMEPERIOD_HOUR=94, 
		TIMEPERIOD_HOURS=95, TIMEPERIOD_MINUTE=96, TIMEPERIOD_MINUTES=97, TIMEPERIOD_SEC=98, 
		TIMEPERIOD_SECOND=99, TIMEPERIOD_SECONDS=100, TIMEPERIOD_MILLISEC=101, 
		TIMEPERIOD_MILLISECOND=102, TIMEPERIOD_MILLISECONDS=103, TIMEPERIOD_MICROSEC=104, 
		TIMEPERIOD_MICROSECOND=105, TIMEPERIOD_MICROSECONDS=106, BOOLEAN_TRUE=107, 
		BOOLEAN_FALSE=108, VALUE_NULL=109, ROW_LIMIT_EXPR=110, OFFSET=111, UPDATE=112, 
		MATCH_RECOGNIZE=113, MATCH_RECOGNIZE_PERMUTE=114, MEASURES=115, DEFINE=116, 
		PARTITION=117, MATCHES=118, AFTER=119, FOR=120, WHILE=121, USING=122, 
		MERGE=123, MATCHED=124, EXPRESSIONDECL=125, CLASSDECL=126, NEWKW=127, 
		START=128, CONTEXT=129, INITIATED=130, TERMINATED=131, DATAFLOW=132, CUBE=133, 
		ROLLUP=134, GROUPING=135, GROUPING_ID=136, SETS=137, EVENTPRECEDENCE=138, 
		FOLLOWMAX_BEGIN=139, FOLLOWED_BY=140, GOES=141, EQUALS=142, SQL_NE=143, 
		QUESTION=144, LPAREN=145, RPAREN=146, LBRACK=147, RBRACK=148, LCURLY=149, 
		RCURLY=150, COLON=151, COMMA=152, EQUAL=153, LNOT=154, BNOT=155, NOT_EQUAL=156, 
		DIV=157, DIV_ASSIGN=158, PLUS=159, PLUS_ASSIGN=160, INC=161, MINUS=162, 
		MINUS_ASSIGN=163, DEC=164, STAR=165, STAR_ASSIGN=166, MOD=167, MOD_ASSIGN=168, 
		GE=169, GT=170, LE=171, LT=172, BXOR=173, BXOR_ASSIGN=174, BOR=175, BOR_ASSIGN=176, 
		LOR=177, BAND=178, BAND_ASSIGN=179, LAND=180, SEMI=181, DOT=182, NUM_LONG=183, 
		NUM_DOUBLE=184, NUM_FLOAT=185, ESCAPECHAR=186, ESCAPEBACKTICK=187, ATCHAR=188, 
		HASHCHAR=189, WS=190, SL_COMMENT=191, ML_COMMENT=192, TICKED_STRING_LITERAL=193, 
		QUOTED_STRING_LITERAL=194, STRING_LITERAL=195, TRIPLEQUOTE=196, IDENT=197, 
		IntegerLiteral=198, FloatingPointLiteral=199;
	public const int
		RULE_startEPLExpressionRule = 0, RULE_startEventPropertyRule = 1, RULE_startJsonValueRule = 2, 
		RULE_classDecl = 3, RULE_expressionDecl = 4, RULE_expressionDialect = 5, 
		RULE_expressionDef = 6, RULE_expressionLambdaDecl = 7, RULE_expressionTypeAnno = 8, 
		RULE_annotationEnum = 9, RULE_elementValuePairsEnum = 10, RULE_elementValuePairEnum = 11, 
		RULE_elementValueEnum = 12, RULE_elementValueArrayEnum = 13, RULE_eplExpression = 14, 
		RULE_contextExpr = 15, RULE_selectExpr = 16, RULE_onExpr = 17, RULE_onStreamExpr = 18, 
		RULE_updateExpr = 19, RULE_updateDetails = 20, RULE_onMergeExpr = 21, 
		RULE_mergeItem = 22, RULE_mergeMatched = 23, RULE_mergeMatchedItem = 24, 
		RULE_onMergeDirectInsert = 25, RULE_mergeUnmatched = 26, RULE_mergeUnmatchedItem = 27, 
		RULE_mergeInsert = 28, RULE_onSelectExpr = 29, RULE_onUpdateExpr = 30, 
		RULE_onSelectInsertExpr = 31, RULE_onSelectInsertFromClause = 32, RULE_outputClauseInsert = 33, 
		RULE_onDeleteExpr = 34, RULE_onSetExpr = 35, RULE_onSetAssignmentList = 36, 
		RULE_onSetAssignment = 37, RULE_onExprFrom = 38, RULE_createWindowExpr = 39, 
		RULE_createWindowExprModelAfter = 40, RULE_createIndexExpr = 41, RULE_createIndexColumnList = 42, 
		RULE_createIndexColumn = 43, RULE_createVariableExpr = 44, RULE_createTableExpr = 45, 
		RULE_createTableColumnList = 46, RULE_createTableColumn = 47, RULE_createColumnList = 48, 
		RULE_createColumnListElement = 49, RULE_createSelectionList = 50, RULE_createSelectionListElement = 51, 
		RULE_createSchemaExpr = 52, RULE_createSchemaDef = 53, RULE_fafDelete = 54, 
		RULE_fafUpdate = 55, RULE_fafInsert = 56, RULE_fafInsertRow = 57, RULE_createDataflow = 58, 
		RULE_gopList = 59, RULE_gop = 60, RULE_gopParams = 61, RULE_gopParamsItemList = 62, 
		RULE_gopParamsItem = 63, RULE_gopParamsItemMany = 64, RULE_gopParamsItemAs = 65, 
		RULE_gopOut = 66, RULE_gopOutItem = 67, RULE_gopOutTypeList = 68, RULE_gopOutTypeParam = 69, 
		RULE_gopOutTypeItem = 70, RULE_gopDetail = 71, RULE_gopConfig = 72, RULE_createContextExpr = 73, 
		RULE_createExpressionExpr = 74, RULE_createClassExpr = 75, RULE_createContextDetail = 76, 
		RULE_contextContextNested = 77, RULE_createContextChoice = 78, RULE_createContextDistinct = 79, 
		RULE_createContextRangePoint = 80, RULE_createContextFilter = 81, RULE_createContextPartitionItem = 82, 
		RULE_createContextCoalesceItem = 83, RULE_createContextGroupItem = 84, 
		RULE_createContextPartitionInit = 85, RULE_createContextPartitionTerm = 86, 
		RULE_createSchemaQual = 87, RULE_variantList = 88, RULE_variantListElement = 89, 
		RULE_intoTableExpr = 90, RULE_insertIntoExpr = 91, RULE_insertIntoEventPrecedence = 92, 
		RULE_columnList = 93, RULE_columnListKeywordAllowed = 94, RULE_fromClause = 95, 
		RULE_regularJoin = 96, RULE_outerJoinList = 97, RULE_outerJoin = 98, RULE_outerJoinIdent = 99, 
		RULE_outerJoinIdentPair = 100, RULE_whereClause = 101, RULE_selectClause = 102, 
		RULE_selectionList = 103, RULE_selectionListElement = 104, RULE_selectionListElementExpr = 105, 
		RULE_selectionListElementAnno = 106, RULE_streamSelector = 107, RULE_streamExpression = 108, 
		RULE_forExpr = 109, RULE_patternInclusionExpression = 110, RULE_databaseJoinExpression = 111, 
		RULE_methodJoinExpression = 112, RULE_viewExpressions = 113, RULE_viewExpressionWNamespace = 114, 
		RULE_viewExpressionOptNamespace = 115, RULE_viewWParameters = 116, RULE_groupByListExpr = 117, 
		RULE_groupByListChoice = 118, RULE_groupByCubeOrRollup = 119, RULE_groupByGroupingSets = 120, 
		RULE_groupBySetsChoice = 121, RULE_groupByCombinableExpr = 122, RULE_orderByListExpr = 123, 
		RULE_orderByListElement = 124, RULE_havingClause = 125, RULE_outputLimit = 126, 
		RULE_outputLimitAndTerm = 127, RULE_outputLimitAfter = 128, RULE_rowLimit = 129, 
		RULE_crontabLimitParameterSetList = 130, RULE_crontabLimitParameterSet = 131, 
		RULE_whenClause = 132, RULE_elseClause = 133, RULE_matchRecog = 134, RULE_matchRecogPartitionBy = 135, 
		RULE_matchRecogMeasures = 136, RULE_matchRecogMeasureItem = 137, RULE_matchRecogMatchesSelection = 138, 
		RULE_matchRecogPattern = 139, RULE_matchRecogMatchesAfterSkip = 140, RULE_matchRecogMatchesInterval = 141, 
		RULE_matchRecogPatternAlteration = 142, RULE_matchRecogPatternConcat = 143, 
		RULE_matchRecogPatternUnary = 144, RULE_matchRecogPatternNested = 145, 
		RULE_matchRecogPatternPermute = 146, RULE_matchRecogPatternAtom = 147, 
		RULE_matchRecogPatternRepeat = 148, RULE_matchRecogDefine = 149, RULE_matchRecogDefineItem = 150, 
		RULE_expression = 151, RULE_caseExpression = 152, RULE_evalOrExpression = 153, 
		RULE_evalAndExpression = 154, RULE_bitWiseExpression = 155, RULE_negatedExpression = 156, 
		RULE_evalEqualsExpression = 157, RULE_evalRelationalExpression = 158, 
		RULE_inSubSelectQuery = 159, RULE_concatenationExpr = 160, RULE_additiveExpression = 161, 
		RULE_multiplyExpression = 162, RULE_unaryExpression = 163, RULE_unaryMinus = 164, 
		RULE_substitutionCanChain = 165, RULE_newAssign = 166, RULE_rowSubSelectExpression = 167, 
		RULE_subSelectGroupExpression = 168, RULE_existsSubSelectExpression = 169, 
		RULE_subQueryExpr = 170, RULE_subSelectFilterExpr = 171, RULE_arrayExpression = 172, 
		RULE_builtinFunc = 173, RULE_firstLastWindowAggregation = 174, RULE_libFunctionNoClass = 175, 
		RULE_funcIdentChained = 176, RULE_libFunctionArgs = 177, RULE_libFunctionArgItem = 178, 
		RULE_betweenList = 179, RULE_patternExpression = 180, RULE_followedByExpression = 181, 
		RULE_followedByRepeat = 182, RULE_orExpression = 183, RULE_andExpression = 184, 
		RULE_matchUntilExpression = 185, RULE_qualifyExpression = 186, RULE_guardPostFix = 187, 
		RULE_distinctExpressionList = 188, RULE_distinctExpressionAtom = 189, 
		RULE_atomicExpression = 190, RULE_observerExpression = 191, RULE_guardWhereExpression = 192, 
		RULE_guardWhileExpression = 193, RULE_matchUntilRange = 194, RULE_eventFilterExpression = 195, 
		RULE_propertyExpression = 196, RULE_propertyExpressionAtomic = 197, RULE_propertyExpressionSelect = 198, 
		RULE_propertySelectionList = 199, RULE_propertySelectionListElement = 200, 
		RULE_propertyStreamSelector = 201, RULE_typeExpressionAnnotation = 202, 
		RULE_patternFilterExpression = 203, RULE_patternFilterAnnotation = 204, 
		RULE_classIdentifierNoDimensions = 205, RULE_classIdentifierWithDimensions = 206, 
		RULE_typeParameters = 207, RULE_dimensions = 208, RULE_classIdentifier = 209, 
		RULE_classIdentifierGenericArgs = 210, RULE_classIdentifierGenericArgsList = 211, 
		RULE_expressionListWithNamed = 212, RULE_expressionListWithNamedWithTime = 213, 
		RULE_expressionWithNamed = 214, RULE_expressionWithNamedWithTime = 215, 
		RULE_expressionNamedParameter = 216, RULE_expressionNamedParameterWithTime = 217, 
		RULE_expressionList = 218, RULE_expressionWithTimeList = 219, RULE_expressionWithTime = 220, 
		RULE_expressionWithTimeInclLast = 221, RULE_expressionQualifyable = 222, 
		RULE_lastWeekdayOperand = 223, RULE_lastOperand = 224, RULE_frequencyOperand = 225, 
		RULE_rangeOperand = 226, RULE_lastOperator = 227, RULE_weekDayOperator = 228, 
		RULE_numericParameterList = 229, RULE_numericListParameter = 230, RULE_chainable = 231, 
		RULE_chainableRootWithOpt = 232, RULE_chainableElements = 233, RULE_chainableAtomicWithOpt = 234, 
		RULE_chainableAtomic = 235, RULE_chainableArray = 236, RULE_chainableWithArgs = 237, 
		RULE_chainableIdent = 238, RULE_identOrTicked = 239, RULE_keywordAllowedIdent = 240, 
		RULE_escapableStr = 241, RULE_escapableIdent = 242, RULE_timePeriod = 243, 
		RULE_yearPart = 244, RULE_monthPart = 245, RULE_weekPart = 246, RULE_dayPart = 247, 
		RULE_hourPart = 248, RULE_minutePart = 249, RULE_secondPart = 250, RULE_millisecondPart = 251, 
		RULE_microsecondPart = 252, RULE_number = 253, RULE_substitution = 254, 
		RULE_substitutionSlashIdent = 255, RULE_constant = 256, RULE_numberconstant = 257, 
		RULE_stringconstant = 258, RULE_jsonvalue = 259, RULE_jsonobject = 260, 
		RULE_jsonarray = 261, RULE_jsonelements = 262, RULE_jsonmembers = 263, 
		RULE_jsonpair = 264;
	public static readonly string[] ruleNames = {
		"startEPLExpressionRule", "startEventPropertyRule", "startJsonValueRule", 
		"classDecl", "expressionDecl", "expressionDialect", "expressionDef", "expressionLambdaDecl", 
		"expressionTypeAnno", "annotationEnum", "elementValuePairsEnum", "elementValuePairEnum", 
		"elementValueEnum", "elementValueArrayEnum", "eplExpression", "contextExpr", 
		"selectExpr", "onExpr", "onStreamExpr", "updateExpr", "updateDetails", 
		"onMergeExpr", "mergeItem", "mergeMatched", "mergeMatchedItem", "onMergeDirectInsert", 
		"mergeUnmatched", "mergeUnmatchedItem", "mergeInsert", "onSelectExpr", 
		"onUpdateExpr", "onSelectInsertExpr", "onSelectInsertFromClause", "outputClauseInsert", 
		"onDeleteExpr", "onSetExpr", "onSetAssignmentList", "onSetAssignment", 
		"onExprFrom", "createWindowExpr", "createWindowExprModelAfter", "createIndexExpr", 
		"createIndexColumnList", "createIndexColumn", "createVariableExpr", "createTableExpr", 
		"createTableColumnList", "createTableColumn", "createColumnList", "createColumnListElement", 
		"createSelectionList", "createSelectionListElement", "createSchemaExpr", 
		"createSchemaDef", "fafDelete", "fafUpdate", "fafInsert", "fafInsertRow", 
		"createDataflow", "gopList", "gop", "gopParams", "gopParamsItemList", 
		"gopParamsItem", "gopParamsItemMany", "gopParamsItemAs", "gopOut", "gopOutItem", 
		"gopOutTypeList", "gopOutTypeParam", "gopOutTypeItem", "gopDetail", "gopConfig", 
		"createContextExpr", "createExpressionExpr", "createClassExpr", "createContextDetail", 
		"contextContextNested", "createContextChoice", "createContextDistinct", 
		"createContextRangePoint", "createContextFilter", "createContextPartitionItem", 
		"createContextCoalesceItem", "createContextGroupItem", "createContextPartitionInit", 
		"createContextPartitionTerm", "createSchemaQual", "variantList", "variantListElement", 
		"intoTableExpr", "insertIntoExpr", "insertIntoEventPrecedence", "columnList", 
		"columnListKeywordAllowed", "fromClause", "regularJoin", "outerJoinList", 
		"outerJoin", "outerJoinIdent", "outerJoinIdentPair", "whereClause", "selectClause", 
		"selectionList", "selectionListElement", "selectionListElementExpr", "selectionListElementAnno", 
		"streamSelector", "streamExpression", "forExpr", "patternInclusionExpression", 
		"databaseJoinExpression", "methodJoinExpression", "viewExpressions", "viewExpressionWNamespace", 
		"viewExpressionOptNamespace", "viewWParameters", "groupByListExpr", "groupByListChoice", 
		"groupByCubeOrRollup", "groupByGroupingSets", "groupBySetsChoice", "groupByCombinableExpr", 
		"orderByListExpr", "orderByListElement", "havingClause", "outputLimit", 
		"outputLimitAndTerm", "outputLimitAfter", "rowLimit", "crontabLimitParameterSetList", 
		"crontabLimitParameterSet", "whenClause", "elseClause", "matchRecog", 
		"matchRecogPartitionBy", "matchRecogMeasures", "matchRecogMeasureItem", 
		"matchRecogMatchesSelection", "matchRecogPattern", "matchRecogMatchesAfterSkip", 
		"matchRecogMatchesInterval", "matchRecogPatternAlteration", "matchRecogPatternConcat", 
		"matchRecogPatternUnary", "matchRecogPatternNested", "matchRecogPatternPermute", 
		"matchRecogPatternAtom", "matchRecogPatternRepeat", "matchRecogDefine", 
		"matchRecogDefineItem", "expression", "caseExpression", "evalOrExpression", 
		"evalAndExpression", "bitWiseExpression", "negatedExpression", "evalEqualsExpression", 
		"evalRelationalExpression", "inSubSelectQuery", "concatenationExpr", "additiveExpression", 
		"multiplyExpression", "unaryExpression", "unaryMinus", "substitutionCanChain", 
		"newAssign", "rowSubSelectExpression", "subSelectGroupExpression", "existsSubSelectExpression", 
		"subQueryExpr", "subSelectFilterExpr", "arrayExpression", "builtinFunc", 
		"firstLastWindowAggregation", "libFunctionNoClass", "funcIdentChained", 
		"libFunctionArgs", "libFunctionArgItem", "betweenList", "patternExpression", 
		"followedByExpression", "followedByRepeat", "orExpression", "andExpression", 
		"matchUntilExpression", "qualifyExpression", "guardPostFix", "distinctExpressionList", 
		"distinctExpressionAtom", "atomicExpression", "observerExpression", "guardWhereExpression", 
		"guardWhileExpression", "matchUntilRange", "eventFilterExpression", "propertyExpression", 
		"propertyExpressionAtomic", "propertyExpressionSelect", "propertySelectionList", 
		"propertySelectionListElement", "propertyStreamSelector", "typeExpressionAnnotation", 
		"patternFilterExpression", "patternFilterAnnotation", "classIdentifierNoDimensions", 
		"classIdentifierWithDimensions", "typeParameters", "dimensions", "classIdentifier", 
		"classIdentifierGenericArgs", "classIdentifierGenericArgsList", "expressionListWithNamed", 
		"expressionListWithNamedWithTime", "expressionWithNamed", "expressionWithNamedWithTime", 
		"expressionNamedParameter", "expressionNamedParameterWithTime", "expressionList", 
		"expressionWithTimeList", "expressionWithTime", "expressionWithTimeInclLast", 
		"expressionQualifyable", "lastWeekdayOperand", "lastOperand", "frequencyOperand", 
		"rangeOperand", "lastOperator", "weekDayOperator", "numericParameterList", 
		"numericListParameter", "chainable", "chainableRootWithOpt", "chainableElements", 
		"chainableAtomicWithOpt", "chainableAtomic", "chainableArray", "chainableWithArgs", 
		"chainableIdent", "identOrTicked", "keywordAllowedIdent", "escapableStr", 
		"escapableIdent", "timePeriod", "yearPart", "monthPart", "weekPart", "dayPart", 
		"hourPart", "minutePart", "secondPart", "millisecondPart", "microsecondPart", 
		"number", "substitution", "substitutionSlashIdent", "constant", "numberconstant", 
		"stringconstant", "jsonvalue", "jsonobject", "jsonarray", "jsonelements", 
		"jsonmembers", "jsonpair"
	};

	private static readonly string[] _LiteralNames = {
		null, "'create'", "'window'", "'in'", "'between'", "'like'", "'regexp'", 
		"'escape'", "'or'", "'and'", "'not'", "'every'", "'every-distinct'", "'where'", 
		"'as'", "'sum'", "'avg'", "'max'", "'min'", "'coalesce'", "'median'", 
		"'stddev'", "'avedev'", "'count'", "'select'", "'case'", "'else'", "'when'", 
		"'then'", "'end'", "'from'", "'outer'", "'inner'", "'join'", "'left'", 
		"'right'", "'full'", "'on'", "'is'", "'by'", "'group'", "'having'", "'distinct'", 
		"'all'", "'any'", "'some'", "'output'", "'events'", "'first'", "'last'", 
		"'insert'", "'into'", "'values'", "'order'", "'asc'", "'desc'", "'rstream'", 
		"'istream'", "'irstream'", "'schema'", "'unidirectional'", "'retain-union'", 
		"'retain-intersection'", "'pattern'", "'sql'", "'metadatasql'", "'prev'", 
		"'prevtail'", "'prevcount'", "'prevwindow'", "'prior'", "'exists'", "'weekday'", 
		"'lastweekday'", "'instanceof'", "'typeof'", "'cast'", "'current_timestamp'", 
		"'delete'", "'snapshot'", "'set'", "'variable'", "'table'", "'until'", 
		"'at'", "'index'", "'year'", "'years'", "'month'", "'months'", "'week'", 
		"'weeks'", "'day'", "'days'", "'hour'", "'hours'", "'minute'", "'minutes'", 
		"'sec'", "'second'", "'seconds'", "'msec'", "'millisecond'", "'milliseconds'", 
		"'usec'", "'microsecond'", "'microseconds'", "'true'", "'false'", "'null'", 
		"'limit'", "'offset'", "'update'", "'match_recognize'", "'match_recognize_permute'", 
		"'measures'", "'define'", "'partition'", "'matches'", "'after'", "'for'", 
		"'while'", "'using'", "'merge'", "'matched'", "'expression'", "'inlined_class'", 
		"'new'", "'start'", "'context'", "'initiated'", "'terminated'", "'dataflow'", 
		"'cube'", "'rollup'", "'grouping'", "'grouping_id'", "'sets'", "'event-precedence'", 
		"'-['", "'->'", "'=>'", "'='", "'<>'", "'?'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "':'", "','", "'=='", "'!'", "'~'", "'!='", "'/'", "'/='", 
		"'+'", "'+='", "'++'", "'-'", "'-='", "'--'", "'*'", "'*='", "'%'", "'%='", 
		"'>='", "'>'", "'<='", "'<'", "'^'", "'^='", "'|'", "'|='", "'||'", "'&'", 
		"'&='", "'&&'", "';'", "'.'", "'\\u18FF'", "'\\u18FE'", "'\\u18FD'", "'\\'", 
		"'`'", "'@'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", 
		"OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", 
		"WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", 
		"AVEDEV", "COUNT", "SELECT", "CASE", "ELSE", "WHEN", "THEN", "END", "FROM", 
		"OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", 
		"HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", 
		"LAST", "INSERT", "INTO", "VALUES", "ORDER", "ASC", "DESC", "RSTREAM", 
		"ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", 
		"PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", 
		"PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", 
		"CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", 
		"TABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", 
		"TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", 
		"TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", 
		"TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", 
		"TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", 
		"TIMEPERIOD_MILLISECONDS", "TIMEPERIOD_MICROSEC", "TIMEPERIOD_MICROSECOND", 
		"TIMEPERIOD_MICROSECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", 
		"ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MATCH_RECOGNIZE_PERMUTE", 
		"MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", 
		"USING", "MERGE", "MATCHED", "EXPRESSIONDECL", "CLASSDECL", "NEWKW", "START", 
		"CONTEXT", "INITIATED", "TERMINATED", "DATAFLOW", "CUBE", "ROLLUP", "GROUPING", 
		"GROUPING_ID", "SETS", "EVENTPRECEDENCE", "FOLLOWMAX_BEGIN", "FOLLOWED_BY", 
		"GOES", "EQUALS", "SQL_NE", "QUESTION", "LPAREN", "RPAREN", "LBRACK", 
		"RBRACK", "LCURLY", "RCURLY", "COLON", "COMMA", "EQUAL", "LNOT", "BNOT", 
		"NOT_EQUAL", "DIV", "DIV_ASSIGN", "PLUS", "PLUS_ASSIGN", "INC", "MINUS", 
		"MINUS_ASSIGN", "DEC", "STAR", "STAR_ASSIGN", "MOD", "MOD_ASSIGN", "GE", 
		"GT", "LE", "LT", "BXOR", "BXOR_ASSIGN", "BOR", "BOR_ASSIGN", "LOR", "BAND", 
		"BAND_ASSIGN", "LAND", "SEMI", "DOT", "NUM_LONG", "NUM_DOUBLE", "NUM_FLOAT", 
		"ESCAPECHAR", "ESCAPEBACKTICK", "ATCHAR", "HASHCHAR", "WS", "SL_COMMENT", 
		"ML_COMMENT", "TICKED_STRING_LITERAL", "QUOTED_STRING_LITERAL", "STRING_LITERAL", 
		"TRIPLEQUOTE", "IDENT", "IntegerLiteral", "FloatingPointLiteral"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EsperEPL2Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EsperEPL2GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		// provide nice error messages
		private System.Collections.Generic.Stack<string> paraphrases =
			new System.Collections.Generic.Stack<string>();

		// static information initialized once
		private static System.Collections.Generic.IDictionary<int, string> lexerTokenParaphrases =
			       new System.Collections.Generic.Dictionary<int, string>();
		private static System.Collections.Generic.IDictionary<int, string> parserTokenParaphrases =
				   new System.Collections.Generic.Dictionary<int, string>();
		private static System.Collections.Generic.ISet<string> parserKeywordSet =
				   new System.Collections.Generic.HashSet<string>();
		private static System.Collections.Generic.ISet<int> afterScriptTokens =
				   new System.Collections.Generic.HashSet<int>();

		private static readonly Object _iLock = new Object();

		public System.Collections.Generic.Stack<string> GetParaphrases()
		{
			return paraphrases;
		}

		public System.Collections.Generic.ISet<string> GetKeywords()
		{
			GetParserTokenParaphrases();
			return parserKeywordSet;
		}

		public static System.Collections.Generic.IDictionary<int, string> GetLexerTokenParaphrases()
		{
			lock(_iLock)
			{
				if (lexerTokenParaphrases.Count == 0)
				{
					lexerTokenParaphrases[IDENT] = "an identifier";
					lexerTokenParaphrases[FOLLOWED_BY] = "an followed-by '->'";
					lexerTokenParaphrases[EQUALS] = "an equals '='";
					lexerTokenParaphrases[SQL_NE] = "a sql-style not equals '<>'";
					lexerTokenParaphrases[QUESTION] = "a questionmark '?'";
					lexerTokenParaphrases[LPAREN] = "an opening parenthesis '('";
					lexerTokenParaphrases[RPAREN] = "a closing parenthesis ')'";
					lexerTokenParaphrases[LBRACK] = "a left angle bracket '['";
					lexerTokenParaphrases[RBRACK] = "a right angle bracket ']'";
					lexerTokenParaphrases[LCURLY] = "a left curly bracket '{'";
					lexerTokenParaphrases[RCURLY] = "a right curly bracket '}'";
					lexerTokenParaphrases[COLON] = "a colon ':'";
					lexerTokenParaphrases[COMMA] = "a comma ','";
					lexerTokenParaphrases[EQUAL] = "an equals compare '=='";
					lexerTokenParaphrases[LNOT] = "a not '!'";
					lexerTokenParaphrases[BNOT] = "a binary not '~'";
					lexerTokenParaphrases[NOT_EQUAL] = "a not equals '!='";
					lexerTokenParaphrases[DIV] = "a division operator '\'";
					lexerTokenParaphrases[DIV_ASSIGN] = "a division assign '/='";
					lexerTokenParaphrases[PLUS] = "a plus operator '+'";
					lexerTokenParaphrases[PLUS_ASSIGN] = "a plus assign '+='";
					lexerTokenParaphrases[INC] = "an increment operator '++'";
					lexerTokenParaphrases[MINUS] = "a minus '-'";
					lexerTokenParaphrases[MINUS_ASSIGN] = "a minus assign '-='";
					lexerTokenParaphrases[DEC] = "a decrement operator '--'";
					lexerTokenParaphrases[STAR] = "a star '*'";
					lexerTokenParaphrases[STAR_ASSIGN] = "a star assign '*='";
					lexerTokenParaphrases[MOD] = "a modulo";
					lexerTokenParaphrases[MOD_ASSIGN] = "a modulo assign";
					lexerTokenParaphrases[GE] = "a greater equals '>='";
					lexerTokenParaphrases[GT] = "a greater then '>'";
					lexerTokenParaphrases[LE] = "a less equals '<='";
					lexerTokenParaphrases[LT] = "a lesser then '<'";
					lexerTokenParaphrases[BXOR] = "a binary xor '^'";
					lexerTokenParaphrases[BXOR_ASSIGN] = "a binary xor assign '^='";
					lexerTokenParaphrases[BOR] = "a binary or '|'";
					lexerTokenParaphrases[BOR_ASSIGN] = "a binary or assign '|='";
					lexerTokenParaphrases[LOR] = "a logical or '||'";
					lexerTokenParaphrases[BAND] = "a binary and '&'";
					lexerTokenParaphrases[BAND_ASSIGN] = "a binary and assign '&='";
					lexerTokenParaphrases[LAND] = "a logical and '&&'";
					lexerTokenParaphrases[SEMI] = "a semicolon ';'";
					lexerTokenParaphrases[DOT] = "a dot '.'";
				}
			}

			return lexerTokenParaphrases;
		}

		public static System.Collections.Generic.IDictionary<int, string> GetParserTokenParaphrases()
		{
			lock(_iLock)
			{
				if (parserTokenParaphrases.Count == 0)
				{
					parserTokenParaphrases[CREATE] = "'create'";
					parserTokenParaphrases[WINDOW] = "'window'";
					parserTokenParaphrases[IN_SET] = "'in'";
					parserTokenParaphrases[BETWEEN] = "'between'";
					parserTokenParaphrases[LIKE] = "'like'";
					parserTokenParaphrases[REGEXP] = "'regexp'";
					parserTokenParaphrases[ESCAPE] = "'escape'";
					parserTokenParaphrases[OR_EXPR] = "'or'";
					parserTokenParaphrases[AND_EXPR] = "'and'";
					parserTokenParaphrases[NOT_EXPR] = "'not'";
					parserTokenParaphrases[EVERY_EXPR] = "'every'";
					parserTokenParaphrases[EVERY_DISTINCT_EXPR] = "'every-distinct'";
					parserTokenParaphrases[WHERE] = "'where'";
					parserTokenParaphrases[AS] = "'as'";
					parserTokenParaphrases[SUM] = "'sum'";
					parserTokenParaphrases[AVG] = "'avg'";
					parserTokenParaphrases[MAX] = "'max'";
					parserTokenParaphrases[MIN] = "'min'";
					parserTokenParaphrases[COALESCE] = "'coalesce'";
					parserTokenParaphrases[MEDIAN] = "'median'";
					parserTokenParaphrases[STDDEV] = "'stddev'";
					parserTokenParaphrases[AVEDEV] = "'avedev'";
					parserTokenParaphrases[COUNT] = "'count'";
					parserTokenParaphrases[SELECT] = "'select'";
					parserTokenParaphrases[CASE] = "'case'";
					parserTokenParaphrases[ELSE] = "'else'";
					parserTokenParaphrases[WHEN] = "'when'";
					parserTokenParaphrases[THEN] = "'then'";
					parserTokenParaphrases[END] = "'end'";
					parserTokenParaphrases[FROM] = "'from'";
					parserTokenParaphrases[OUTER] = "'outer'";
					parserTokenParaphrases[INNER] = "'inner'";
					parserTokenParaphrases[JOIN] = "'join'";
					parserTokenParaphrases[LEFT] = "'left'";
					parserTokenParaphrases[RIGHT] = "'right'";
					parserTokenParaphrases[FULL] = "'full'";
					parserTokenParaphrases[ON] = "'on'";
					parserTokenParaphrases[IS] = "'is'";
					parserTokenParaphrases[BY] = "'by'";
					parserTokenParaphrases[GROUP] = "'group'";
					parserTokenParaphrases[HAVING] = "'having'";
					parserTokenParaphrases[ALL] = "'all'";
					parserTokenParaphrases[ANY] = "'any'";
					parserTokenParaphrases[SOME] = "'some'";
					parserTokenParaphrases[OUTPUT] = "'output'";
					parserTokenParaphrases[EVENTS] = "'events'";
					parserTokenParaphrases[FIRST] = "'first'";
					parserTokenParaphrases[LAST] = "'last'";
					parserTokenParaphrases[INSERT] = "'insert'";
					parserTokenParaphrases[INTO] = "'into'";
					parserTokenParaphrases[ORDER] = "'order'";
					parserTokenParaphrases[ASC] = "'asc'";
					parserTokenParaphrases[DESC] = "'desc'";
					parserTokenParaphrases[RSTREAM] = "'rstream'";
					parserTokenParaphrases[ISTREAM] = "'istream'";
					parserTokenParaphrases[IRSTREAM] = "'irstream'";
					parserTokenParaphrases[SCHEMA] = "'schema'";
					parserTokenParaphrases[UNIDIRECTIONAL] = "'unidirectional'";
					parserTokenParaphrases[RETAINUNION] = "'retain-union'";
					parserTokenParaphrases[RETAININTERSECTION] = "'retain-intersection'";
					parserTokenParaphrases[PATTERN] = "'pattern'";
					parserTokenParaphrases[SQL] = "'sql'";
					parserTokenParaphrases[METADATASQL] = "'metadatasql'";
					parserTokenParaphrases[PREVIOUS] = "'prev'";
					parserTokenParaphrases[PREVIOUSTAIL] = "'prevtail'";
					parserTokenParaphrases[PREVIOUSCOUNT] = "'prevcount'";
					parserTokenParaphrases[PREVIOUSWINDOW] = "'prevwindow'";
					parserTokenParaphrases[PRIOR] = "'prior'";
					parserTokenParaphrases[EXISTS] = "'exists'";
					parserTokenParaphrases[WEEKDAY] = "'weekday'";
					parserTokenParaphrases[LW] = "'lastweekday'";
					parserTokenParaphrases[INSTANCEOF] = "'instanceof'";
					parserTokenParaphrases[TYPEOF] = "'typeof'";
					parserTokenParaphrases[CAST] = "'cast'";
					parserTokenParaphrases[CURRENT_TIMESTAMP] = "'current_timestamp'";
					parserTokenParaphrases[DELETE] = "'delete'";
					parserTokenParaphrases[DISTINCT] = "'distinct'";
					parserTokenParaphrases[SNAPSHOT] = "'snapshot'";
					parserTokenParaphrases[SET] = "'set'";
					parserTokenParaphrases[VARIABLE] = "'variable'";
					parserTokenParaphrases[TABLE] = "'table'";
					parserTokenParaphrases[INDEX] = "'index'";
					parserTokenParaphrases[UNTIL] = "'until'";
					parserTokenParaphrases[AT] = "'at'";
					parserTokenParaphrases[TIMEPERIOD_YEAR] = "'year'";
					parserTokenParaphrases[TIMEPERIOD_YEARS] = "'years'";
					parserTokenParaphrases[TIMEPERIOD_MONTH] = "'month'";
					parserTokenParaphrases[TIMEPERIOD_MONTHS] = "'months'";
					parserTokenParaphrases[TIMEPERIOD_WEEK] = "'week'";
					parserTokenParaphrases[TIMEPERIOD_WEEKS] = "'weeks'";
					parserTokenParaphrases[TIMEPERIOD_DAY] = "'day'";
					parserTokenParaphrases[TIMEPERIOD_DAYS] = "'days'";
					parserTokenParaphrases[TIMEPERIOD_HOUR] = "'hour'";
					parserTokenParaphrases[TIMEPERIOD_HOURS] = "'hours'";
					parserTokenParaphrases[TIMEPERIOD_MINUTE] = "'minute'";
					parserTokenParaphrases[TIMEPERIOD_MINUTES] = "'minutes'";
					parserTokenParaphrases[TIMEPERIOD_SEC] = "'sec'";
					parserTokenParaphrases[TIMEPERIOD_SECOND] = "'second'";
					parserTokenParaphrases[TIMEPERIOD_SECONDS] = "'seconds'";
					parserTokenParaphrases[TIMEPERIOD_MILLISEC] = "'msec'";
					parserTokenParaphrases[TIMEPERIOD_MILLISECOND] = "'millisecond'";
					parserTokenParaphrases[TIMEPERIOD_MILLISECONDS] = "'milliseconds'";
					parserTokenParaphrases[TIMEPERIOD_MICROSEC] = "'usec'";
					parserTokenParaphrases[TIMEPERIOD_MICROSECOND] = "'microsecond'";
					parserTokenParaphrases[TIMEPERIOD_MICROSECONDS] = "'microseconds'";
					parserTokenParaphrases[BOOLEAN_TRUE] = "'true'";
					parserTokenParaphrases[BOOLEAN_FALSE] = "'false'";
					parserTokenParaphrases[VALUE_NULL] = "'null'";
					parserTokenParaphrases[ROW_LIMIT_EXPR] = "'limit'";
					parserTokenParaphrases[OFFSET] = "'offset'";
					parserTokenParaphrases[UPDATE] = "'update'";
					parserTokenParaphrases[MATCH_RECOGNIZE] = "'match_recognize'";
					parserTokenParaphrases[MEASURES] = "'measures'";
					parserTokenParaphrases[DEFINE] = "'define'";
					parserTokenParaphrases[PARTITION] = "'partition'";
					parserTokenParaphrases[MATCHES] = "'matches'";
					parserTokenParaphrases[AFTER] = "'after'";
					parserTokenParaphrases[FOR] = "'for'";
					parserTokenParaphrases[WHILE] = "'while'";
					parserTokenParaphrases[MERGE] = "'merge'";
					parserTokenParaphrases[MATCHED] = "'matched'";
					parserTokenParaphrases[CONTEXT] = "'context'";
					parserTokenParaphrases[START] = "'start'";
					parserTokenParaphrases[END] = "'end'";
					parserTokenParaphrases[INITIATED] = "'initiated'";
					parserTokenParaphrases[TERMINATED] = "'terminated'";
					parserTokenParaphrases[USING] = "'using'";
					parserTokenParaphrases[EXPRESSIONDECL] = "'expression'";
					parserTokenParaphrases[CLASSDECL] = "'inlined_class'";
					parserTokenParaphrases[NEWKW] = "'new'";
					parserTokenParaphrases[DATAFLOW] = "'dataflow'";
					parserTokenParaphrases[VALUES] = "'values'";
					parserTokenParaphrases[CUBE] = "'cube'";
					parserTokenParaphrases[ROLLUP] = "'rollup'";
					parserTokenParaphrases[GROUPING] = "'grouping'";
					parserTokenParaphrases[GROUPING_ID] = "'grouping_id'";
					parserTokenParaphrases[SETS] = "'sets'";
					parserTokenParaphrases[EVENTPRECEDENCE] = "'event-precedence'";
					parserKeywordSet = new HashSet<string>(parserTokenParaphrases.Values);
				}
			}

			return parserTokenParaphrases;
		}

		public static System.Collections.Generic.ISet<int> GetAfterScriptTokens()
		{
			if (afterScriptTokens.Count == 0)
			{
				afterScriptTokens.Add(CREATE);
				afterScriptTokens.Add(EXPRESSIONDECL);
				afterScriptTokens.Add(SELECT);
				afterScriptTokens.Add(INSERT);
				afterScriptTokens.Add(ON);
				afterScriptTokens.Add(DELETE);
				afterScriptTokens.Add(UPDATE);
				afterScriptTokens.Add(ATCHAR);
			}

			return afterScriptTokens;
		}

		public EsperEPL2GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EsperEPL2GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartEPLExpressionRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EplExpressionContext eplExpression() {
			return GetRuleContext<EplExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EsperEPL2GrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationEnumContext[] annotationEnum() {
			return GetRuleContexts<AnnotationEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationEnumContext annotationEnum(int i) {
			return GetRuleContext<AnnotationEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionDeclContext[] expressionDecl() {
			return GetRuleContexts<ExpressionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionDeclContext expressionDecl(int i) {
			return GetRuleContext<ExpressionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		public StartEPLExpressionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startEPLExpressionRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterStartEPLExpressionRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitStartEPLExpressionRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartEPLExpressionRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartEPLExpressionRuleContext startEPLExpressionRule() {
		StartEPLExpressionRuleContext _localctx = new StartEPLExpressionRuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_startEPLExpressionRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & -9223372036854775805L) != 0)) {
				{
				State = 533;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATCHAR:
					{
					State = 530;
					annotationEnum();
					}
					break;
				case EXPRESSIONDECL:
					{
					State = 531;
					expressionDecl();
					}
					break;
				case CLASSDECL:
					{
					State = 532;
					classDecl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 538;
			eplExpression();
			State = 539;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartEventPropertyRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext chainable() {
			return GetRuleContext<ChainableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EsperEPL2GrammarParser.Eof, 0); }
		public StartEventPropertyRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startEventPropertyRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterStartEventPropertyRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitStartEventPropertyRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartEventPropertyRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartEventPropertyRuleContext startEventPropertyRule() {
		StartEventPropertyRuleContext _localctx = new StartEventPropertyRuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_startEventPropertyRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			chainable();
			State = 542;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartJsonValueRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonvalueContext jsonvalue() {
			return GetRuleContext<JsonvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EsperEPL2GrammarParser.Eof, 0); }
		public StartJsonValueRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startJsonValueRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterStartJsonValueRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitStartJsonValueRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartJsonValueRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartJsonValueRuleContext startJsonValueRule() {
		StartJsonValueRuleContext _localctx = new StartJsonValueRuleContext(Context, State);
		EnterRule(_localctx, 4, RULE_startJsonValueRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			jsonvalue();
			State = 545;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSDECL() { return GetToken(EsperEPL2GrammarParser.CLASSDECL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRIPLEQUOTE() { return GetTokens(EsperEPL2GrammarParser.TRIPLEQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIPLEQUOTE(int i) {
			return GetToken(EsperEPL2GrammarParser.TRIPLEQUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringconstantContext stringconstant() {
			return GetRuleContext<StringconstantContext>(0);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			Match(CLASSDECL);
			State = 548;
			Match(TRIPLEQUOTE);
			State = 549;
			stringconstant();
			State = 550;
			Match(TRIPLEQUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionDeclContext : ParserRuleContext {
		public IToken name;
		public IToken alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSIONDECL() { return GetToken(EsperEPL2GrammarParser.EXPRESSIONDECL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionDefContext expressionDef() {
			return GetRuleContext<ExpressionDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierWithDimensionsContext classIdentifierWithDimensions() {
			return GetRuleContext<ClassIdentifierWithDimensionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeExpressionAnnotationContext typeExpressionAnnotation() {
			return GetRuleContext<TypeExpressionAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionDialectContext expressionDialect() {
			return GetRuleContext<ExpressionDialectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(EsperEPL2GrammarParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public ExpressionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionDeclContext expressionDecl() {
		ExpressionDeclContext _localctx = new ExpressionDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_expressionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			Match(EXPRESSIONDECL);
			State = 554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 553;
				classIdentifierWithDimensions();
				}
				break;
			}
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATCHAR) {
				{
				State = 556;
				typeExpressionAnnotation();
				}
			}

			State = 560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 559;
				expressionDialect();
				}
				break;
			}
			State = 562;
			_localctx.name = Match(IDENT);
			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 563;
				Match(LPAREN);
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENT) {
					{
					State = 564;
					columnList();
					}
				}

				State = 567;
				Match(RPAREN);
				}
			}

			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 570;
				_localctx.alias = Match(IDENT);
				State = 571;
				Match(FOR);
				}
			}

			State = 574;
			expressionDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionDialectContext : ParserRuleContext {
		public IToken d;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public ExpressionDialectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionDialect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionDialect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionDialect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionDialect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionDialectContext expressionDialect() {
		ExpressionDialectContext _localctx = new ExpressionDialectContext(Context, State);
		EnterRule(_localctx, 10, RULE_expressionDialect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			_localctx.d = Match(IDENT);
			State = 577;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(EsperEPL2GrammarParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(EsperEPL2GrammarParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLambdaDeclContext expressionLambdaDecl() {
			return GetRuleContext<ExpressionLambdaDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(EsperEPL2GrammarParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringconstantContext stringconstant() {
			return GetRuleContext<StringconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(EsperEPL2GrammarParser.RBRACK, 0); }
		public ExpressionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionDefContext expressionDef() {
		ExpressionDefContext _localctx = new ExpressionDefContext(Context, State);
		EnterRule(_localctx, 12, RULE_expressionDef);
		try {
			State = 590;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 579;
				Match(LCURLY);
				State = 581;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 580;
					expressionLambdaDecl();
					}
					break;
				}
				State = 583;
				expression();
				State = 584;
				Match(RCURLY);
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 586;
				Match(LBRACK);
				State = 587;
				stringconstant();
				State = 588;
				Match(RBRACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionLambdaDeclContext : ParserRuleContext {
		public KeywordAllowedIdentContext i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOES() { return GetToken(EsperEPL2GrammarParser.GOES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWED_BY() { return GetToken(EsperEPL2GrammarParser.FOLLOWED_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext keywordAllowedIdent() {
			return GetRuleContext<KeywordAllowedIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnListKeywordAllowedContext columnListKeywordAllowed() {
			return GetRuleContext<ColumnListKeywordAllowedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public ExpressionLambdaDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionLambdaDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionLambdaDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionLambdaDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLambdaDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionLambdaDeclContext expressionLambdaDecl() {
		ExpressionLambdaDeclContext _localctx = new ExpressionLambdaDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_expressionLambdaDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WINDOW:
			case BETWEEN:
			case ESCAPE:
			case EVERY_EXPR:
			case WHERE:
			case SUM:
			case AVG:
			case MAX:
			case MIN:
			case COALESCE:
			case MEDIAN:
			case STDDEV:
			case AVEDEV:
			case COUNT:
			case OUTER:
			case JOIN:
			case LEFT:
			case RIGHT:
			case FULL:
			case EVENTS:
			case FIRST:
			case LAST:
			case SCHEMA:
			case UNIDIRECTIONAL:
			case RETAINUNION:
			case RETAININTERSECTION:
			case PATTERN:
			case SQL:
			case METADATASQL:
			case PREVIOUS:
			case PREVIOUSTAIL:
			case PRIOR:
			case WEEKDAY:
			case LW:
			case INSTANCEOF:
			case TYPEOF:
			case CAST:
			case SNAPSHOT:
			case SET:
			case VARIABLE:
			case TABLE:
			case UNTIL:
			case AT:
			case INDEX:
			case DEFINE:
			case PARTITION:
			case MATCHES:
			case AFTER:
			case FOR:
			case WHILE:
			case USING:
			case MERGE:
			case MATCHED:
			case CONTEXT:
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 592;
				_localctx.i = keywordAllowedIdent();
				}
				break;
			case LPAREN:
				{
				{
				State = 593;
				Match(LPAREN);
				State = 594;
				columnListKeywordAllowed();
				State = 595;
				Match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 599;
			_la = TokenStream.LA(1);
			if ( !(_la==FOLLOWED_BY || _la==GOES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionTypeAnnoContext : ParserRuleContext {
		public IToken n;
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATCHAR() { return GetToken(EsperEPL2GrammarParser.ATCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public ExpressionTypeAnnoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionTypeAnno; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionTypeAnno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionTypeAnno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionTypeAnno(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionTypeAnnoContext expressionTypeAnno() {
		ExpressionTypeAnnoContext _localctx = new ExpressionTypeAnnoContext(Context, State);
		EnterRule(_localctx, 16, RULE_expressionTypeAnno);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			Match(ATCHAR);
			State = 602;
			_localctx.n = Match(IDENT);
			{
			State = 603;
			Match(LPAREN);
			State = 604;
			_localctx.v = Match(IDENT);
			State = 605;
			Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATCHAR() { return GetToken(EsperEPL2GrammarParser.ATCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairsEnumContext elementValuePairsEnum() {
			return GetRuleContext<ElementValuePairsEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueEnumContext elementValueEnum() {
			return GetRuleContext<ElementValueEnumContext>(0);
		}
		public AnnotationEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterAnnotationEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitAnnotationEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationEnumContext annotationEnum() {
		AnnotationEnumContext _localctx = new AnnotationEnumContext(Context, State);
		EnterRule(_localctx, 18, RULE_annotationEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			Match(ATCHAR);
			State = 608;
			classIdentifier();
			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 609;
				Match(LPAREN);
				State = 612;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 610;
					elementValuePairsEnum();
					}
					break;
				case 2:
					{
					State = 611;
					elementValueEnum();
					}
					break;
				}
				State = 614;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairsEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairEnumContext[] elementValuePairEnum() {
			return GetRuleContexts<ElementValuePairEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairEnumContext elementValuePairEnum(int i) {
			return GetRuleContext<ElementValuePairEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public ElementValuePairsEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairsEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterElementValuePairsEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitElementValuePairsEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePairsEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairsEnumContext elementValuePairsEnum() {
		ElementValuePairsEnumContext _localctx = new ElementValuePairsEnumContext(Context, State);
		EnterRule(_localctx, 20, RULE_elementValuePairsEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			elementValuePairEnum();
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 618;
				Match(COMMA);
				State = 619;
				elementValuePairEnum();
				}
				}
				State = 624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext keywordAllowedIdent() {
			return GetRuleContext<KeywordAllowedIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(EsperEPL2GrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueEnumContext elementValueEnum() {
			return GetRuleContext<ElementValueEnumContext>(0);
		}
		public ElementValuePairEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterElementValuePairEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitElementValuePairEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePairEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairEnumContext elementValuePairEnum() {
		ElementValuePairEnumContext _localctx = new ElementValuePairEnumContext(Context, State);
		EnterRule(_localctx, 22, RULE_elementValuePairEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			keywordAllowedIdent();
			State = 626;
			Match(EQUALS);
			State = 627;
			elementValueEnum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueEnumContext : ParserRuleContext {
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationEnumContext annotationEnum() {
			return GetRuleContext<AnnotationEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueArrayEnumContext elementValueArrayEnum() {
			return GetRuleContext<ElementValueArrayEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		public ElementValueEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterElementValueEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitElementValueEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueEnumContext elementValueEnum() {
		ElementValueEnumContext _localctx = new ElementValueEnumContext(Context, State);
		EnterRule(_localctx, 24, RULE_elementValueEnum);
		try {
			State = 634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 629;
				annotationEnum();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 630;
				elementValueArrayEnum();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 631;
				constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 632;
				_localctx.v = Match(IDENT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 633;
				classIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(EsperEPL2GrammarParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(EsperEPL2GrammarParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueEnumContext[] elementValueEnum() {
			return GetRuleContexts<ElementValueEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueEnumContext elementValueEnum(int i) {
			return GetRuleContext<ElementValueEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public ElementValueArrayEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterElementValueArrayEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitElementValueArrayEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueArrayEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayEnumContext elementValueArrayEnum() {
		ElementValueArrayEnumContext _localctx = new ElementValueArrayEnumContext(Context, State);
		EnterRule(_localctx, 26, RULE_elementValueArrayEnum);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			Match(LCURLY);
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & 8070450532247928833L) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 2094019895108609L) != 0)) {
				{
				State = 637;
				elementValueEnum();
				State = 642;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 638;
						Match(COMMA);
						State = 639;
						elementValueEnum();
						}
						} 
					}
					State = 644;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				}
				}
			}

			State = 648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 647;
				Match(COMMA);
				}
			}

			State = 650;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EplExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectExprContext selectExpr() {
			return GetRuleContext<SelectExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateWindowExprContext createWindowExpr() {
			return GetRuleContext<CreateWindowExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexExprContext createIndexExpr() {
			return GetRuleContext<CreateIndexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateVariableExprContext createVariableExpr() {
			return GetRuleContext<CreateVariableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableExprContext createTableExpr() {
			return GetRuleContext<CreateTableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateSchemaExprContext createSchemaExpr() {
			return GetRuleContext<CreateSchemaExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextExprContext createContextExpr() {
			return GetRuleContext<CreateContextExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateExpressionExprContext createExpressionExpr() {
			return GetRuleContext<CreateExpressionExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateClassExprContext createClassExpr() {
			return GetRuleContext<CreateClassExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnExprContext onExpr() {
			return GetRuleContext<OnExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateExprContext updateExpr() {
			return GetRuleContext<UpdateExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDataflowContext createDataflow() {
			return GetRuleContext<CreateDataflowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FafDeleteContext fafDelete() {
			return GetRuleContext<FafDeleteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FafUpdateContext fafUpdate() {
			return GetRuleContext<FafUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FafInsertContext fafInsert() {
			return GetRuleContext<FafInsertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextExprContext contextExpr() {
			return GetRuleContext<ContextExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForExprContext forExpr() {
			return GetRuleContext<ForExprContext>(0);
		}
		public EplExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eplExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterEplExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitEplExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEplExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EplExpressionContext eplExpression() {
		EplExpressionContext _localctx = new EplExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_eplExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTEXT) {
				{
				State = 652;
				contextExpr();
				}
			}

			State = 670;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 655;
				selectExpr();
				}
				break;
			case 2:
				{
				State = 656;
				createWindowExpr();
				}
				break;
			case 3:
				{
				State = 657;
				createIndexExpr();
				}
				break;
			case 4:
				{
				State = 658;
				createVariableExpr();
				}
				break;
			case 5:
				{
				State = 659;
				createTableExpr();
				}
				break;
			case 6:
				{
				State = 660;
				createSchemaExpr();
				}
				break;
			case 7:
				{
				State = 661;
				createContextExpr();
				}
				break;
			case 8:
				{
				State = 662;
				createExpressionExpr();
				}
				break;
			case 9:
				{
				State = 663;
				createClassExpr();
				}
				break;
			case 10:
				{
				State = 664;
				onExpr();
				}
				break;
			case 11:
				{
				State = 665;
				updateExpr();
				}
				break;
			case 12:
				{
				State = 666;
				createDataflow();
				}
				break;
			case 13:
				{
				State = 667;
				fafDelete();
				}
				break;
			case 14:
				{
				State = 668;
				fafUpdate();
				}
				break;
			case 15:
				{
				State = 669;
				fafInsert();
				}
				break;
			}
			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 672;
				forExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextExprContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(EsperEPL2GrammarParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public ContextExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterContextExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitContextExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextExprContext contextExpr() {
		ContextExprContext _localctx = new ContextExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_contextExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			Match(CONTEXT);
			State = 676;
			_localctx.i = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(EsperEPL2GrammarParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectClauseContext selectClause() {
			return GetRuleContext<SelectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(EsperEPL2GrammarParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntoTableExprContext intoTableExpr() {
			return GetRuleContext<IntoTableExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(EsperEPL2GrammarParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InsertIntoExprContext insertIntoExpr() {
			return GetRuleContext<InsertIntoExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(EsperEPL2GrammarParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogContext matchRecog() {
			return GetRuleContext<MatchRecogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(EsperEPL2GrammarParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(EsperEPL2GrammarParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(EsperEPL2GrammarParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByListExprContext groupByListExpr() {
			return GetRuleContext<GroupByListExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(EsperEPL2GrammarParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(EsperEPL2GrammarParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputLimitContext outputLimit() {
			return GetRuleContext<OutputLimitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(EsperEPL2GrammarParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByListExprContext orderByListExpr() {
			return GetRuleContext<OrderByListExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_LIMIT_EXPR() { return GetToken(EsperEPL2GrammarParser.ROW_LIMIT_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowLimitContext rowLimit() {
			return GetRuleContext<RowLimitContext>(0);
		}
		public SelectExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSelectExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSelectExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExprContext selectExpr() {
		SelectExprContext _localctx = new SelectExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_selectExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 678;
				Match(INTO);
				State = 679;
				intoTableExpr();
				}
			}

			State = 684;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INSERT) {
				{
				State = 682;
				Match(INSERT);
				State = 683;
				insertIntoExpr();
				}
			}

			State = 686;
			Match(SELECT);
			State = 687;
			selectClause();
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 688;
				Match(FROM);
				State = 689;
				fromClause();
				}
			}

			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCH_RECOGNIZE) {
				{
				State = 692;
				matchRecog();
				}
			}

			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 695;
				Match(WHERE);
				State = 696;
				whereClause();
				}
			}

			State = 702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUP) {
				{
				State = 699;
				Match(GROUP);
				State = 700;
				Match(BY);
				State = 701;
				groupByListExpr();
				}
			}

			State = 706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 704;
				Match(HAVING);
				State = 705;
				havingClause();
				}
			}

			State = 710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTPUT) {
				{
				State = 708;
				Match(OUTPUT);
				State = 709;
				outputLimit();
				}
			}

			State = 715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 712;
				Match(ORDER);
				State = 713;
				Match(BY);
				State = 714;
				orderByListExpr();
				}
			}

			State = 719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROW_LIMIT_EXPR) {
				{
				State = 717;
				Match(ROW_LIMIT_EXPR);
				State = 718;
				rowLimit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(EsperEPL2GrammarParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnStreamExprContext onStreamExpr() {
			return GetRuleContext<OnStreamExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnDeleteExprContext onDeleteExpr() {
			return GetRuleContext<OnDeleteExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnSelectExprContext onSelectExpr() {
			return GetRuleContext<OnSelectExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnSetExprContext onSetExpr() {
			return GetRuleContext<OnSetExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnUpdateExprContext onUpdateExpr() {
			return GetRuleContext<OnUpdateExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnMergeExprContext onMergeExpr() {
			return GetRuleContext<OnMergeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnSelectInsertExprContext[] onSelectInsertExpr() {
			return GetRuleContexts<OnSelectInsertExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnSelectInsertExprContext onSelectInsertExpr(int i) {
			return GetRuleContext<OnSelectInsertExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputClauseInsertContext outputClauseInsert() {
			return GetRuleContext<OutputClauseInsertContext>(0);
		}
		public OnExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnExprContext onExpr() {
		OnExprContext _localctx = new OnExprContext(Context, State);
		EnterRule(_localctx, 34, RULE_onExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			Match(ON);
			State = 722;
			onStreamExpr();
			State = 738;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
				{
				State = 723;
				onDeleteExpr();
				}
				break;
			case SELECT:
			case INSERT:
				{
				State = 724;
				onSelectExpr();
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INSERT) {
					{
					State = 726;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 725;
						onSelectInsertExpr();
						}
						}
						State = 728;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==INSERT );
					State = 731;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTPUT) {
						{
						State = 730;
						outputClauseInsert();
						}
					}

					}
				}

				}
				break;
			case SET:
				{
				State = 735;
				onSetExpr();
				}
				break;
			case UPDATE:
				{
				State = 736;
				onUpdateExpr();
				}
				break;
			case MERGE:
				{
				State = 737;
				onMergeExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnStreamExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EventFilterExpressionContext eventFilterExpression() {
			return GetRuleContext<EventFilterExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternInclusionExpressionContext patternInclusionExpression() {
			return GetRuleContext<PatternInclusionExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentOrTickedContext identOrTicked() {
			return GetRuleContext<IdentOrTickedContext>(0);
		}
		public OnStreamExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onStreamExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnStreamExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnStreamExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnStreamExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnStreamExprContext onStreamExpr() {
		OnStreamExprContext _localctx = new OnStreamExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_onStreamExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENTS:
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 740;
				eventFilterExpression();
				}
				break;
			case PATTERN:
				{
				State = 741;
				patternInclusionExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 744;
				Match(AS);
				State = 745;
				identOrTicked();
				}
				break;
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 746;
				identOrTicked();
				}
				break;
			case SELECT:
			case INSERT:
			case DELETE:
			case SET:
			case UPDATE:
			case MERGE:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(EsperEPL2GrammarParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISTREAM() { return GetToken(EsperEPL2GrammarParser.ISTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDetailsContext updateDetails() {
			return GetRuleContext<UpdateDetailsContext>(0);
		}
		public UpdateExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterUpdateExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitUpdateExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateExprContext updateExpr() {
		UpdateExprContext _localctx = new UpdateExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_updateExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			Match(UPDATE);
			State = 750;
			Match(ISTREAM);
			State = 751;
			updateDetails();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(EsperEPL2GrammarParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnSetAssignmentListContext onSetAssignmentList() {
			return GetRuleContext<OnSetAssignmentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentOrTickedContext identOrTicked() {
			return GetRuleContext<IdentOrTickedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public UpdateDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterUpdateDetails(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitUpdateDetails(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDetailsContext updateDetails() {
		UpdateDetailsContext _localctx = new UpdateDetailsContext(Context, State);
		EnterRule(_localctx, 40, RULE_updateDetails);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			classIdentifier();
			State = 757;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 754;
				Match(AS);
				State = 755;
				identOrTicked();
				}
				break;
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 756;
				identOrTicked();
				}
				break;
			case SET:
				break;
			default:
				break;
			}
			State = 759;
			Match(SET);
			State = 760;
			onSetAssignmentList();
			State = 763;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 761;
				Match(WHERE);
				State = 762;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnMergeExprContext : ParserRuleContext {
		public IToken n;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(EsperEPL2GrammarParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnMergeDirectInsertContext onMergeDirectInsert() {
			return GetRuleContext<OnMergeDirectInsertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(EsperEPL2GrammarParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentOrTickedContext identOrTicked() {
			return GetRuleContext<IdentOrTickedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergeItemContext[] mergeItem() {
			return GetRuleContexts<MergeItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergeItemContext mergeItem(int i) {
			return GetRuleContext<MergeItemContext>(i);
		}
		public OnMergeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onMergeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnMergeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnMergeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnMergeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnMergeExprContext onMergeExpr() {
		OnMergeExprContext _localctx = new OnMergeExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_onMergeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			Match(MERGE);
			State = 767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 766;
				Match(INTO);
				}
			}

			State = 769;
			_localctx.n = Match(IDENT);
			State = 773;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 770;
				Match(AS);
				State = 771;
				identOrTicked();
				}
				break;
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 772;
				identOrTicked();
				}
				break;
			case WHERE:
			case WHEN:
			case INSERT:
				break;
			default:
				break;
			}
			State = 785;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INSERT:
				{
				State = 775;
				onMergeDirectInsert();
				}
				break;
			case WHERE:
			case WHEN:
				{
				State = 778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 776;
					Match(WHERE);
					State = 777;
					whereClause();
					}
				}

				State = 781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 780;
					mergeItem();
					}
					}
					State = 783;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MergeMatchedContext mergeMatched() {
			return GetRuleContext<MergeMatchedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergeUnmatchedContext mergeUnmatched() {
			return GetRuleContext<MergeUnmatchedContext>(0);
		}
		public MergeItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMergeItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMergeItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeItemContext mergeItem() {
		MergeItemContext _localctx = new MergeItemContext(Context, State);
		EnterRule(_localctx, 44, RULE_mergeItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 787;
				mergeMatched();
				}
				break;
			case 2:
				{
				State = 788;
				mergeUnmatched();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeMatchedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(EsperEPL2GrammarParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(EsperEPL2GrammarParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_EXPR() { return GetToken(EsperEPL2GrammarParser.AND_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergeMatchedItemContext[] mergeMatchedItem() {
			return GetRuleContexts<MergeMatchedItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergeMatchedItemContext mergeMatchedItem(int i) {
			return GetRuleContext<MergeMatchedItemContext>(i);
		}
		public MergeMatchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeMatched; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMergeMatched(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMergeMatched(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeMatched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeMatchedContext mergeMatched() {
		MergeMatchedContext _localctx = new MergeMatchedContext(Context, State);
		EnterRule(_localctx, 46, RULE_mergeMatched);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			Match(WHEN);
			State = 792;
			Match(MATCHED);
			State = 795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND_EXPR) {
				{
				State = 793;
				Match(AND_EXPR);
				State = 794;
				expression();
				}
			}

			State = 798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 797;
				mergeMatchedItem();
				}
				}
				State = 800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==THEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeMatchedItemContext : ParserRuleContext {
		public IToken u;
		public IToken d;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(EsperEPL2GrammarParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MergeInsertContext mergeInsert() {
			return GetRuleContext<MergeInsertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EsperEPL2GrammarParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(EsperEPL2GrammarParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnSetAssignmentListContext onSetAssignmentList() {
			return GetRuleContext<OnSetAssignmentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(EsperEPL2GrammarParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public MergeMatchedItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeMatchedItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMergeMatchedItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMergeMatchedItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeMatchedItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeMatchedItemContext mergeMatchedItem() {
		MergeMatchedItemContext _localctx = new MergeMatchedItemContext(Context, State);
		EnterRule(_localctx, 48, RULE_mergeMatchedItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802;
			Match(THEN);
			State = 817;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE:
				{
				{
				State = 803;
				_localctx.u = Match(UPDATE);
				State = 804;
				Match(SET);
				State = 805;
				onSetAssignmentList();
				}
				State = 809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 807;
					Match(WHERE);
					State = 808;
					whereClause();
					}
				}

				}
				break;
			case DELETE:
				{
				State = 811;
				_localctx.d = Match(DELETE);
				State = 814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 812;
					Match(WHERE);
					State = 813;
					whereClause();
					}
				}

				}
				break;
			case INSERT:
				{
				State = 816;
				mergeInsert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnMergeDirectInsertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(EsperEPL2GrammarParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(EsperEPL2GrammarParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectionListContext selectionList() {
			return GetRuleContext<SelectionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public OnMergeDirectInsertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onMergeDirectInsert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnMergeDirectInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnMergeDirectInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnMergeDirectInsert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnMergeDirectInsertContext onMergeDirectInsert() {
		OnMergeDirectInsertContext _localctx = new OnMergeDirectInsertContext(Context, State);
		EnterRule(_localctx, 50, RULE_onMergeDirectInsert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			Match(INSERT);
			State = 824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 820;
				Match(LPAREN);
				State = 821;
				columnList();
				State = 822;
				Match(RPAREN);
				}
			}

			State = 826;
			Match(SELECT);
			State = 827;
			selectionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeUnmatchedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(EsperEPL2GrammarParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EXPR() { return GetToken(EsperEPL2GrammarParser.NOT_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(EsperEPL2GrammarParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_EXPR() { return GetToken(EsperEPL2GrammarParser.AND_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergeUnmatchedItemContext[] mergeUnmatchedItem() {
			return GetRuleContexts<MergeUnmatchedItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergeUnmatchedItemContext mergeUnmatchedItem(int i) {
			return GetRuleContext<MergeUnmatchedItemContext>(i);
		}
		public MergeUnmatchedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeUnmatched; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMergeUnmatched(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMergeUnmatched(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeUnmatched(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeUnmatchedContext mergeUnmatched() {
		MergeUnmatchedContext _localctx = new MergeUnmatchedContext(Context, State);
		EnterRule(_localctx, 52, RULE_mergeUnmatched);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829;
			Match(WHEN);
			State = 830;
			Match(NOT_EXPR);
			State = 831;
			Match(MATCHED);
			State = 834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND_EXPR) {
				{
				State = 832;
				Match(AND_EXPR);
				State = 833;
				expression();
				}
			}

			State = 837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 836;
				mergeUnmatchedItem();
				}
				}
				State = 839;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==THEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeUnmatchedItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(EsperEPL2GrammarParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MergeInsertContext mergeInsert() {
			return GetRuleContext<MergeInsertContext>(0);
		}
		public MergeUnmatchedItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeUnmatchedItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMergeUnmatchedItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMergeUnmatchedItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeUnmatchedItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeUnmatchedItemContext mergeUnmatchedItem() {
		MergeUnmatchedItemContext _localctx = new MergeUnmatchedItemContext(Context, State);
		EnterRule(_localctx, 54, RULE_mergeUnmatchedItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841;
			Match(THEN);
			State = 842;
			mergeInsert();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeInsertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(EsperEPL2GrammarParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(EsperEPL2GrammarParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectionListContext selectionList() {
			return GetRuleContext<SelectionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(EsperEPL2GrammarParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InsertIntoEventPrecedenceContext insertIntoEventPrecedence() {
			return GetRuleContext<InsertIntoEventPrecedenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public MergeInsertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeInsert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMergeInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMergeInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeInsert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeInsertContext mergeInsert() {
		MergeInsertContext _localctx = new MergeInsertContext(Context, State);
		EnterRule(_localctx, 56, RULE_mergeInsert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			Match(INSERT);
			State = 847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 845;
				Match(INTO);
				State = 846;
				classIdentifier();
				}
			}

			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 849;
				Match(LPAREN);
				State = 850;
				columnList();
				State = 851;
				Match(RPAREN);
				}
			}

			State = 856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVENTPRECEDENCE) {
				{
				State = 855;
				insertIntoEventPrecedence();
				}
			}

			State = 858;
			Match(SELECT);
			State = 859;
			selectionList();
			State = 862;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 860;
				Match(WHERE);
				State = 861;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnSelectExprContext : ParserRuleContext {
		public IToken d;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(EsperEPL2GrammarParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectionListContext selectionList() {
			return GetRuleContext<SelectionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(EsperEPL2GrammarParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InsertIntoExprContext insertIntoExpr() {
			return GetRuleContext<InsertIntoExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EsperEPL2GrammarParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnExprFromContext onExprFrom() {
			return GetRuleContext<OnExprFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(EsperEPL2GrammarParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(EsperEPL2GrammarParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(EsperEPL2GrammarParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByListExprContext groupByListExpr() {
			return GetRuleContext<GroupByListExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(EsperEPL2GrammarParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(EsperEPL2GrammarParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByListExprContext orderByListExpr() {
			return GetRuleContext<OrderByListExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_LIMIT_EXPR() { return GetToken(EsperEPL2GrammarParser.ROW_LIMIT_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowLimitContext rowLimit() {
			return GetRuleContext<RowLimitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EsperEPL2GrammarParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_EXPR() { return GetToken(EsperEPL2GrammarParser.AND_EXPR, 0); }
		public OnSelectExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onSelectExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnSelectExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnSelectExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnSelectExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnSelectExprContext onSelectExpr() {
		OnSelectExprContext _localctx = new OnSelectExprContext(Context, State);
		EnterRule(_localctx, 58, RULE_onSelectExpr);
		 paraphrases.Push("on-select clause"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INSERT) {
				{
				State = 864;
				Match(INSERT);
				State = 865;
				insertIntoExpr();
				}
			}

			State = 868;
			Match(SELECT);
			State = 873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND_EXPR || _la==DELETE) {
				{
				State = 870;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND_EXPR) {
					{
					State = 869;
					Match(AND_EXPR);
					}
				}

				State = 872;
				_localctx.d = Match(DELETE);
				}
			}

			State = 876;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISTINCT) {
				{
				State = 875;
				Match(DISTINCT);
				}
			}

			State = 878;
			selectionList();
			State = 880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 879;
				onExprFrom();
				}
			}

			State = 884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 882;
				Match(WHERE);
				State = 883;
				whereClause();
				}
			}

			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUP) {
				{
				State = 886;
				Match(GROUP);
				State = 887;
				Match(BY);
				State = 888;
				groupByListExpr();
				}
			}

			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 891;
				Match(HAVING);
				State = 892;
				havingClause();
				}
			}

			State = 898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 895;
				Match(ORDER);
				State = 896;
				Match(BY);
				State = 897;
				orderByListExpr();
				}
			}

			State = 902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROW_LIMIT_EXPR) {
				{
				State = 900;
				Match(ROW_LIMIT_EXPR);
				State = 901;
				rowLimit();
				}
			}

			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnUpdateExprContext : ParserRuleContext {
		public IToken n;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(EsperEPL2GrammarParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(EsperEPL2GrammarParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnSetAssignmentListContext onSetAssignmentList() {
			return GetRuleContext<OnSetAssignmentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentOrTickedContext identOrTicked() {
			return GetRuleContext<IdentOrTickedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public OnUpdateExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onUpdateExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnUpdateExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnUpdateExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnUpdateExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnUpdateExprContext onUpdateExpr() {
		OnUpdateExprContext _localctx = new OnUpdateExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_onUpdateExpr);
		 paraphrases.Push("on-update clause"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			Match(UPDATE);
			State = 905;
			_localctx.n = Match(IDENT);
			State = 909;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 906;
				Match(AS);
				State = 907;
				identOrTicked();
				}
				break;
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 908;
				identOrTicked();
				}
				break;
			case SET:
				break;
			default:
				break;
			}
			State = 911;
			Match(SET);
			State = 912;
			onSetAssignmentList();
			State = 915;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 913;
				Match(WHERE);
				State = 914;
				whereClause();
				}
			}

			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnSelectInsertExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(EsperEPL2GrammarParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InsertIntoExprContext insertIntoExpr() {
			return GetRuleContext<InsertIntoExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(EsperEPL2GrammarParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectionListContext selectionList() {
			return GetRuleContext<SelectionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnSelectInsertFromClauseContext onSelectInsertFromClause() {
			return GetRuleContext<OnSelectInsertFromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public OnSelectInsertExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onSelectInsertExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnSelectInsertExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnSelectInsertExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnSelectInsertExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnSelectInsertExprContext onSelectInsertExpr() {
		OnSelectInsertExprContext _localctx = new OnSelectInsertExprContext(Context, State);
		EnterRule(_localctx, 62, RULE_onSelectInsertExpr);
		 paraphrases.Push("on-select-insert clause"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			Match(INSERT);
			State = 918;
			insertIntoExpr();
			State = 919;
			Match(SELECT);
			State = 920;
			selectionList();
			State = 922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 921;
				onSelectInsertFromClause();
				}
			}

			State = 926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 924;
				Match(WHERE);
				State = 925;
				whereClause();
				}
			}

			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnSelectInsertFromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(EsperEPL2GrammarParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionContext propertyExpression() {
			return GetRuleContext<PropertyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentOrTickedContext identOrTicked() {
			return GetRuleContext<IdentOrTickedContext>(0);
		}
		public OnSelectInsertFromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onSelectInsertFromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnSelectInsertFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnSelectInsertFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnSelectInsertFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnSelectInsertFromClauseContext onSelectInsertFromClause() {
		OnSelectInsertFromClauseContext _localctx = new OnSelectInsertFromClauseContext(Context, State);
		EnterRule(_localctx, 64, RULE_onSelectInsertFromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			Match(FROM);
			State = 929;
			propertyExpression();
			State = 933;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 930;
				Match(AS);
				State = 931;
				identOrTicked();
				}
				break;
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 932;
				identOrTicked();
				}
				break;
			case Eof:
			case WHERE:
			case OUTPUT:
			case INSERT:
			case FOR:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputClauseInsertContext : ParserRuleContext {
		public IToken f;
		public IToken a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(EsperEPL2GrammarParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(EsperEPL2GrammarParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EsperEPL2GrammarParser.ALL, 0); }
		public OutputClauseInsertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputClauseInsert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOutputClauseInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOutputClauseInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputClauseInsert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputClauseInsertContext outputClauseInsert() {
		OutputClauseInsertContext _localctx = new OutputClauseInsertContext(Context, State);
		EnterRule(_localctx, 66, RULE_outputClauseInsert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 935;
			Match(OUTPUT);
			State = 938;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FIRST:
				{
				State = 936;
				_localctx.f = Match(FIRST);
				}
				break;
			case ALL:
				{
				State = 937;
				_localctx.a = Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnDeleteExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EsperEPL2GrammarParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnExprFromContext onExprFrom() {
			return GetRuleContext<OnExprFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public OnDeleteExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onDeleteExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnDeleteExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnDeleteExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnDeleteExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnDeleteExprContext onDeleteExpr() {
		OnDeleteExprContext _localctx = new OnDeleteExprContext(Context, State);
		EnterRule(_localctx, 68, RULE_onDeleteExpr);
		 paraphrases.Push("on-delete clause"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 940;
			Match(DELETE);
			State = 941;
			onExprFrom();
			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 942;
				Match(WHERE);
				State = 943;
				whereClause();
				}
			}

			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnSetExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(EsperEPL2GrammarParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnSetAssignmentListContext onSetAssignmentList() {
			return GetRuleContext<OnSetAssignmentListContext>(0);
		}
		public OnSetExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onSetExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnSetExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnSetExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnSetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnSetExprContext onSetExpr() {
		OnSetExprContext _localctx = new OnSetExprContext(Context, State);
		EnterRule(_localctx, 70, RULE_onSetExpr);
		 paraphrases.Push("on-set clause"); 
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946;
			Match(SET);
			State = 947;
			onSetAssignmentList();
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnSetAssignmentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OnSetAssignmentContext[] onSetAssignment() {
			return GetRuleContexts<OnSetAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnSetAssignmentContext onSetAssignment(int i) {
			return GetRuleContext<OnSetAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public OnSetAssignmentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onSetAssignmentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnSetAssignmentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnSetAssignmentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnSetAssignmentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnSetAssignmentListContext onSetAssignmentList() {
		OnSetAssignmentListContext _localctx = new OnSetAssignmentListContext(Context, State);
		EnterRule(_localctx, 72, RULE_onSetAssignmentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			onSetAssignment();
			State = 954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 950;
				Match(COMMA);
				State = 951;
				onSetAssignment();
				}
				}
				State = 956;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnSetAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext chainable() {
			return GetRuleContext<ChainableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(EsperEPL2GrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OnSetAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onSetAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnSetAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnSetAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnSetAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnSetAssignmentContext onSetAssignment() {
		OnSetAssignmentContext _localctx = new OnSetAssignmentContext(Context, State);
		EnterRule(_localctx, 74, RULE_onSetAssignment);
		try {
			State = 962;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 957;
				chainable();
				State = 958;
				Match(EQUALS);
				State = 959;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 961;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnExprFromContext : ParserRuleContext {
		public IToken n;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(EsperEPL2GrammarParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentOrTickedContext identOrTicked() {
			return GetRuleContext<IdentOrTickedContext>(0);
		}
		public OnExprFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onExprFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOnExprFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOnExprFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnExprFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnExprFromContext onExprFrom() {
		OnExprFromContext _localctx = new OnExprFromContext(Context, State);
		EnterRule(_localctx, 76, RULE_onExprFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964;
			Match(FROM);
			State = 965;
			_localctx.n = Match(IDENT);
			State = 969;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 966;
				Match(AS);
				State = 967;
				identOrTicked();
				}
				break;
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 968;
				identOrTicked();
				}
				break;
			case Eof:
			case WHERE:
			case GROUP:
			case HAVING:
			case INSERT:
			case ORDER:
			case ROW_LIMIT_EXPR:
			case FOR:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateWindowExprContext : ParserRuleContext {
		public IToken i;
		public IToken ru;
		public IToken ri;
		public IToken i1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(EsperEPL2GrammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(EsperEPL2GrammarParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateWindowExprModelAfterContext createWindowExprModelAfter() {
			return GetRuleContext<CreateWindowExprModelAfterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateColumnListContext createColumnList() {
			return GetRuleContext<CreateColumnListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewExpressionsContext viewExpressions() {
			return GetRuleContext<ViewExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAINUNION() { return GetToken(EsperEPL2GrammarParser.RETAINUNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAININTERSECTION() { return GetToken(EsperEPL2GrammarParser.RETAININTERSECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(EsperEPL2GrammarParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CreateWindowExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createWindowExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateWindowExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateWindowExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateWindowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateWindowExprContext createWindowExpr() {
		CreateWindowExprContext _localctx = new CreateWindowExprContext(Context, State);
		EnterRule(_localctx, 78, RULE_createWindowExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			Match(CREATE);
			State = 972;
			Match(WINDOW);
			State = 973;
			_localctx.i = Match(IDENT);
			State = 975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT || _la==HASHCHAR) {
				{
				State = 974;
				viewExpressions();
				}
			}

			State = 979;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETAINUNION:
				{
				State = 977;
				_localctx.ru = Match(RETAINUNION);
				}
				break;
			case RETAININTERSECTION:
				{
				State = 978;
				_localctx.ri = Match(RETAININTERSECTION);
				}
				break;
			case AS:
			case SELECT:
			case EVENTS:
			case LPAREN:
			case TICKED_STRING_LITERAL:
			case IDENT:
				break;
			default:
				break;
			}
			State = 982;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 981;
				Match(AS);
				}
			}

			State = 989;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case EVENTS:
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 984;
				createWindowExprModelAfter();
				}
				break;
			case LPAREN:
				{
				State = 985;
				Match(LPAREN);
				State = 986;
				createColumnList();
				State = 987;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INSERT) {
				{
				State = 991;
				_localctx.i1 = Match(INSERT);
				State = 994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 992;
					Match(WHERE);
					State = 993;
					expression();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateWindowExprModelAfterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(EsperEPL2GrammarParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateSelectionListContext createSelectionList() {
			return GetRuleContext<CreateSelectionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(EsperEPL2GrammarParser.FROM, 0); }
		public CreateWindowExprModelAfterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createWindowExprModelAfter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateWindowExprModelAfter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateWindowExprModelAfter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateWindowExprModelAfter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateWindowExprModelAfterContext createWindowExprModelAfter() {
		CreateWindowExprModelAfterContext _localctx = new CreateWindowExprModelAfterContext(Context, State);
		EnterRule(_localctx, 80, RULE_createWindowExprModelAfter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SELECT) {
				{
				State = 998;
				Match(SELECT);
				State = 999;
				createSelectionList();
				State = 1000;
				Match(FROM);
				}
			}

			State = 1004;
			classIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexExprContext : ParserRuleContext {
		public IToken u;
		public IToken n;
		public IToken w;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(EsperEPL2GrammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(EsperEPL2GrammarParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(EsperEPL2GrammarParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexColumnListContext createIndexColumnList() {
			return GetRuleContext<CreateIndexColumnListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		public CreateIndexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateIndexExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateIndexExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexExprContext createIndexExpr() {
		CreateIndexExprContext _localctx = new CreateIndexExprContext(Context, State);
		EnterRule(_localctx, 82, RULE_createIndexExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1006;
			Match(CREATE);
			State = 1008;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 1007;
				_localctx.u = Match(IDENT);
				}
			}

			State = 1010;
			Match(INDEX);
			State = 1011;
			_localctx.n = Match(IDENT);
			State = 1012;
			Match(ON);
			State = 1013;
			_localctx.w = Match(IDENT);
			State = 1014;
			Match(LPAREN);
			State = 1015;
			createIndexColumnList();
			State = 1016;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexColumnListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexColumnContext[] createIndexColumn() {
			return GetRuleContexts<CreateIndexColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexColumnContext createIndexColumn(int i) {
			return GetRuleContext<CreateIndexColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public CreateIndexColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexColumnList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateIndexColumnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateIndexColumnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexColumnListContext createIndexColumnList() {
		CreateIndexColumnListContext _localctx = new CreateIndexColumnListContext(Context, State);
		EnterRule(_localctx, 84, RULE_createIndexColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018;
			createIndexColumn();
			State = 1023;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1019;
				Match(COMMA);
				State = 1020;
				createIndexColumn();
				}
				}
				State = 1025;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexColumnContext : ParserRuleContext {
		public ExpressionListContext i;
		public IToken t;
		public ExpressionListContext p;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EsperEPL2GrammarParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EsperEPL2GrammarParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EsperEPL2GrammarParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EsperEPL2GrammarParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		public CreateIndexColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateIndexColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateIndexColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexColumnContext createIndexColumn() {
		CreateIndexColumnContext _localctx = new CreateIndexColumnContext(Context, State);
		EnterRule(_localctx, 86, RULE_createIndexColumn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 1026;
				expression();
				}
				break;
			case 2:
				{
				State = 1027;
				Match(LPAREN);
				State = 1029;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
					{
					State = 1028;
					_localctx.i = expressionList();
					}
				}

				State = 1031;
				Match(RPAREN);
				}
				break;
			}
			State = 1042;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 1034;
				_localctx.t = Match(IDENT);
				State = 1040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 1035;
					Match(LPAREN);
					State = 1037;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
						{
						State = 1036;
						_localctx.p = expressionList();
						}
					}

					State = 1039;
					Match(RPAREN);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateVariableExprContext : ParserRuleContext {
		public IToken c;
		public IToken n;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(EsperEPL2GrammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EsperEPL2GrammarParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierWithDimensionsContext classIdentifierWithDimensions() {
			return GetRuleContext<ClassIdentifierWithDimensionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(EsperEPL2GrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CreateVariableExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createVariableExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateVariableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateVariableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateVariableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateVariableExprContext createVariableExpr() {
		CreateVariableExprContext _localctx = new CreateVariableExprContext(Context, State);
		EnterRule(_localctx, 88, RULE_createVariableExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1044;
			Match(CREATE);
			State = 1046;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 1045;
				_localctx.c = Match(IDENT);
				}
			}

			State = 1048;
			Match(VARIABLE);
			State = 1049;
			classIdentifierWithDimensions();
			State = 1050;
			_localctx.n = Match(IDENT);
			State = 1053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 1051;
				Match(EQUALS);
				State = 1052;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableExprContext : ParserRuleContext {
		public IToken n;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(EsperEPL2GrammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(EsperEPL2GrammarParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableColumnListContext createTableColumnList() {
			return GetRuleContext<CreateTableColumnListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		public CreateTableExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateTableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateTableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableExprContext createTableExpr() {
		CreateTableExprContext _localctx = new CreateTableExprContext(Context, State);
		EnterRule(_localctx, 90, RULE_createTableExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1055;
			Match(CREATE);
			State = 1056;
			Match(TABLE);
			State = 1057;
			_localctx.n = Match(IDENT);
			State = 1059;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1058;
				Match(AS);
				}
			}

			State = 1061;
			Match(LPAREN);
			State = 1062;
			createTableColumnList();
			State = 1063;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableColumnListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableColumnContext[] createTableColumn() {
			return GetRuleContexts<CreateTableColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableColumnContext createTableColumn(int i) {
			return GetRuleContext<CreateTableColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public CreateTableColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableColumnList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateTableColumnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateTableColumnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTableColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableColumnListContext createTableColumnList() {
		CreateTableColumnListContext _localctx = new CreateTableColumnListContext(Context, State);
		EnterRule(_localctx, 92, RULE_createTableColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			createTableColumn();
			State = 1070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1066;
				Match(COMMA);
				State = 1067;
				createTableColumn();
				}
				}
				State = 1072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableColumnContext : ParserRuleContext {
		public IToken n;
		public IToken p;
		public IToken k;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierWithDimensionsContext classIdentifierWithDimensions() {
			return GetRuleContext<ClassIdentifierWithDimensionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinFuncContext builtinFunc() {
			return GetRuleContext<BuiltinFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext chainable() {
			return GetRuleContext<ChainableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeExpressionAnnotationContext[] typeExpressionAnnotation() {
			return GetRuleContexts<TypeExpressionAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeExpressionAnnotationContext typeExpressionAnnotation(int i) {
			return GetRuleContext<TypeExpressionAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationEnumContext[] annotationEnum() {
			return GetRuleContexts<AnnotationEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationEnumContext annotationEnum(int i) {
			return GetRuleContext<AnnotationEnumContext>(i);
		}
		public CreateTableColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateTableColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateTableColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTableColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableColumnContext createTableColumn() {
		CreateTableColumnContext _localctx = new CreateTableColumnContext(Context, State);
		EnterRule(_localctx, 94, RULE_createTableColumn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1073;
			_localctx.n = Match(IDENT);
			State = 1077;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 1074;
				classIdentifierWithDimensions();
				}
				break;
			case 2:
				{
				State = 1075;
				builtinFunc();
				}
				break;
			case 3:
				{
				State = 1076;
				chainable();
				}
				break;
			}
			State = 1080;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 1079;
				_localctx.p = Match(IDENT);
				}
				break;
			}
			State = 1083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 1082;
				_localctx.k = Match(IDENT);
				}
			}

			State = 1089;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ATCHAR) {
				{
				State = 1087;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 1085;
					typeExpressionAnnotation();
					}
					break;
				case 2:
					{
					State = 1086;
					annotationEnum();
					}
					break;
				}
				}
				State = 1091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateColumnListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateColumnListElementContext[] createColumnListElement() {
			return GetRuleContexts<CreateColumnListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateColumnListElementContext createColumnListElement(int i) {
			return GetRuleContext<CreateColumnListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public CreateColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createColumnList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateColumnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateColumnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateColumnListContext createColumnList() {
		CreateColumnListContext _localctx = new CreateColumnListContext(Context, State);
		EnterRule(_localctx, 96, RULE_createColumnList);
		 paraphrases.Push("column list"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092;
			createColumnListElement();
			State = 1097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1093;
				Match(COMMA);
				State = 1094;
				createColumnListElement();
				}
				}
				State = 1099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateColumnListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_NULL() { return GetToken(EsperEPL2GrammarParser.VALUE_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierWithDimensionsContext classIdentifierWithDimensions() {
			return GetRuleContext<ClassIdentifierWithDimensionsContext>(0);
		}
		public CreateColumnListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createColumnListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateColumnListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateColumnListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateColumnListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateColumnListElementContext createColumnListElement() {
		CreateColumnListElementContext _localctx = new CreateColumnListElementContext(Context, State);
		EnterRule(_localctx, 98, RULE_createColumnListElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1100;
			classIdentifier();
			State = 1103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUE_NULL:
				{
				State = 1101;
				Match(VALUE_NULL);
				}
				break;
			case EVENTS:
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 1102;
				classIdentifierWithDimensions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSelectionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateSelectionListElementContext[] createSelectionListElement() {
			return GetRuleContexts<CreateSelectionListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateSelectionListElementContext createSelectionListElement(int i) {
			return GetRuleContext<CreateSelectionListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public CreateSelectionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSelectionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateSelectionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateSelectionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSelectionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateSelectionListContext createSelectionList() {
		CreateSelectionListContext _localctx = new CreateSelectionListContext(Context, State);
		EnterRule(_localctx, 100, RULE_createSelectionList);
		 paraphrases.Push("select clause"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			createSelectionListElement();
			State = 1110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1106;
				Match(COMMA);
				State = 1107;
				createSelectionListElement();
				}
				}
				State = 1112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSelectionListElementContext : ParserRuleContext {
		public IToken s;
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(EsperEPL2GrammarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext chainable() {
			return GetRuleContext<ChainableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public CreateSelectionListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSelectionListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateSelectionListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateSelectionListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSelectionListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateSelectionListElementContext createSelectionListElement() {
		CreateSelectionListElementContext _localctx = new CreateSelectionListElementContext(Context, State);
		EnterRule(_localctx, 102, RULE_createSelectionListElement);
		int _la;
		try {
			State = 1123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1113;
				_localctx.s = Match(STAR);
				}
				break;
			case WINDOW:
			case BETWEEN:
			case ESCAPE:
			case EVERY_EXPR:
			case WHERE:
			case SUM:
			case AVG:
			case MAX:
			case MIN:
			case COALESCE:
			case MEDIAN:
			case STDDEV:
			case AVEDEV:
			case COUNT:
			case OUTER:
			case JOIN:
			case LEFT:
			case RIGHT:
			case FULL:
			case EVENTS:
			case FIRST:
			case LAST:
			case SCHEMA:
			case UNIDIRECTIONAL:
			case RETAINUNION:
			case RETAININTERSECTION:
			case PATTERN:
			case SQL:
			case METADATASQL:
			case PREVIOUS:
			case PREVIOUSTAIL:
			case PRIOR:
			case WEEKDAY:
			case LW:
			case INSTANCEOF:
			case TYPEOF:
			case CAST:
			case SNAPSHOT:
			case SET:
			case VARIABLE:
			case TABLE:
			case UNTIL:
			case AT:
			case INDEX:
			case DEFINE:
			case PARTITION:
			case MATCHES:
			case AFTER:
			case FOR:
			case WHILE:
			case USING:
			case MERGE:
			case MATCHED:
			case CONTEXT:
			case TICKED_STRING_LITERAL:
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1114;
				chainable();
				State = 1117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1115;
					Match(AS);
					State = 1116;
					_localctx.i = Match(IDENT);
					}
				}

				}
				break;
			case BOOLEAN_TRUE:
			case BOOLEAN_FALSE:
			case VALUE_NULL:
			case PLUS:
			case MINUS:
			case QUOTED_STRING_LITERAL:
			case STRING_LITERAL:
			case IntegerLiteral:
			case FloatingPointLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1119;
				constant();
				State = 1120;
				Match(AS);
				State = 1121;
				_localctx.i = Match(IDENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSchemaExprContext : ParserRuleContext {
		public IToken keyword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(EsperEPL2GrammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateSchemaDefContext createSchemaDef() {
			return GetRuleContext<CreateSchemaDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public CreateSchemaExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSchemaExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateSchemaExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateSchemaExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSchemaExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateSchemaExprContext createSchemaExpr() {
		CreateSchemaExprContext _localctx = new CreateSchemaExprContext(Context, State);
		EnterRule(_localctx, 104, RULE_createSchemaExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			Match(CREATE);
			State = 1127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 1126;
				_localctx.keyword = Match(IDENT);
				}
			}

			State = 1129;
			createSchemaDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSchemaDefContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(EsperEPL2GrammarParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariantListContext variantList() {
			return GetRuleContext<VariantListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateSchemaQualContext[] createSchemaQual() {
			return GetRuleContexts<CreateSchemaQualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateSchemaQualContext createSchemaQual(int i) {
			return GetRuleContext<CreateSchemaQualContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateColumnListContext createColumnList() {
			return GetRuleContext<CreateColumnListContext>(0);
		}
		public CreateSchemaDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSchemaDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateSchemaDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateSchemaDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSchemaDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateSchemaDefContext createSchemaDef() {
		CreateSchemaDefContext _localctx = new CreateSchemaDefContext(Context, State);
		EnterRule(_localctx, 106, RULE_createSchemaDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131;
			Match(SCHEMA);
			State = 1132;
			_localctx.name = Match(IDENT);
			State = 1134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1133;
				Match(AS);
				}
			}

			State = 1142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENTS:
			case STAR:
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 1136;
				variantList();
				}
				break;
			case LPAREN:
				{
				State = 1137;
				Match(LPAREN);
				State = 1139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EVENTS || _la==TICKED_STRING_LITERAL || _la==IDENT) {
					{
					State = 1138;
					createColumnList();
					}
				}

				State = 1141;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENT) {
				{
				{
				State = 1144;
				createSchemaQual();
				}
				}
				State = 1149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FafDeleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EsperEPL2GrammarParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(EsperEPL2GrammarParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentOrTickedContext identOrTicked() {
			return GetRuleContext<IdentOrTickedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public FafDeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fafDelete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterFafDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitFafDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFafDelete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FafDeleteContext fafDelete() {
		FafDeleteContext _localctx = new FafDeleteContext(Context, State);
		EnterRule(_localctx, 108, RULE_fafDelete);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1150;
			Match(DELETE);
			State = 1151;
			Match(FROM);
			State = 1152;
			classIdentifier();
			State = 1156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 1153;
				Match(AS);
				State = 1154;
				identOrTicked();
				}
				break;
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 1155;
				identOrTicked();
				}
				break;
			case Eof:
			case WHERE:
			case FOR:
				break;
			default:
				break;
			}
			State = 1160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 1158;
				Match(WHERE);
				State = 1159;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FafUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(EsperEPL2GrammarParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDetailsContext updateDetails() {
			return GetRuleContext<UpdateDetailsContext>(0);
		}
		public FafUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fafUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterFafUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitFafUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFafUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FafUpdateContext fafUpdate() {
		FafUpdateContext _localctx = new FafUpdateContext(Context, State);
		EnterRule(_localctx, 110, RULE_fafUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162;
			Match(UPDATE);
			State = 1163;
			updateDetails();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FafInsertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(EsperEPL2GrammarParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InsertIntoExprContext insertIntoExpr() {
			return GetRuleContext<InsertIntoExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(EsperEPL2GrammarParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FafInsertRowContext[] fafInsertRow() {
			return GetRuleContexts<FafInsertRowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FafInsertRowContext fafInsertRow(int i) {
			return GetRuleContext<FafInsertRowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public FafInsertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fafInsert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterFafInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitFafInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFafInsert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FafInsertContext fafInsert() {
		FafInsertContext _localctx = new FafInsertContext(Context, State);
		EnterRule(_localctx, 112, RULE_fafInsert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1165;
			Match(INSERT);
			State = 1166;
			insertIntoExpr();
			State = 1167;
			Match(VALUES);
			State = 1168;
			fafInsertRow();
			State = 1173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1169;
				Match(COMMA);
				State = 1170;
				fafInsertRow();
				}
				}
				State = 1175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FafInsertRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public FafInsertRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fafInsertRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterFafInsertRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitFafInsertRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFafInsertRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FafInsertRowContext fafInsertRow() {
		FafInsertRowContext _localctx = new FafInsertRowContext(Context, State);
		EnterRule(_localctx, 114, RULE_fafInsertRow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1176;
			Match(LPAREN);
			State = 1177;
			expressionList();
			State = 1178;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDataflowContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(EsperEPL2GrammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFLOW() { return GetToken(EsperEPL2GrammarParser.DATAFLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GopListContext gopList() {
			return GetRuleContext<GopListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		public CreateDataflowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDataflow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateDataflow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateDataflow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDataflow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDataflowContext createDataflow() {
		CreateDataflowContext _localctx = new CreateDataflowContext(Context, State);
		EnterRule(_localctx, 116, RULE_createDataflow);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180;
			Match(CREATE);
			State = 1181;
			Match(DATAFLOW);
			State = 1182;
			_localctx.name = Match(IDENT);
			State = 1184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1183;
				Match(AS);
				}
			}

			State = 1186;
			gopList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GopContext[] gop() {
			return GetRuleContexts<GopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GopContext gop(int i) {
			return GetRuleContext<GopContext>(i);
		}
		public GopListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopListContext gopList() {
		GopListContext _localctx = new GopListContext(Context, State);
		EnterRule(_localctx, 118, RULE_gopList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			gop();
			State = 1192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CREATE || _la==SELECT || _la==ATCHAR || _la==IDENT) {
				{
				{
				State = 1189;
				gop();
				}
				}
				State = 1194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopContext : ParserRuleContext {
		public IToken opName;
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(EsperEPL2GrammarParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(EsperEPL2GrammarParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationEnumContext[] annotationEnum() {
			return GetRuleContexts<AnnotationEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationEnumContext annotationEnum(int i) {
			return GetRuleContext<AnnotationEnumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(EsperEPL2GrammarParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GopParamsContext gopParams() {
			return GetRuleContext<GopParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GopOutContext gopOut() {
			return GetRuleContext<GopOutContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GopDetailContext gopDetail() {
			return GetRuleContext<GopDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(EsperEPL2GrammarParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateSchemaExprContext createSchemaExpr() {
			return GetRuleContext<CreateSchemaExprContext>(0);
		}
		public GopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopContext gop() {
		GopContext _localctx = new GopContext(Context, State);
		EnterRule(_localctx, 120, RULE_gop);
		int _la;
		try {
			State = 1222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case ATCHAR:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ATCHAR) {
					{
					{
					State = 1195;
					annotationEnum();
					}
					}
					State = 1200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1203;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENT:
					{
					State = 1201;
					_localctx.opName = Match(IDENT);
					}
					break;
				case SELECT:
					{
					State = 1202;
					_localctx.s = Match(SELECT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 1205;
					gopParams();
					}
				}

				State = 1209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOLLOWED_BY) {
					{
					State = 1208;
					gopOut();
					}
				}

				State = 1211;
				Match(LCURLY);
				State = 1213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SELECT || _la==IDENT) {
					{
					State = 1212;
					gopDetail();
					}
				}

				State = 1216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1215;
					Match(COMMA);
					}
				}

				State = 1218;
				Match(RCURLY);
				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1219;
				createSchemaExpr();
				State = 1220;
				Match(COMMA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GopParamsItemListContext gopParamsItemList() {
			return GetRuleContext<GopParamsItemListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public GopParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopParamsContext gopParams() {
		GopParamsContext _localctx = new GopParamsContext(Context, State);
		EnterRule(_localctx, 122, RULE_gopParams);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1224;
			Match(LPAREN);
			State = 1225;
			gopParamsItemList();
			State = 1226;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopParamsItemListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GopParamsItemContext[] gopParamsItem() {
			return GetRuleContexts<GopParamsItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GopParamsItemContext gopParamsItem(int i) {
			return GetRuleContext<GopParamsItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public GopParamsItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopParamsItemList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopParamsItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopParamsItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopParamsItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopParamsItemListContext gopParamsItemList() {
		GopParamsItemListContext _localctx = new GopParamsItemListContext(Context, State);
		EnterRule(_localctx, 124, RULE_gopParamsItemList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1228;
			gopParamsItem();
			State = 1233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1229;
				Match(COMMA);
				State = 1230;
				gopParamsItem();
				}
				}
				State = 1235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopParamsItemContext : ParserRuleContext {
		public ClassIdentifierContext n;
		[System.Diagnostics.DebuggerNonUserCode] public GopParamsItemManyContext gopParamsItemMany() {
			return GetRuleContext<GopParamsItemManyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GopParamsItemAsContext gopParamsItemAs() {
			return GetRuleContext<GopParamsItemAsContext>(0);
		}
		public GopParamsItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopParamsItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopParamsItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopParamsItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopParamsItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopParamsItemContext gopParamsItem() {
		GopParamsItemContext _localctx = new GopParamsItemContext(Context, State);
		EnterRule(_localctx, 126, RULE_gopParamsItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1238;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENTS:
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 1236;
				_localctx.n = classIdentifier();
				}
				break;
			case LPAREN:
				{
				State = 1237;
				gopParamsItemMany();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1240;
				gopParamsItemAs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopParamsItemManyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext[] classIdentifier() {
			return GetRuleContexts<ClassIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier(int i) {
			return GetRuleContext<ClassIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(EsperEPL2GrammarParser.COMMA, 0); }
		public GopParamsItemManyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopParamsItemMany; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopParamsItemMany(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopParamsItemMany(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopParamsItemMany(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopParamsItemManyContext gopParamsItemMany() {
		GopParamsItemManyContext _localctx = new GopParamsItemManyContext(Context, State);
		EnterRule(_localctx, 128, RULE_gopParamsItemMany);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243;
			Match(LPAREN);
			State = 1244;
			classIdentifier();
			{
			State = 1245;
			Match(COMMA);
			State = 1246;
			classIdentifier();
			}
			State = 1248;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopParamsItemAsContext : ParserRuleContext {
		public IToken a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public GopParamsItemAsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopParamsItemAs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopParamsItemAs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopParamsItemAs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopParamsItemAs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopParamsItemAsContext gopParamsItemAs() {
		GopParamsItemAsContext _localctx = new GopParamsItemAsContext(Context, State);
		EnterRule(_localctx, 130, RULE_gopParamsItemAs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250;
			Match(AS);
			State = 1251;
			_localctx.a = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopOutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWED_BY() { return GetToken(EsperEPL2GrammarParser.FOLLOWED_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GopOutItemContext[] gopOutItem() {
			return GetRuleContexts<GopOutItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GopOutItemContext gopOutItem(int i) {
			return GetRuleContext<GopOutItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public GopOutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopOut; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopOut(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopOut(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopOut(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopOutContext gopOut() {
		GopOutContext _localctx = new GopOutContext(Context, State);
		EnterRule(_localctx, 132, RULE_gopOut);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253;
			Match(FOLLOWED_BY);
			State = 1254;
			gopOutItem();
			State = 1259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1255;
				Match(COMMA);
				State = 1256;
				gopOutItem();
				}
				}
				State = 1261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopOutItemContext : ParserRuleContext {
		public ClassIdentifierContext n;
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GopOutTypeListContext gopOutTypeList() {
			return GetRuleContext<GopOutTypeListContext>(0);
		}
		public GopOutItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopOutItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopOutItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopOutItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopOutItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopOutItemContext gopOutItem() {
		GopOutItemContext _localctx = new GopOutItemContext(Context, State);
		EnterRule(_localctx, 134, RULE_gopOutItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1262;
			_localctx.n = classIdentifier();
			State = 1264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1263;
				gopOutTypeList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopOutTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EsperEPL2GrammarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GopOutTypeParamContext[] gopOutTypeParam() {
			return GetRuleContexts<GopOutTypeParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GopOutTypeParamContext gopOutTypeParam(int i) {
			return GetRuleContext<GopOutTypeParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EsperEPL2GrammarParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public GopOutTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopOutTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopOutTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopOutTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopOutTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopOutTypeListContext gopOutTypeList() {
		GopOutTypeListContext _localctx = new GopOutTypeListContext(Context, State);
		EnterRule(_localctx, 136, RULE_gopOutTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1266;
			Match(LT);
			State = 1267;
			gopOutTypeParam();
			State = 1272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1268;
				Match(COMMA);
				State = 1269;
				gopOutTypeParam();
				}
				}
				State = 1274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1275;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopOutTypeParamContext : ParserRuleContext {
		public IToken q;
		[System.Diagnostics.DebuggerNonUserCode] public GopOutTypeItemContext gopOutTypeItem() {
			return GetRuleContext<GopOutTypeItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(EsperEPL2GrammarParser.QUESTION, 0); }
		public GopOutTypeParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopOutTypeParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopOutTypeParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopOutTypeParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopOutTypeParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopOutTypeParamContext gopOutTypeParam() {
		GopOutTypeParamContext _localctx = new GopOutTypeParamContext(Context, State);
		EnterRule(_localctx, 138, RULE_gopOutTypeParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENTS:
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 1277;
				gopOutTypeItem();
				}
				break;
			case QUESTION:
				{
				State = 1278;
				_localctx.q = Match(QUESTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopOutTypeItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GopOutTypeListContext gopOutTypeList() {
			return GetRuleContext<GopOutTypeListContext>(0);
		}
		public GopOutTypeItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopOutTypeItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopOutTypeItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopOutTypeItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopOutTypeItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopOutTypeItemContext gopOutTypeItem() {
		GopOutTypeItemContext _localctx = new GopOutTypeItemContext(Context, State);
		EnterRule(_localctx, 140, RULE_gopOutTypeItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1281;
			classIdentifier();
			State = 1283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1282;
				gopOutTypeList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GopConfigContext[] gopConfig() {
			return GetRuleContexts<GopConfigContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GopConfigContext gopConfig(int i) {
			return GetRuleContext<GopConfigContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public GopDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopDetail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopDetail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopDetailContext gopDetail() {
		GopDetailContext _localctx = new GopDetailContext(Context, State);
		EnterRule(_localctx, 142, RULE_gopDetail);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1285;
			gopConfig();
			State = 1290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1286;
					Match(COMMA);
					State = 1287;
					gopConfig();
					}
					} 
				}
				State = 1292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GopConfigContext : ParserRuleContext {
		public IToken n;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(EsperEPL2GrammarParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectExprContext selectExpr() {
			return GetRuleContext<SelectExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(EsperEPL2GrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonobjectContext jsonobject() {
			return GetRuleContext<JsonobjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonarrayContext jsonarray() {
			return GetRuleContext<JsonarrayContext>(0);
		}
		public GopConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gopConfig; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGopConfig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGopConfig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGopConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GopConfigContext gopConfig() {
		GopConfigContext _localctx = new GopConfigContext(Context, State);
		EnterRule(_localctx, 144, RULE_gopConfig);
		int _la;
		try {
			State = 1306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1293;
				Match(SELECT);
				State = 1294;
				_la = TokenStream.LA(1);
				if ( !(_la==EQUALS || _la==COLON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1295;
				Match(LPAREN);
				State = 1296;
				selectExpr();
				State = 1297;
				Match(RPAREN);
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1299;
				_localctx.n = Match(IDENT);
				State = 1300;
				_la = TokenStream.LA(1);
				if ( !(_la==EQUALS || _la==COLON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1304;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
				case 1:
					{
					State = 1301;
					expression();
					}
					break;
				case 2:
					{
					State = 1302;
					jsonobject();
					}
					break;
				case 3:
					{
					State = 1303;
					jsonarray();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContextExprContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(EsperEPL2GrammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(EsperEPL2GrammarParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextDetailContext createContextDetail() {
			return GetRuleContext<CreateContextDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		public CreateContextExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createContextExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateContextExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateContextExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateContextExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContextExprContext createContextExpr() {
		CreateContextExprContext _localctx = new CreateContextExprContext(Context, State);
		EnterRule(_localctx, 146, RULE_createContextExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1308;
			Match(CREATE);
			State = 1309;
			Match(CONTEXT);
			State = 1310;
			_localctx.name = Match(IDENT);
			State = 1312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1311;
				Match(AS);
				}
			}

			State = 1314;
			createContextDetail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateExpressionExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(EsperEPL2GrammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionDeclContext expressionDecl() {
			return GetRuleContext<ExpressionDeclContext>(0);
		}
		public CreateExpressionExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createExpressionExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateExpressionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateExpressionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateExpressionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateExpressionExprContext createExpressionExpr() {
		CreateExpressionExprContext _localctx = new CreateExpressionExprContext(Context, State);
		EnterRule(_localctx, 148, RULE_createExpressionExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316;
			Match(CREATE);
			State = 1317;
			expressionDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateClassExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(EsperEPL2GrammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		public CreateClassExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createClassExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateClassExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateClassExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateClassExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateClassExprContext createClassExpr() {
		CreateClassExprContext _localctx = new CreateClassExprContext(Context, State);
		EnterRule(_localctx, 150, RULE_createClassExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1319;
			Match(CREATE);
			State = 1320;
			classDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContextDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextChoiceContext createContextChoice() {
			return GetRuleContext<CreateContextChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextContextNestedContext[] contextContextNested() {
			return GetRuleContexts<ContextContextNestedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextContextNestedContext contextContextNested(int i) {
			return GetRuleContext<ContextContextNestedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public CreateContextDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createContextDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateContextDetail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateContextDetail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateContextDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContextDetailContext createContextDetail() {
		CreateContextDetailContext _localctx = new CreateContextDetailContext(Context, State);
		EnterRule(_localctx, 152, RULE_createContextDetail);
		int _la;
		try {
			State = 1333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COALESCE:
			case GROUP:
			case PARTITION:
			case START:
			case INITIATED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1322;
				createContextChoice();
				}
				break;
			case CONTEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1323;
				contextContextNested();
				State = 1324;
				Match(COMMA);
				State = 1325;
				contextContextNested();
				State = 1330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1326;
					Match(COMMA);
					State = 1327;
					contextContextNested();
					}
					}
					State = 1332;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextContextNestedContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(EsperEPL2GrammarParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextChoiceContext createContextChoice() {
			return GetRuleContext<CreateContextChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		public ContextContextNestedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextContextNested; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterContextContextNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitContextContextNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextContextNested(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextContextNestedContext contextContextNested() {
		ContextContextNestedContext _localctx = new ContextContextNestedContext(Context, State);
		EnterRule(_localctx, 154, RULE_contextContextNested);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335;
			Match(CONTEXT);
			State = 1336;
			_localctx.name = Match(IDENT);
			State = 1338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1337;
				Match(AS);
				}
			}

			State = 1340;
			createContextChoice();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContextChoiceContext : ParserRuleContext {
		public IToken i;
		public CreateContextRangePointContext r1;
		public CreateContextRangePointContext r2;
		public IToken g;
		public IToken p;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(EsperEPL2GrammarParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATCHAR() { return GetToken(EsperEPL2GrammarParser.ATCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextRangePointContext[] createContextRangePoint() {
			return GetRuleContexts<CreateContextRangePointContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextRangePointContext createContextRangePoint(int i) {
			return GetRuleContext<CreateContextRangePointContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(EsperEPL2GrammarParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIATED() { return GetToken(EsperEPL2GrammarParser.INITIATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(EsperEPL2GrammarParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(EsperEPL2GrammarParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextDistinctContext createContextDistinct() {
			return GetRuleContext<CreateContextDistinctContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_EXPR() { return GetToken(EsperEPL2GrammarParser.AND_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(EsperEPL2GrammarParser.TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(EsperEPL2GrammarParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextPartitionItemContext[] createContextPartitionItem() {
			return GetRuleContexts<CreateContextPartitionItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextPartitionItemContext createContextPartitionItem(int i) {
			return GetRuleContext<CreateContextPartitionItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextPartitionInitContext createContextPartitionInit() {
			return GetRuleContext<CreateContextPartitionInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextPartitionTermContext createContextPartitionTerm() {
			return GetRuleContext<CreateContextPartitionTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextGroupItemContext[] createContextGroupItem() {
			return GetRuleContexts<CreateContextGroupItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextGroupItemContext createContextGroupItem(int i) {
			return GetRuleContext<CreateContextGroupItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(EsperEPL2GrammarParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventFilterExpressionContext eventFilterExpression() {
			return GetRuleContext<EventFilterExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(EsperEPL2GrammarParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextCoalesceItemContext[] createContextCoalesceItem() {
			return GetRuleContexts<CreateContextCoalesceItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextCoalesceItemContext createContextCoalesceItem(int i) {
			return GetRuleContext<CreateContextCoalesceItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public CreateContextChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createContextChoice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateContextChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateContextChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateContextChoice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContextChoiceContext createContextChoice() {
		CreateContextChoiceContext _localctx = new CreateContextChoiceContext(Context, State);
		EnterRule(_localctx, 156, RULE_createContextChoice);
		int _la;
		try {
			int _alt;
			State = 1418;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1342;
				Match(START);
				State = 1346;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATCHAR:
					{
					State = 1343;
					Match(ATCHAR);
					State = 1344;
					_localctx.i = Match(IDENT);
					}
					break;
				case EVENTS:
				case PATTERN:
				case AFTER:
				case LPAREN:
				case TICKED_STRING_LITERAL:
				case IDENT:
					{
					State = 1345;
					_localctx.r1 = createContextRangePoint();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==END) {
					{
					State = 1348;
					Match(END);
					State = 1349;
					_localctx.r2 = createContextRangePoint();
					}
				}

				}
				break;
			case INITIATED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1352;
				Match(INITIATED);
				State = 1354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BY) {
					{
					State = 1353;
					Match(BY);
					}
				}

				State = 1357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT) {
					{
					State = 1356;
					createContextDistinct();
					}
				}

				State = 1362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ATCHAR) {
					{
					State = 1359;
					Match(ATCHAR);
					State = 1360;
					_localctx.i = Match(IDENT);
					State = 1361;
					Match(AND_EXPR);
					}
				}

				State = 1364;
				_localctx.r1 = createContextRangePoint();
				State = 1370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TERMINATED) {
					{
					State = 1365;
					Match(TERMINATED);
					State = 1367;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BY) {
						{
						State = 1366;
						Match(BY);
						}
					}

					State = 1369;
					_localctx.r2 = createContextRangePoint();
					}
				}

				}
				break;
			case PARTITION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1372;
				Match(PARTITION);
				State = 1374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BY) {
					{
					State = 1373;
					Match(BY);
					}
				}

				State = 1376;
				createContextPartitionItem();
				State = 1381;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1377;
						Match(COMMA);
						State = 1378;
						createContextPartitionItem();
						}
						} 
					}
					State = 1383;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
				}
				State = 1385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INITIATED) {
					{
					State = 1384;
					createContextPartitionInit();
					}
				}

				State = 1388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TERMINATED) {
					{
					State = 1387;
					createContextPartitionTerm();
					}
				}

				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1390;
				createContextGroupItem();
				State = 1395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1391;
					Match(COMMA);
					State = 1392;
					createContextGroupItem();
					}
					}
					State = 1397;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1398;
				Match(FROM);
				State = 1399;
				eventFilterExpression();
				}
				break;
			case COALESCE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1401;
				Match(COALESCE);
				State = 1403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BY) {
					{
					State = 1402;
					Match(BY);
					}
				}

				State = 1405;
				createContextCoalesceItem();
				State = 1410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1406;
					Match(COMMA);
					State = 1407;
					createContextCoalesceItem();
					}
					}
					State = 1412;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1413;
				_localctx.g = Match(IDENT);
				State = 1414;
				number();
				State = 1416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENT) {
					{
					State = 1415;
					_localctx.p = Match(IDENT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContextDistinctContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EsperEPL2GrammarParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public CreateContextDistinctContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createContextDistinct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateContextDistinct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateContextDistinct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateContextDistinct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContextDistinctContext createContextDistinct() {
		CreateContextDistinctContext _localctx = new CreateContextDistinctContext(Context, State);
		EnterRule(_localctx, 158, RULE_createContextDistinct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1420;
			Match(DISTINCT);
			State = 1421;
			Match(LPAREN);
			State = 1423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
				{
				State = 1422;
				expressionList();
				}
			}

			State = 1425;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContextRangePointContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextFilterContext createContextFilter() {
			return GetRuleContext<CreateContextFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternInclusionExpressionContext patternInclusionExpression() {
			return GetRuleContext<PatternInclusionExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATCHAR() { return GetToken(EsperEPL2GrammarParser.ATCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext keywordAllowedIdent() {
			return GetRuleContext<KeywordAllowedIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CrontabLimitParameterSetListContext crontabLimitParameterSetList() {
			return GetRuleContext<CrontabLimitParameterSetListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(EsperEPL2GrammarParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimePeriodContext timePeriod() {
			return GetRuleContext<TimePeriodContext>(0);
		}
		public CreateContextRangePointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createContextRangePoint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateContextRangePoint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateContextRangePoint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateContextRangePoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContextRangePointContext createContextRangePoint() {
		CreateContextRangePointContext _localctx = new CreateContextRangePointContext(Context, State);
		EnterRule(_localctx, 160, RULE_createContextRangePoint);
		int _la;
		try {
			State = 1442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENTS:
			case TICKED_STRING_LITERAL:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1427;
				createContextFilter();
				}
				break;
			case PATTERN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1428;
				patternInclusionExpression();
				State = 1431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ATCHAR) {
					{
					State = 1429;
					Match(ATCHAR);
					State = 1430;
					_localctx.i = Match(IDENT);
					}
				}

				State = 1437;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
				case 1:
					{
					State = 1434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 1433;
						Match(AS);
						}
					}

					State = 1436;
					keywordAllowedIdent();
					}
					break;
				}
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1439;
				crontabLimitParameterSetList();
				}
				break;
			case AFTER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1440;
				Match(AFTER);
				State = 1441;
				timePeriod();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContextFilterContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public EventFilterExpressionContext eventFilterExpression() {
			return GetRuleContext<EventFilterExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		public CreateContextFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createContextFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateContextFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateContextFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateContextFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContextFilterContext createContextFilter() {
		CreateContextFilterContext _localctx = new CreateContextFilterContext(Context, State);
		EnterRule(_localctx, 162, RULE_createContextFilter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1444;
			eventFilterExpression();
			State = 1449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==IDENT) {
				{
				State = 1446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1445;
					Match(AS);
					}
				}

				State = 1448;
				_localctx.i = Match(IDENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContextPartitionItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext[] chainable() {
			return GetRuleContexts<ChainableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext chainable(int i) {
			return GetRuleContext<ChainableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(EsperEPL2GrammarParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventFilterExpressionContext eventFilterExpression() {
			return GetRuleContext<EventFilterExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext keywordAllowedIdent() {
			return GetRuleContext<KeywordAllowedIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND_EXPR() { return GetTokens(EsperEPL2GrammarParser.AND_EXPR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_EXPR(int i) {
			return GetToken(EsperEPL2GrammarParser.AND_EXPR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		public CreateContextPartitionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createContextPartitionItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateContextPartitionItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateContextPartitionItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateContextPartitionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContextPartitionItemContext createContextPartitionItem() {
		CreateContextPartitionItemContext _localctx = new CreateContextPartitionItemContext(Context, State);
		EnterRule(_localctx, 164, RULE_createContextPartitionItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1451;
			chainable();
			State = 1456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND_EXPR || _la==COMMA) {
				{
				{
				State = 1452;
				_la = TokenStream.LA(1);
				if ( !(_la==AND_EXPR || _la==COMMA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1453;
				chainable();
				}
				}
				State = 1458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1459;
			Match(FROM);
			State = 1460;
			eventFilterExpression();
			State = 1465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 1462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1461;
					Match(AS);
					}
				}

				State = 1464;
				keywordAllowedIdent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContextCoalesceItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext chainable() {
			return GetRuleContext<ChainableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(EsperEPL2GrammarParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventFilterExpressionContext eventFilterExpression() {
			return GetRuleContext<EventFilterExpressionContext>(0);
		}
		public CreateContextCoalesceItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createContextCoalesceItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateContextCoalesceItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateContextCoalesceItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateContextCoalesceItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContextCoalesceItemContext createContextCoalesceItem() {
		CreateContextCoalesceItemContext _localctx = new CreateContextCoalesceItemContext(Context, State);
		EnterRule(_localctx, 166, RULE_createContextCoalesceItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1467;
			chainable();
			State = 1468;
			Match(FROM);
			State = 1469;
			eventFilterExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContextGroupItemContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(EsperEPL2GrammarParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(EsperEPL2GrammarParser.BY, 0); }
		public CreateContextGroupItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createContextGroupItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateContextGroupItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateContextGroupItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateContextGroupItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContextGroupItemContext createContextGroupItem() {
		CreateContextGroupItemContext _localctx = new CreateContextGroupItemContext(Context, State);
		EnterRule(_localctx, 168, RULE_createContextGroupItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1471;
			Match(GROUP);
			State = 1473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 1472;
				Match(BY);
				}
			}

			State = 1475;
			expression();
			State = 1476;
			Match(AS);
			State = 1477;
			_localctx.i = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContextPartitionInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIATED() { return GetToken(EsperEPL2GrammarParser.INITIATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextFilterContext[] createContextFilter() {
			return GetRuleContexts<CreateContextFilterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextFilterContext createContextFilter(int i) {
			return GetRuleContext<CreateContextFilterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(EsperEPL2GrammarParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public CreateContextPartitionInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createContextPartitionInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateContextPartitionInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateContextPartitionInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateContextPartitionInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContextPartitionInitContext createContextPartitionInit() {
		CreateContextPartitionInitContext _localctx = new CreateContextPartitionInitContext(Context, State);
		EnterRule(_localctx, 170, RULE_createContextPartitionInit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1479;
			Match(INITIATED);
			State = 1481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 1480;
				Match(BY);
				}
			}

			State = 1483;
			createContextFilter();
			State = 1488;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1484;
					Match(COMMA);
					State = 1485;
					createContextFilter();
					}
					} 
				}
				State = 1490;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContextPartitionTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(EsperEPL2GrammarParser.TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateContextRangePointContext createContextRangePoint() {
			return GetRuleContext<CreateContextRangePointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(EsperEPL2GrammarParser.BY, 0); }
		public CreateContextPartitionTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createContextPartitionTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateContextPartitionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateContextPartitionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateContextPartitionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContextPartitionTermContext createContextPartitionTerm() {
		CreateContextPartitionTermContext _localctx = new CreateContextPartitionTermContext(Context, State);
		EnterRule(_localctx, 172, RULE_createContextPartitionTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1491;
			Match(TERMINATED);
			State = 1493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 1492;
				Match(BY);
				}
			}

			State = 1495;
			createContextRangePoint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSchemaQualContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public CreateSchemaQualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSchemaQual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCreateSchemaQual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCreateSchemaQual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSchemaQual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateSchemaQualContext createSchemaQual() {
		CreateSchemaQualContext _localctx = new CreateSchemaQualContext(Context, State);
		EnterRule(_localctx, 174, RULE_createSchemaQual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497;
			_localctx.i = Match(IDENT);
			State = 1498;
			columnList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariantListElementContext[] variantListElement() {
			return GetRuleContexts<VariantListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariantListElementContext variantListElement(int i) {
			return GetRuleContext<VariantListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public VariantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterVariantList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitVariantList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantListContext variantList() {
		VariantListContext _localctx = new VariantListContext(Context, State);
		EnterRule(_localctx, 176, RULE_variantList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1500;
			variantListElement();
			State = 1505;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1501;
					Match(COMMA);
					State = 1502;
					variantListElement();
					}
					} 
				}
				State = 1507;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(EsperEPL2GrammarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierWithDimensionsContext classIdentifierWithDimensions() {
			return GetRuleContext<ClassIdentifierWithDimensionsContext>(0);
		}
		public VariantListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterVariantListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitVariantListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantListElementContext variantListElement() {
		VariantListElementContext _localctx = new VariantListElementContext(Context, State);
		EnterRule(_localctx, 178, RULE_variantListElement);
		try {
			State = 1510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1508;
				Match(STAR);
				}
				break;
			case EVENTS:
			case TICKED_STRING_LITERAL:
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1509;
				classIdentifierWithDimensions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntoTableExprContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(EsperEPL2GrammarParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public IntoTableExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intoTableExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterIntoTableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitIntoTableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntoTableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntoTableExprContext intoTableExpr() {
		IntoTableExprContext _localctx = new IntoTableExprContext(Context, State);
		EnterRule(_localctx, 180, RULE_intoTableExpr);
		 paraphrases.Push("into-table clause"); 
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512;
			Match(TABLE);
			State = 1513;
			_localctx.i = Match(IDENT);
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertIntoExprContext : ParserRuleContext {
		public IToken i;
		public IToken r;
		public IToken ir;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(EsperEPL2GrammarParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InsertIntoEventPrecedenceContext insertIntoEventPrecedence() {
			return GetRuleContext<InsertIntoEventPrecedenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISTREAM() { return GetToken(EsperEPL2GrammarParser.ISTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSTREAM() { return GetToken(EsperEPL2GrammarParser.RSTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IRSTREAM() { return GetToken(EsperEPL2GrammarParser.IRSTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnListContext columnList() {
			return GetRuleContext<ColumnListContext>(0);
		}
		public InsertIntoExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertIntoExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterInsertIntoExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitInsertIntoExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertIntoExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertIntoExprContext insertIntoExpr() {
		InsertIntoExprContext _localctx = new InsertIntoExprContext(Context, State);
		EnterRule(_localctx, 182, RULE_insertIntoExpr);
		 paraphrases.Push("insert-into clause"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1518;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ISTREAM:
				{
				State = 1515;
				_localctx.i = Match(ISTREAM);
				}
				break;
			case RSTREAM:
				{
				State = 1516;
				_localctx.r = Match(RSTREAM);
				}
				break;
			case IRSTREAM:
				{
				State = 1517;
				_localctx.ir = Match(IRSTREAM);
				}
				break;
			case INTO:
				break;
			default:
				break;
			}
			State = 1520;
			Match(INTO);
			State = 1521;
			classIdentifier();
			State = 1527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1522;
				Match(LPAREN);
				State = 1524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENT) {
					{
					State = 1523;
					columnList();
					}
				}

				State = 1526;
				Match(RPAREN);
				}
			}

			State = 1530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVENTPRECEDENCE) {
				{
				State = 1529;
				insertIntoEventPrecedence();
				}
			}

			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertIntoEventPrecedenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTPRECEDENCE() { return GetToken(EsperEPL2GrammarParser.EVENTPRECEDENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public InsertIntoEventPrecedenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertIntoEventPrecedence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterInsertIntoEventPrecedence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitInsertIntoEventPrecedence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertIntoEventPrecedence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertIntoEventPrecedenceContext insertIntoEventPrecedence() {
		InsertIntoEventPrecedenceContext _localctx = new InsertIntoEventPrecedenceContext(Context, State);
		EnterRule(_localctx, 184, RULE_insertIntoEventPrecedence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1532;
			Match(EVENTPRECEDENCE);
			State = 1533;
			Match(LPAREN);
			State = 1534;
			expression();
			State = 1535;
			Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterColumnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitColumnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnListContext columnList() {
		ColumnListContext _localctx = new ColumnListContext(Context, State);
		EnterRule(_localctx, 186, RULE_columnList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1537;
			Match(IDENT);
			State = 1542;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1538;
					Match(COMMA);
					State = 1539;
					Match(IDENT);
					}
					} 
				}
				State = 1544;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnListKeywordAllowedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext[] keywordAllowedIdent() {
			return GetRuleContexts<KeywordAllowedIdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext keywordAllowedIdent(int i) {
			return GetRuleContext<KeywordAllowedIdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public ColumnListKeywordAllowedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnListKeywordAllowed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterColumnListKeywordAllowed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitColumnListKeywordAllowed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnListKeywordAllowed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnListKeywordAllowedContext columnListKeywordAllowed() {
		ColumnListKeywordAllowedContext _localctx = new ColumnListKeywordAllowedContext(Context, State);
		EnterRule(_localctx, 188, RULE_columnListKeywordAllowed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1545;
			keywordAllowedIdent();
			State = 1550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1546;
				Match(COMMA);
				State = 1547;
				keywordAllowedIdent();
				}
				}
				State = 1552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StreamExpressionContext streamExpression() {
			return GetRuleContext<StreamExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegularJoinContext regularJoin() {
			return GetRuleContext<RegularJoinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterJoinListContext outerJoinList() {
			return GetRuleContext<OuterJoinListContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 190, RULE_fromClause);
		 paraphrases.Push("from clause"); 
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1553;
			streamExpression();
			State = 1556;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
			case WHERE:
			case GROUP:
			case HAVING:
			case OUTPUT:
			case ORDER:
			case ROW_LIMIT_EXPR:
			case MATCH_RECOGNIZE:
			case FOR:
			case RPAREN:
			case COMMA:
				{
				State = 1554;
				regularJoin();
				}
				break;
			case INNER:
			case JOIN:
			case LEFT:
			case RIGHT:
			case FULL:
				{
				State = 1555;
				outerJoinList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegularJoinContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreamExpressionContext[] streamExpression() {
			return GetRuleContexts<StreamExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreamExpressionContext streamExpression(int i) {
			return GetRuleContext<StreamExpressionContext>(i);
		}
		public RegularJoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regularJoin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterRegularJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitRegularJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegularJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegularJoinContext regularJoin() {
		RegularJoinContext _localctx = new RegularJoinContext(Context, State);
		EnterRule(_localctx, 192, RULE_regularJoin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1558;
				Match(COMMA);
				State = 1559;
				streamExpression();
				}
				}
				State = 1564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OuterJoinListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OuterJoinContext[] outerJoin() {
			return GetRuleContexts<OuterJoinContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterJoinContext outerJoin(int i) {
			return GetRuleContext<OuterJoinContext>(i);
		}
		public OuterJoinListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outerJoinList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOuterJoinList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOuterJoinList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuterJoinList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OuterJoinListContext outerJoinList() {
		OuterJoinListContext _localctx = new OuterJoinListContext(Context, State);
		EnterRule(_localctx, 194, RULE_outerJoinList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565;
			outerJoin();
			State = 1569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 133143986176L) != 0)) {
				{
				{
				State = 1566;
				outerJoin();
				}
				}
				State = 1571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OuterJoinContext : ParserRuleContext {
		public IToken tl;
		public IToken tr;
		public IToken tf;
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(EsperEPL2GrammarParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StreamExpressionContext streamExpression() {
			return GetRuleContext<StreamExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterJoinIdentContext outerJoinIdent() {
			return GetRuleContext<OuterJoinIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(EsperEPL2GrammarParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(EsperEPL2GrammarParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(EsperEPL2GrammarParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(EsperEPL2GrammarParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(EsperEPL2GrammarParser.FULL, 0); }
		public OuterJoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outerJoin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOuterJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOuterJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuterJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OuterJoinContext outerJoin() {
		OuterJoinContext _localctx = new OuterJoinContext(Context, State);
		EnterRule(_localctx, 196, RULE_outerJoin);
		 paraphrases.Push("outer join"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JOIN:
			case LEFT:
			case RIGHT:
			case FULL:
				{
				State = 1578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 120259084288L) != 0)) {
					{
					State = 1575;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LEFT:
						{
						State = 1572;
						_localctx.tl = Match(LEFT);
						}
						break;
					case RIGHT:
						{
						State = 1573;
						_localctx.tr = Match(RIGHT);
						}
						break;
					case FULL:
						{
						State = 1574;
						_localctx.tf = Match(FULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1577;
					Match(OUTER);
					}
				}

				}
				break;
			case INNER:
				{
				{
				State = 1580;
				_localctx.i = Match(INNER);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1583;
			Match(JOIN);
			State = 1584;
			streamExpression();
			State = 1586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 1585;
				outerJoinIdent();
				}
			}

			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OuterJoinIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(EsperEPL2GrammarParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OuterJoinIdentPairContext[] outerJoinIdentPair() {
			return GetRuleContexts<OuterJoinIdentPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterJoinIdentPairContext outerJoinIdentPair(int i) {
			return GetRuleContext<OuterJoinIdentPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND_EXPR() { return GetTokens(EsperEPL2GrammarParser.AND_EXPR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_EXPR(int i) {
			return GetToken(EsperEPL2GrammarParser.AND_EXPR, i);
		}
		public OuterJoinIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outerJoinIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOuterJoinIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOuterJoinIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuterJoinIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OuterJoinIdentContext outerJoinIdent() {
		OuterJoinIdentContext _localctx = new OuterJoinIdentContext(Context, State);
		EnterRule(_localctx, 198, RULE_outerJoinIdent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1588;
			Match(ON);
			State = 1589;
			outerJoinIdentPair();
			State = 1594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND_EXPR) {
				{
				{
				State = 1590;
				Match(AND_EXPR);
				State = 1591;
				outerJoinIdentPair();
				}
				}
				State = 1596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OuterJoinIdentPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext[] chainable() {
			return GetRuleContexts<ChainableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext chainable(int i) {
			return GetRuleContext<ChainableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(EsperEPL2GrammarParser.EQUALS, 0); }
		public OuterJoinIdentPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outerJoinIdentPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOuterJoinIdentPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOuterJoinIdentPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuterJoinIdentPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OuterJoinIdentPairContext outerJoinIdentPair() {
		OuterJoinIdentPairContext _localctx = new OuterJoinIdentPairContext(Context, State);
		EnterRule(_localctx, 200, RULE_outerJoinIdentPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597;
			chainable();
			State = 1598;
			Match(EQUALS);
			State = 1599;
			chainable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvalOrExpressionContext evalOrExpression() {
			return GetRuleContext<EvalOrExpressionContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 202, RULE_whereClause);
		 paraphrases.Push("where clause"); 
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1601;
			evalOrExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectClauseContext : ParserRuleContext {
		public IToken s;
		public IToken d;
		[System.Diagnostics.DebuggerNonUserCode] public SelectionListContext selectionList() {
			return GetRuleContext<SelectionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSTREAM() { return GetToken(EsperEPL2GrammarParser.RSTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISTREAM() { return GetToken(EsperEPL2GrammarParser.ISTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IRSTREAM() { return GetToken(EsperEPL2GrammarParser.IRSTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EsperEPL2GrammarParser.DISTINCT, 0); }
		public SelectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectClauseContext selectClause() {
		SelectClauseContext _localctx = new SelectClauseContext(Context, State);
		EnterRule(_localctx, 204, RULE_selectClause);
		 paraphrases.Push("select clause"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
			case 1:
				{
				State = 1603;
				_localctx.s = Match(RSTREAM);
				}
				break;
			case 2:
				{
				State = 1604;
				_localctx.s = Match(ISTREAM);
				}
				break;
			case 3:
				{
				State = 1605;
				_localctx.s = Match(IRSTREAM);
				}
				break;
			}
			State = 1609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISTINCT) {
				{
				State = 1608;
				_localctx.d = Match(DISTINCT);
				}
			}

			State = 1611;
			selectionList();
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectionListElementContext[] selectionListElement() {
			return GetRuleContexts<SelectionListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionListElementContext selectionListElement(int i) {
			return GetRuleContext<SelectionListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public SelectionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSelectionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSelectionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionListContext selectionList() {
		SelectionListContext _localctx = new SelectionListContext(Context, State);
		EnterRule(_localctx, 206, RULE_selectionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1613;
			selectionListElement();
			State = 1618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1614;
				Match(COMMA);
				State = 1615;
				selectionListElement();
				}
				}
				State = 1620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionListElementContext : ParserRuleContext {
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(EsperEPL2GrammarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StreamSelectorContext streamSelector() {
			return GetRuleContext<StreamSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionListElementExprContext selectionListElementExpr() {
			return GetRuleContext<SelectionListElementExprContext>(0);
		}
		public SelectionListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSelectionListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSelectionListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionListElementContext selectionListElement() {
		SelectionListElementContext _localctx = new SelectionListElementContext(Context, State);
		EnterRule(_localctx, 208, RULE_selectionListElement);
		try {
			State = 1624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1621;
				_localctx.s = Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1622;
				streamSelector();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1623;
				selectionListElementExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionListElementExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionListElementAnnoContext selectionListElementAnno() {
			return GetRuleContext<SelectionListElementAnnoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext keywordAllowedIdent() {
			return GetRuleContext<KeywordAllowedIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		public SelectionListElementExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionListElementExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSelectionListElementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSelectionListElementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionListElementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionListElementExprContext selectionListElementExpr() {
		SelectionListElementExprContext _localctx = new SelectionListElementExprContext(Context, State);
		EnterRule(_localctx, 210, RULE_selectionListElementExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626;
			expression();
			State = 1628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATCHAR) {
				{
				State = 1627;
				selectionListElementAnno();
				}
			}

			State = 1634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
			case 1:
				{
				State = 1631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1630;
					Match(AS);
					}
				}

				State = 1633;
				keywordAllowedIdent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionListElementAnnoContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATCHAR() { return GetToken(EsperEPL2GrammarParser.ATCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public SelectionListElementAnnoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionListElementAnno; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSelectionListElementAnno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSelectionListElementAnno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionListElementAnno(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionListElementAnnoContext selectionListElementAnno() {
		SelectionListElementAnnoContext _localctx = new SelectionListElementAnnoContext(Context, State);
		EnterRule(_localctx, 212, RULE_selectionListElementAnno);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1636;
			Match(ATCHAR);
			State = 1637;
			_localctx.i = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreamSelectorContext : ParserRuleContext {
		public IToken s;
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(EsperEPL2GrammarParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(EsperEPL2GrammarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		public StreamSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streamSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterStreamSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitStreamSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreamSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreamSelectorContext streamSelector() {
		StreamSelectorContext _localctx = new StreamSelectorContext(Context, State);
		EnterRule(_localctx, 214, RULE_streamSelector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1639;
			_localctx.s = Match(IDENT);
			State = 1640;
			Match(DOT);
			State = 1641;
			Match(STAR);
			State = 1644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1642;
				Match(AS);
				State = 1643;
				_localctx.i = Match(IDENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreamExpressionContext : ParserRuleContext {
		public IToken u;
		public IToken ru;
		public IToken ri;
		[System.Diagnostics.DebuggerNonUserCode] public EventFilterExpressionContext eventFilterExpression() {
			return GetRuleContext<EventFilterExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternInclusionExpressionContext patternInclusionExpression() {
			return GetRuleContext<PatternInclusionExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatabaseJoinExpressionContext databaseJoinExpression() {
			return GetRuleContext<DatabaseJoinExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodJoinExpressionContext methodJoinExpression() {
			return GetRuleContext<MethodJoinExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewExpressionsContext viewExpressions() {
			return GetRuleContext<ViewExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentOrTickedContext identOrTicked() {
			return GetRuleContext<IdentOrTickedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIDIRECTIONAL() { return GetToken(EsperEPL2GrammarParser.UNIDIRECTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAINUNION() { return GetToken(EsperEPL2GrammarParser.RETAINUNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAININTERSECTION() { return GetToken(EsperEPL2GrammarParser.RETAININTERSECTION, 0); }
		public StreamExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streamExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterStreamExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitStreamExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreamExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreamExpressionContext streamExpression() {
		StreamExpressionContext _localctx = new StreamExpressionContext(Context, State);
		EnterRule(_localctx, 216, RULE_streamExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				{
				State = 1646;
				eventFilterExpression();
				}
				break;
			case 2:
				{
				State = 1647;
				patternInclusionExpression();
				}
				break;
			case 3:
				{
				State = 1648;
				databaseJoinExpression();
				}
				break;
			case 4:
				{
				State = 1649;
				methodJoinExpression();
				}
				break;
			}
			State = 1653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT || _la==HASHCHAR) {
				{
				State = 1652;
				viewExpressions();
				}
			}

			State = 1658;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 1655;
				Match(AS);
				State = 1656;
				identOrTicked();
				}
				break;
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 1657;
				identOrTicked();
				}
				break;
			case Eof:
			case WHERE:
			case INNER:
			case JOIN:
			case LEFT:
			case RIGHT:
			case FULL:
			case ON:
			case GROUP:
			case HAVING:
			case OUTPUT:
			case ORDER:
			case UNIDIRECTIONAL:
			case RETAINUNION:
			case RETAININTERSECTION:
			case ROW_LIMIT_EXPR:
			case MATCH_RECOGNIZE:
			case FOR:
			case RPAREN:
			case COMMA:
				break;
			default:
				break;
			}
			State = 1661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIDIRECTIONAL) {
				{
				State = 1660;
				_localctx.u = Match(UNIDIRECTIONAL);
				}
			}

			State = 1665;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETAINUNION:
				{
				State = 1663;
				_localctx.ru = Match(RETAINUNION);
				}
				break;
			case RETAININTERSECTION:
				{
				State = 1664;
				_localctx.ri = Match(RETAININTERSECTION);
				}
				break;
			case Eof:
			case WHERE:
			case INNER:
			case JOIN:
			case LEFT:
			case RIGHT:
			case FULL:
			case ON:
			case GROUP:
			case HAVING:
			case OUTPUT:
			case ORDER:
			case ROW_LIMIT_EXPR:
			case MATCH_RECOGNIZE:
			case FOR:
			case RPAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForExprContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(EsperEPL2GrammarParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterForExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitForExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForExprContext forExpr() {
		ForExprContext _localctx = new ForExprContext(Context, State);
		EnterRule(_localctx, 218, RULE_forExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1667;
			Match(FOR);
			State = 1668;
			_localctx.i = Match(IDENT);
			State = 1674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1669;
				Match(LPAREN);
				State = 1671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
					{
					State = 1670;
					expressionList();
					}
				}

				State = 1673;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternInclusionExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(EsperEPL2GrammarParser.PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(EsperEPL2GrammarParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternExpressionContext patternExpression() {
			return GetRuleContext<PatternExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(EsperEPL2GrammarParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationEnumContext[] annotationEnum() {
			return GetRuleContexts<AnnotationEnumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationEnumContext annotationEnum(int i) {
			return GetRuleContext<AnnotationEnumContext>(i);
		}
		public PatternInclusionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternInclusionExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterPatternInclusionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitPatternInclusionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternInclusionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternInclusionExpressionContext patternInclusionExpression() {
		PatternInclusionExpressionContext _localctx = new PatternInclusionExpressionContext(Context, State);
		EnterRule(_localctx, 220, RULE_patternInclusionExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676;
			Match(PATTERN);
			State = 1680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ATCHAR) {
				{
				{
				State = 1677;
				annotationEnum();
				}
				}
				State = 1682;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1683;
			Match(LBRACK);
			State = 1684;
			patternExpression();
			State = 1685;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseJoinExpressionContext : ParserRuleContext {
		public IToken i;
		public IToken s;
		public IToken s2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(EsperEPL2GrammarParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(EsperEPL2GrammarParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(EsperEPL2GrammarParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(EsperEPL2GrammarParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(EsperEPL2GrammarParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTED_STRING_LITERAL() { return GetTokens(EsperEPL2GrammarParser.QUOTED_STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_STRING_LITERAL(int i) {
			return GetToken(EsperEPL2GrammarParser.QUOTED_STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METADATASQL() { return GetToken(EsperEPL2GrammarParser.METADATASQL, 0); }
		public DatabaseJoinExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseJoinExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterDatabaseJoinExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitDatabaseJoinExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseJoinExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseJoinExpressionContext databaseJoinExpression() {
		DatabaseJoinExpressionContext _localctx = new DatabaseJoinExpressionContext(Context, State);
		EnterRule(_localctx, 222, RULE_databaseJoinExpression);
		 paraphrases.Push("relational data join"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687;
			Match(SQL);
			State = 1688;
			Match(COLON);
			State = 1689;
			_localctx.i = Match(IDENT);
			State = 1690;
			Match(LBRACK);
			State = 1693;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				{
				State = 1691;
				_localctx.s = Match(STRING_LITERAL);
				}
				break;
			case QUOTED_STRING_LITERAL:
				{
				State = 1692;
				_localctx.s = Match(QUOTED_STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==METADATASQL) {
				{
				State = 1695;
				Match(METADATASQL);
				State = 1698;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
					{
					State = 1696;
					_localctx.s2 = Match(STRING_LITERAL);
					}
					break;
				case QUOTED_STRING_LITERAL:
					{
					State = 1697;
					_localctx.s2 = Match(QUOTED_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 1702;
			Match(RBRACK);
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodJoinExpressionContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeExpressionAnnotationContext typeExpressionAnnotation() {
			return GetRuleContext<TypeExpressionAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public MethodJoinExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodJoinExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMethodJoinExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMethodJoinExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodJoinExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodJoinExpressionContext methodJoinExpression() {
		MethodJoinExpressionContext _localctx = new MethodJoinExpressionContext(Context, State);
		EnterRule(_localctx, 224, RULE_methodJoinExpression);
		 paraphrases.Push("method invocation join"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1704;
			_localctx.i = Match(IDENT);
			State = 1705;
			Match(COLON);
			State = 1706;
			classIdentifier();
			State = 1712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1707;
				Match(LPAREN);
				State = 1709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
					{
					State = 1708;
					expressionList();
					}
				}

				State = 1711;
				Match(RPAREN);
				}
			}

			State = 1715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATCHAR) {
				{
				State = 1714;
				typeExpressionAnnotation();
				}
			}

			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(EsperEPL2GrammarParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(EsperEPL2GrammarParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewExpressionWNamespaceContext[] viewExpressionWNamespace() {
			return GetRuleContexts<ViewExpressionWNamespaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewExpressionWNamespaceContext viewExpressionWNamespace(int i) {
			return GetRuleContext<ViewExpressionWNamespaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HASHCHAR() { return GetTokens(EsperEPL2GrammarParser.HASHCHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHCHAR(int i) {
			return GetToken(EsperEPL2GrammarParser.HASHCHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewExpressionOptNamespaceContext[] viewExpressionOptNamespace() {
			return GetRuleContexts<ViewExpressionOptNamespaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewExpressionOptNamespaceContext viewExpressionOptNamespace(int i) {
			return GetRuleContext<ViewExpressionOptNamespaceContext>(i);
		}
		public ViewExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterViewExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitViewExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewExpressionsContext viewExpressions() {
		ViewExpressionsContext _localctx = new ViewExpressionsContext(Context, State);
		EnterRule(_localctx, 226, RULE_viewExpressions);
		 paraphrases.Push("view specifications"); 
		int _la;
		try {
			State = 1735;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1717;
				Match(DOT);
				State = 1718;
				viewExpressionWNamespace();
				State = 1723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 1719;
					Match(DOT);
					State = 1720;
					viewExpressionWNamespace();
					}
					}
					State = 1725;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case HASHCHAR:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1726;
				Match(HASHCHAR);
				State = 1727;
				viewExpressionOptNamespace();
				State = 1732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==HASHCHAR) {
					{
					{
					State = 1728;
					Match(HASHCHAR);
					State = 1729;
					viewExpressionOptNamespace();
					}
					}
					State = 1734;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewExpressionWNamespaceContext : ParserRuleContext {
		public IToken ns;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewWParametersContext viewWParameters() {
			return GetRuleContext<ViewWParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public ViewExpressionWNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewExpressionWNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterViewExpressionWNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitViewExpressionWNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewExpressionWNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewExpressionWNamespaceContext viewExpressionWNamespace() {
		ViewExpressionWNamespaceContext _localctx = new ViewExpressionWNamespaceContext(Context, State);
		EnterRule(_localctx, 228, RULE_viewExpressionWNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1737;
			_localctx.ns = Match(IDENT);
			State = 1738;
			Match(COLON);
			State = 1739;
			viewWParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewExpressionOptNamespaceContext : ParserRuleContext {
		public IToken ns;
		[System.Diagnostics.DebuggerNonUserCode] public ViewWParametersContext viewWParameters() {
			return GetRuleContext<ViewWParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public ViewExpressionOptNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewExpressionOptNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterViewExpressionOptNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitViewExpressionOptNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewExpressionOptNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewExpressionOptNamespaceContext viewExpressionOptNamespace() {
		ViewExpressionOptNamespaceContext _localctx = new ViewExpressionOptNamespaceContext(Context, State);
		EnterRule(_localctx, 230, RULE_viewExpressionOptNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1743;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				{
				State = 1741;
				_localctx.ns = Match(IDENT);
				State = 1742;
				Match(COLON);
				}
				break;
			}
			State = 1745;
			viewWParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewWParametersContext : ParserRuleContext {
		public IToken i;
		public IToken m;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(EsperEPL2GrammarParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTimeListContext expressionWithTimeList() {
			return GetRuleContext<ExpressionWithTimeListContext>(0);
		}
		public ViewWParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewWParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterViewWParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitViewWParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewWParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewWParametersContext viewWParameters() {
		ViewWParametersContext _localctx = new ViewWParametersContext(Context, State);
		EnterRule(_localctx, 232, RULE_viewWParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1749;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 1747;
				_localctx.i = Match(IDENT);
				}
				break;
			case MERGE:
				{
				State = 1748;
				_localctx.m = Match(MERGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1756;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				{
				State = 1751;
				Match(LPAREN);
				State = 1753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 78384562369L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
					{
					State = 1752;
					expressionWithTimeList();
					}
				}

				State = 1755;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByListExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupByListChoiceContext[] groupByListChoice() {
			return GetRuleContexts<GroupByListChoiceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByListChoiceContext groupByListChoice(int i) {
			return GetRuleContext<GroupByListChoiceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public GroupByListExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByListExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGroupByListExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGroupByListExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByListExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByListExprContext groupByListExpr() {
		GroupByListExprContext _localctx = new GroupByListExprContext(Context, State);
		EnterRule(_localctx, 234, RULE_groupByListExpr);
		 paraphrases.Push("group-by clause"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758;
			groupByListChoice();
			State = 1763;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1759;
				Match(COMMA);
				State = 1760;
				groupByListChoice();
				}
				}
				State = 1765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByListChoiceContext : ParserRuleContext {
		public ExpressionContext e1;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByCubeOrRollupContext groupByCubeOrRollup() {
			return GetRuleContext<GroupByCubeOrRollupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByGroupingSetsContext groupByGroupingSets() {
			return GetRuleContext<GroupByGroupingSetsContext>(0);
		}
		public GroupByListChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByListChoice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGroupByListChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGroupByListChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByListChoice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByListChoiceContext groupByListChoice() {
		GroupByListChoiceContext _localctx = new GroupByListChoiceContext(Context, State);
		EnterRule(_localctx, 236, RULE_groupByListChoice);
		try {
			State = 1769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1766;
				_localctx.e1 = expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1767;
				groupByCubeOrRollup();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1768;
				groupByGroupingSets();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByCubeOrRollupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupByCombinableExprContext[] groupByCombinableExpr() {
			return GetRuleContexts<GroupByCombinableExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByCombinableExprContext groupByCombinableExpr(int i) {
			return GetRuleContext<GroupByCombinableExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(EsperEPL2GrammarParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(EsperEPL2GrammarParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public GroupByCubeOrRollupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByCubeOrRollup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGroupByCubeOrRollup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGroupByCubeOrRollup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByCubeOrRollup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByCubeOrRollupContext groupByCubeOrRollup() {
		GroupByCubeOrRollupContext _localctx = new GroupByCubeOrRollupContext(Context, State);
		EnterRule(_localctx, 238, RULE_groupByCubeOrRollup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1771;
			_la = TokenStream.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1772;
			Match(LPAREN);
			State = 1773;
			groupByCombinableExpr();
			State = 1778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1774;
				Match(COMMA);
				State = 1775;
				groupByCombinableExpr();
				}
				}
				State = 1780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1781;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByGroupingSetsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(EsperEPL2GrammarParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(EsperEPL2GrammarParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupBySetsChoiceContext[] groupBySetsChoice() {
			return GetRuleContexts<GroupBySetsChoiceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupBySetsChoiceContext groupBySetsChoice(int i) {
			return GetRuleContext<GroupBySetsChoiceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public GroupByGroupingSetsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByGroupingSets; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGroupByGroupingSets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGroupByGroupingSets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByGroupingSets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByGroupingSetsContext groupByGroupingSets() {
		GroupByGroupingSetsContext _localctx = new GroupByGroupingSetsContext(Context, State);
		EnterRule(_localctx, 240, RULE_groupByGroupingSets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1783;
			Match(GROUPING);
			State = 1784;
			Match(SETS);
			State = 1785;
			Match(LPAREN);
			State = 1786;
			groupBySetsChoice();
			State = 1791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1787;
				Match(COMMA);
				State = 1788;
				groupBySetsChoice();
				}
				}
				State = 1793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1794;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupBySetsChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupByCubeOrRollupContext groupByCubeOrRollup() {
			return GetRuleContext<GroupByCubeOrRollupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByCombinableExprContext groupByCombinableExpr() {
			return GetRuleContext<GroupByCombinableExprContext>(0);
		}
		public GroupBySetsChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupBySetsChoice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGroupBySetsChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGroupBySetsChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupBySetsChoice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupBySetsChoiceContext groupBySetsChoice() {
		GroupBySetsChoiceContext _localctx = new GroupBySetsChoiceContext(Context, State);
		EnterRule(_localctx, 242, RULE_groupBySetsChoice);
		try {
			State = 1798;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CUBE:
			case ROLLUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1796;
				groupByCubeOrRollup();
				}
				break;
			case WINDOW:
			case BETWEEN:
			case ESCAPE:
			case NOT_EXPR:
			case EVERY_EXPR:
			case WHERE:
			case SUM:
			case AVG:
			case MAX:
			case MIN:
			case COALESCE:
			case MEDIAN:
			case STDDEV:
			case AVEDEV:
			case COUNT:
			case CASE:
			case OUTER:
			case JOIN:
			case LEFT:
			case RIGHT:
			case FULL:
			case EVENTS:
			case FIRST:
			case LAST:
			case ISTREAM:
			case SCHEMA:
			case UNIDIRECTIONAL:
			case RETAINUNION:
			case RETAININTERSECTION:
			case PATTERN:
			case SQL:
			case METADATASQL:
			case PREVIOUS:
			case PREVIOUSTAIL:
			case PREVIOUSCOUNT:
			case PREVIOUSWINDOW:
			case PRIOR:
			case EXISTS:
			case WEEKDAY:
			case LW:
			case INSTANCEOF:
			case TYPEOF:
			case CAST:
			case CURRENT_TIMESTAMP:
			case SNAPSHOT:
			case SET:
			case VARIABLE:
			case TABLE:
			case UNTIL:
			case AT:
			case INDEX:
			case BOOLEAN_TRUE:
			case BOOLEAN_FALSE:
			case VALUE_NULL:
			case DEFINE:
			case PARTITION:
			case MATCHES:
			case AFTER:
			case FOR:
			case WHILE:
			case USING:
			case MERGE:
			case MATCHED:
			case NEWKW:
			case CONTEXT:
			case GROUPING:
			case GROUPING_ID:
			case QUESTION:
			case LPAREN:
			case LCURLY:
			case PLUS:
			case MINUS:
			case TICKED_STRING_LITERAL:
			case QUOTED_STRING_LITERAL:
			case STRING_LITERAL:
			case IDENT:
			case IntegerLiteral:
			case FloatingPointLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1797;
				groupByCombinableExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByCombinableExprContext : ParserRuleContext {
		public ExpressionContext e1;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public GroupByCombinableExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByCombinableExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGroupByCombinableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGroupByCombinableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByCombinableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByCombinableExprContext groupByCombinableExpr() {
		GroupByCombinableExprContext _localctx = new GroupByCombinableExprContext(Context, State);
		EnterRule(_localctx, 244, RULE_groupByCombinableExpr);
		int _la;
		try {
			State = 1813;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1800;
				_localctx.e1 = expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1801;
				Match(LPAREN);
				State = 1810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
					{
					State = 1802;
					expression();
					State = 1807;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1803;
						Match(COMMA);
						State = 1804;
						expression();
						}
						}
						State = 1809;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1812;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByListExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrderByListElementContext[] orderByListElement() {
			return GetRuleContexts<OrderByListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByListElementContext orderByListElement(int i) {
			return GetRuleContext<OrderByListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public OrderByListExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByListExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOrderByListExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOrderByListExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByListExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByListExprContext orderByListExpr() {
		OrderByListExprContext _localctx = new OrderByListExprContext(Context, State);
		EnterRule(_localctx, 246, RULE_orderByListExpr);
		 paraphrases.Push("order by clause"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1815;
			orderByListElement();
			State = 1820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1816;
				Match(COMMA);
				State = 1817;
				orderByListElement();
				}
				}
				State = 1822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByListElementContext : ParserRuleContext {
		public IToken a;
		public IToken d;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(EsperEPL2GrammarParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(EsperEPL2GrammarParser.DESC, 0); }
		public OrderByListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOrderByListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOrderByListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByListElementContext orderByListElement() {
		OrderByListElementContext _localctx = new OrderByListElementContext(Context, State);
		EnterRule(_localctx, 248, RULE_orderByListElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1823;
			expression();
			State = 1826;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASC:
				{
				State = 1824;
				_localctx.a = Match(ASC);
				}
				break;
			case DESC:
				{
				State = 1825;
				_localctx.d = Match(DESC);
				}
				break;
			case Eof:
			case INSERT:
			case ROW_LIMIT_EXPR:
			case FOR:
			case RPAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvalOrExpressionContext evalOrExpression() {
			return GetRuleContext<EvalOrExpressionContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 250, RULE_havingClause);
		 paraphrases.Push("having clause"); 
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828;
			evalOrExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputLimitContext : ParserRuleContext {
		public IToken k;
		public IToken ev;
		public IToken i;
		public IToken e;
		public IToken at;
		public IToken wh;
		public IToken t;
		[System.Diagnostics.DebuggerNonUserCode] public OutputLimitAfterContext outputLimitAfter() {
			return GetRuleContext<OutputLimitAfterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputLimitAndTermContext outputLimitAndTerm() {
			return GetRuleContext<OutputLimitAndTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EsperEPL2GrammarParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(EsperEPL2GrammarParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(EsperEPL2GrammarParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(EsperEPL2GrammarParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CrontabLimitParameterSetContext crontabLimitParameterSet() {
			return GetRuleContext<CrontabLimitParameterSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(EsperEPL2GrammarParser.TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_EXPR() { return GetToken(EsperEPL2GrammarParser.EVERY_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(EsperEPL2GrammarParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(EsperEPL2GrammarParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimePeriodContext timePeriod() {
			return GetRuleContext<TimePeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(EsperEPL2GrammarParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnSetExprContext onSetExpr() {
			return GetRuleContext<OnSetExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_EXPR() { return GetToken(EsperEPL2GrammarParser.AND_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(EsperEPL2GrammarParser.EVENTS, 0); }
		public OutputLimitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputLimit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOutputLimit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOutputLimit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputLimit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputLimitContext outputLimit() {
		OutputLimitContext _localctx = new OutputLimitContext(Context, State);
		EnterRule(_localctx, 252, RULE_outputLimit);
		 paraphrases.Push("output rate clause"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AFTER) {
				{
				State = 1830;
				outputLimitAfter();
				}
			}

			State = 1837;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 1833;
				_localctx.k = Match(ALL);
				}
				break;
			case FIRST:
				{
				State = 1834;
				_localctx.k = Match(FIRST);
				}
				break;
			case LAST:
				{
				State = 1835;
				_localctx.k = Match(LAST);
				}
				break;
			case SNAPSHOT:
				{
				State = 1836;
				_localctx.k = Match(SNAPSHOT);
				}
				break;
			case Eof:
			case AND_EXPR:
			case EVERY_EXPR:
			case WHEN:
			case ORDER:
			case AT:
			case ROW_LIMIT_EXPR:
			case FOR:
			case RPAREN:
				break;
			default:
				break;
			}
			State = 1867;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
			case 1:
				{
				{
				State = 1839;
				_localctx.ev = Match(EVERY_EXPR);
				State = 1846;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
				case 1:
					{
					State = 1840;
					timePeriod();
					}
					break;
				case 2:
					{
					State = 1843;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case IntegerLiteral:
					case FloatingPointLiteral:
						{
						State = 1841;
						number();
						}
						break;
					case IDENT:
						{
						State = 1842;
						_localctx.i = Match(IDENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					{
					State = 1845;
					_localctx.e = Match(EVENTS);
					}
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 1848;
				_localctx.at = Match(AT);
				State = 1849;
				crontabLimitParameterSet();
				}
				}
				break;
			case 3:
				{
				{
				State = 1850;
				_localctx.wh = Match(WHEN);
				State = 1851;
				expression();
				State = 1854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THEN) {
					{
					State = 1852;
					Match(THEN);
					State = 1853;
					onSetExpr();
					}
				}

				}
				}
				break;
			case 4:
				{
				{
				State = 1856;
				_localctx.t = Match(WHEN);
				State = 1857;
				Match(TERMINATED);
				State = 1860;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
				case 1:
					{
					State = 1858;
					Match(AND_EXPR);
					State = 1859;
					expression();
					}
					break;
				}
				State = 1864;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THEN) {
					{
					State = 1862;
					Match(THEN);
					State = 1863;
					onSetExpr();
					}
				}

				}
				}
				break;
			case 5:
				{
				}
				break;
			}
			State = 1870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND_EXPR) {
				{
				State = 1869;
				outputLimitAndTerm();
				}
			}

			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputLimitAndTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND_EXPR() { return GetTokens(EsperEPL2GrammarParser.AND_EXPR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_EXPR(int i) {
			return GetToken(EsperEPL2GrammarParser.AND_EXPR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(EsperEPL2GrammarParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(EsperEPL2GrammarParser.TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(EsperEPL2GrammarParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnSetExprContext onSetExpr() {
			return GetRuleContext<OnSetExprContext>(0);
		}
		public OutputLimitAndTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputLimitAndTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOutputLimitAndTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOutputLimitAndTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputLimitAndTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputLimitAndTermContext outputLimitAndTerm() {
		OutputLimitAndTermContext _localctx = new OutputLimitAndTermContext(Context, State);
		EnterRule(_localctx, 254, RULE_outputLimitAndTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1872;
			Match(AND_EXPR);
			State = 1873;
			Match(WHEN);
			State = 1874;
			Match(TERMINATED);
			State = 1877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND_EXPR) {
				{
				State = 1875;
				Match(AND_EXPR);
				State = 1876;
				expression();
				}
			}

			State = 1881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 1879;
				Match(THEN);
				State = 1880;
				onSetExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputLimitAfterContext : ParserRuleContext {
		public IToken a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(EsperEPL2GrammarParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimePeriodContext timePeriod() {
			return GetRuleContext<TimePeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(EsperEPL2GrammarParser.EVENTS, 0); }
		public OutputLimitAfterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputLimitAfter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOutputLimitAfter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOutputLimitAfter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputLimitAfter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputLimitAfterContext outputLimitAfter() {
		OutputLimitAfterContext _localctx = new OutputLimitAfterContext(Context, State);
		EnterRule(_localctx, 256, RULE_outputLimitAfter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1883;
			_localctx.a = Match(AFTER);
			State = 1888;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				{
				State = 1884;
				timePeriod();
				}
				break;
			case 2:
				{
				State = 1885;
				number();
				State = 1886;
				Match(EVENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowLimitContext : ParserRuleContext {
		public NumberconstantContext n1;
		public IToken i1;
		public IToken c;
		public IToken o;
		public NumberconstantContext n2;
		public IToken i2;
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext[] numberconstant() {
			return GetRuleContexts<NumberconstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext numberconstant(int i) {
			return GetRuleContext<NumberconstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(EsperEPL2GrammarParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(EsperEPL2GrammarParser.OFFSET, 0); }
		public RowLimitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowLimit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterRowLimit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitRowLimit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowLimit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowLimitContext rowLimit() {
		RowLimitContext _localctx = new RowLimitContext(Context, State);
		EnterRule(_localctx, 258, RULE_rowLimit);
		 paraphrases.Push("row limit clause"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1892;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 1890;
				_localctx.n1 = numberconstant();
				}
				break;
			case IDENT:
				{
				State = 1891;
				_localctx.i1 = Match(IDENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFSET || _la==COMMA) {
				{
				State = 1896;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMA:
					{
					State = 1894;
					_localctx.c = Match(COMMA);
					}
					break;
				case OFFSET:
					{
					State = 1895;
					_localctx.o = Match(OFFSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1900;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
				case MINUS:
				case IntegerLiteral:
				case FloatingPointLiteral:
					{
					State = 1898;
					_localctx.n2 = numberconstant();
					}
					break;
				case IDENT:
					{
					State = 1899;
					_localctx.i2 = Match(IDENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrontabLimitParameterSetListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CrontabLimitParameterSetContext[] crontabLimitParameterSet() {
			return GetRuleContexts<CrontabLimitParameterSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrontabLimitParameterSetContext crontabLimitParameterSet(int i) {
			return GetRuleContext<CrontabLimitParameterSetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public CrontabLimitParameterSetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crontabLimitParameterSetList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCrontabLimitParameterSetList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCrontabLimitParameterSetList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrontabLimitParameterSetList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrontabLimitParameterSetListContext crontabLimitParameterSetList() {
		CrontabLimitParameterSetListContext _localctx = new CrontabLimitParameterSetListContext(Context, State);
		EnterRule(_localctx, 260, RULE_crontabLimitParameterSetList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1904;
			crontabLimitParameterSet();
			State = 1909;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,238,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1905;
					Match(COMMA);
					State = 1906;
					crontabLimitParameterSet();
					}
					} 
				}
				State = 1911;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,238,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrontabLimitParameterSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTimeListContext expressionWithTimeList() {
			return GetRuleContext<ExpressionWithTimeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public CrontabLimitParameterSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crontabLimitParameterSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCrontabLimitParameterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCrontabLimitParameterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrontabLimitParameterSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrontabLimitParameterSetContext crontabLimitParameterSet() {
		CrontabLimitParameterSetContext _localctx = new CrontabLimitParameterSetContext(Context, State);
		EnterRule(_localctx, 262, RULE_crontabLimitParameterSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1912;
			Match(LPAREN);
			State = 1913;
			expressionWithTimeList();
			State = 1914;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(EsperEPL2GrammarParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(EsperEPL2GrammarParser.THEN, 0); }
		public WhenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterWhenClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitWhenClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenClauseContext whenClause() {
		WhenClauseContext _localctx = new WhenClauseContext(Context, State);
		EnterRule(_localctx, 264, RULE_whenClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1916;
			Match(WHEN);
			State = 1917;
			expression();
			State = 1918;
			Match(THEN);
			State = 1919;
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(EsperEPL2GrammarParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterElseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitElseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseClauseContext elseClause() {
		ElseClauseContext _localctx = new ElseClauseContext(Context, State);
		EnterRule(_localctx, 266, RULE_elseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1921;
			Match(ELSE);
			State = 1922;
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_RECOGNIZE() { return GetToken(EsperEPL2GrammarParser.MATCH_RECOGNIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogMeasuresContext matchRecogMeasures() {
			return GetRuleContext<MatchRecogMeasuresContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternContext matchRecogPattern() {
			return GetRuleContext<MatchRecogPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPartitionByContext matchRecogPartitionBy() {
			return GetRuleContext<MatchRecogPartitionByContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogMatchesSelectionContext matchRecogMatchesSelection() {
			return GetRuleContext<MatchRecogMatchesSelectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogMatchesAfterSkipContext matchRecogMatchesAfterSkip() {
			return GetRuleContext<MatchRecogMatchesAfterSkipContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogMatchesIntervalContext matchRecogMatchesInterval() {
			return GetRuleContext<MatchRecogMatchesIntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogDefineContext matchRecogDefine() {
			return GetRuleContext<MatchRecogDefineContext>(0);
		}
		public MatchRecogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogContext matchRecog() {
		MatchRecogContext _localctx = new MatchRecogContext(Context, State);
		EnterRule(_localctx, 268, RULE_matchRecog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1924;
			Match(MATCH_RECOGNIZE);
			State = 1925;
			Match(LPAREN);
			State = 1927;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 1926;
				matchRecogPartitionBy();
				}
			}

			State = 1929;
			matchRecogMeasures();
			State = 1931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 1930;
				matchRecogMatchesSelection();
				}
			}

			State = 1934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AFTER) {
				{
				State = 1933;
				matchRecogMatchesAfterSkip();
				}
			}

			State = 1936;
			matchRecogPattern();
			State = 1938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 1937;
				matchRecogMatchesInterval();
				}
			}

			State = 1941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINE) {
				{
				State = 1940;
				matchRecogDefine();
				}
			}

			State = 1943;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogPartitionByContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(EsperEPL2GrammarParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(EsperEPL2GrammarParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public MatchRecogPartitionByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogPartitionBy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogPartitionBy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogPartitionBy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogPartitionBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogPartitionByContext matchRecogPartitionBy() {
		MatchRecogPartitionByContext _localctx = new MatchRecogPartitionByContext(Context, State);
		EnterRule(_localctx, 270, RULE_matchRecogPartitionBy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1945;
			Match(PARTITION);
			State = 1946;
			Match(BY);
			State = 1947;
			expression();
			State = 1952;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1948;
				Match(COMMA);
				State = 1949;
				expression();
				}
				}
				State = 1954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogMeasuresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEASURES() { return GetToken(EsperEPL2GrammarParser.MEASURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogMeasureItemContext[] matchRecogMeasureItem() {
			return GetRuleContexts<MatchRecogMeasureItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogMeasureItemContext matchRecogMeasureItem(int i) {
			return GetRuleContext<MatchRecogMeasureItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public MatchRecogMeasuresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogMeasures; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogMeasures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogMeasures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogMeasures(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogMeasuresContext matchRecogMeasures() {
		MatchRecogMeasuresContext _localctx = new MatchRecogMeasuresContext(Context, State);
		EnterRule(_localctx, 272, RULE_matchRecogMeasures);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1955;
			Match(MEASURES);
			State = 1956;
			matchRecogMeasureItem();
			State = 1961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1957;
				Match(COMMA);
				State = 1958;
				matchRecogMeasureItem();
				}
				}
				State = 1963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogMeasureItemContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public MatchRecogMeasureItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogMeasureItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogMeasureItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogMeasureItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogMeasureItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogMeasureItemContext matchRecogMeasureItem() {
		MatchRecogMeasureItemContext _localctx = new MatchRecogMeasureItemContext(Context, State);
		EnterRule(_localctx, 274, RULE_matchRecogMeasureItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1964;
			expression();
			State = 1969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1965;
				Match(AS);
				State = 1967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENT) {
					{
					State = 1966;
					_localctx.i = Match(IDENT);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogMatchesSelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EsperEPL2GrammarParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHES() { return GetToken(EsperEPL2GrammarParser.MATCHES, 0); }
		public MatchRecogMatchesSelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogMatchesSelection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogMatchesSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogMatchesSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogMatchesSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogMatchesSelectionContext matchRecogMatchesSelection() {
		MatchRecogMatchesSelectionContext _localctx = new MatchRecogMatchesSelectionContext(Context, State);
		EnterRule(_localctx, 276, RULE_matchRecogMatchesSelection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1971;
			Match(ALL);
			State = 1972;
			Match(MATCHES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(EsperEPL2GrammarParser.PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternAlterationContext matchRecogPatternAlteration() {
			return GetRuleContext<MatchRecogPatternAlterationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public MatchRecogPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogPatternContext matchRecogPattern() {
		MatchRecogPatternContext _localctx = new MatchRecogPatternContext(Context, State);
		EnterRule(_localctx, 278, RULE_matchRecogPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			Match(PATTERN);
			State = 1975;
			Match(LPAREN);
			State = 1976;
			matchRecogPatternAlteration();
			State = 1977;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogMatchesAfterSkipContext : ParserRuleContext {
		public KeywordAllowedIdentContext i1;
		public KeywordAllowedIdentContext i2;
		public KeywordAllowedIdentContext i3;
		public KeywordAllowedIdentContext i4;
		public KeywordAllowedIdentContext i5;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(EsperEPL2GrammarParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext[] keywordAllowedIdent() {
			return GetRuleContexts<KeywordAllowedIdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext keywordAllowedIdent(int i) {
			return GetRuleContext<KeywordAllowedIdentContext>(i);
		}
		public MatchRecogMatchesAfterSkipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogMatchesAfterSkip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogMatchesAfterSkip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogMatchesAfterSkip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogMatchesAfterSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogMatchesAfterSkipContext matchRecogMatchesAfterSkip() {
		MatchRecogMatchesAfterSkipContext _localctx = new MatchRecogMatchesAfterSkipContext(Context, State);
		EnterRule(_localctx, 280, RULE_matchRecogMatchesAfterSkip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979;
			Match(AFTER);
			State = 1980;
			_localctx.i1 = keywordAllowedIdent();
			State = 1981;
			_localctx.i2 = keywordAllowedIdent();
			State = 1982;
			_localctx.i3 = keywordAllowedIdent();
			State = 1983;
			_localctx.i4 = keywordAllowedIdent();
			State = 1984;
			_localctx.i5 = keywordAllowedIdent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogMatchesIntervalContext : ParserRuleContext {
		public IToken i;
		public IToken t;
		[System.Diagnostics.DebuggerNonUserCode] public TimePeriodContext timePeriod() {
			return GetRuleContext<TimePeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_EXPR() { return GetToken(EsperEPL2GrammarParser.OR_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(EsperEPL2GrammarParser.TERMINATED, 0); }
		public MatchRecogMatchesIntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogMatchesInterval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogMatchesInterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogMatchesInterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogMatchesInterval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogMatchesIntervalContext matchRecogMatchesInterval() {
		MatchRecogMatchesIntervalContext _localctx = new MatchRecogMatchesIntervalContext(Context, State);
		EnterRule(_localctx, 282, RULE_matchRecogMatchesInterval);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1986;
			_localctx.i = Match(IDENT);
			State = 1987;
			timePeriod();
			State = 1990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR_EXPR) {
				{
				State = 1988;
				Match(OR_EXPR);
				State = 1989;
				_localctx.t = Match(TERMINATED);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogPatternAlterationContext : ParserRuleContext {
		public IToken o;
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternConcatContext[] matchRecogPatternConcat() {
			return GetRuleContexts<MatchRecogPatternConcatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternConcatContext matchRecogPatternConcat(int i) {
			return GetRuleContext<MatchRecogPatternConcatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOR() { return GetTokens(EsperEPL2GrammarParser.BOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOR(int i) {
			return GetToken(EsperEPL2GrammarParser.BOR, i);
		}
		public MatchRecogPatternAlterationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogPatternAlteration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogPatternAlteration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogPatternAlteration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogPatternAlteration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogPatternAlterationContext matchRecogPatternAlteration() {
		MatchRecogPatternAlterationContext _localctx = new MatchRecogPatternAlterationContext(Context, State);
		EnterRule(_localctx, 284, RULE_matchRecogPatternAlteration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1992;
			matchRecogPatternConcat();
			State = 1997;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BOR) {
				{
				{
				State = 1993;
				_localctx.o = Match(BOR);
				State = 1994;
				matchRecogPatternConcat();
				}
				}
				State = 1999;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogPatternConcatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternUnaryContext[] matchRecogPatternUnary() {
			return GetRuleContexts<MatchRecogPatternUnaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternUnaryContext matchRecogPatternUnary(int i) {
			return GetRuleContext<MatchRecogPatternUnaryContext>(i);
		}
		public MatchRecogPatternConcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogPatternConcat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogPatternConcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogPatternConcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogPatternConcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogPatternConcatContext matchRecogPatternConcat() {
		MatchRecogPatternConcatContext _localctx = new MatchRecogPatternConcatContext(Context, State);
		EnterRule(_localctx, 286, RULE_matchRecogPatternConcat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2000;
				matchRecogPatternUnary();
				}
				}
				State = 2003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MATCH_RECOGNIZE_PERMUTE || _la==LPAREN || _la==IDENT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogPatternUnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternPermuteContext matchRecogPatternPermute() {
			return GetRuleContext<MatchRecogPatternPermuteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternNestedContext matchRecogPatternNested() {
			return GetRuleContext<MatchRecogPatternNestedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternAtomContext matchRecogPatternAtom() {
			return GetRuleContext<MatchRecogPatternAtomContext>(0);
		}
		public MatchRecogPatternUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogPatternUnary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogPatternUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogPatternUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogPatternUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogPatternUnaryContext matchRecogPatternUnary() {
		MatchRecogPatternUnaryContext _localctx = new MatchRecogPatternUnaryContext(Context, State);
		EnterRule(_localctx, 288, RULE_matchRecogPatternUnary);
		try {
			State = 2008;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MATCH_RECOGNIZE_PERMUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2005;
				matchRecogPatternPermute();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2006;
				matchRecogPatternNested();
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2007;
				matchRecogPatternAtom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogPatternNestedContext : ParserRuleContext {
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternAlterationContext matchRecogPatternAlteration() {
			return GetRuleContext<MatchRecogPatternAlterationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternRepeatContext matchRecogPatternRepeat() {
			return GetRuleContext<MatchRecogPatternRepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(EsperEPL2GrammarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(EsperEPL2GrammarParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(EsperEPL2GrammarParser.QUESTION, 0); }
		public MatchRecogPatternNestedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogPatternNested; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogPatternNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogPatternNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogPatternNested(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogPatternNestedContext matchRecogPatternNested() {
		MatchRecogPatternNestedContext _localctx = new MatchRecogPatternNestedContext(Context, State);
		EnterRule(_localctx, 290, RULE_matchRecogPatternNested);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2010;
			Match(LPAREN);
			State = 2011;
			matchRecogPatternAlteration();
			State = 2012;
			Match(RPAREN);
			State = 2016;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				{
				State = 2013;
				_localctx.s = Match(STAR);
				}
				break;
			case PLUS:
				{
				State = 2014;
				_localctx.s = Match(PLUS);
				}
				break;
			case QUESTION:
				{
				State = 2015;
				_localctx.s = Match(QUESTION);
				}
				break;
			case MATCH_RECOGNIZE_PERMUTE:
			case LPAREN:
			case RPAREN:
			case LCURLY:
			case COMMA:
			case BOR:
			case IDENT:
				break;
			default:
				break;
			}
			State = 2019;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 2018;
				matchRecogPatternRepeat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogPatternPermuteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_RECOGNIZE_PERMUTE() { return GetToken(EsperEPL2GrammarParser.MATCH_RECOGNIZE_PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternAlterationContext[] matchRecogPatternAlteration() {
			return GetRuleContexts<MatchRecogPatternAlterationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternAlterationContext matchRecogPatternAlteration(int i) {
			return GetRuleContext<MatchRecogPatternAlterationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public MatchRecogPatternPermuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogPatternPermute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogPatternPermute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogPatternPermute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogPatternPermute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogPatternPermuteContext matchRecogPatternPermute() {
		MatchRecogPatternPermuteContext _localctx = new MatchRecogPatternPermuteContext(Context, State);
		EnterRule(_localctx, 292, RULE_matchRecogPatternPermute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2021;
			Match(MATCH_RECOGNIZE_PERMUTE);
			State = 2022;
			Match(LPAREN);
			State = 2023;
			matchRecogPatternAlteration();
			State = 2028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2024;
				Match(COMMA);
				State = 2025;
				matchRecogPatternAlteration();
				}
				}
				State = 2030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2031;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogPatternAtomContext : ParserRuleContext {
		public IToken i;
		public IToken s;
		public IToken reluctant;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogPatternRepeatContext matchRecogPatternRepeat() {
			return GetRuleContext<MatchRecogPatternRepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(EsperEPL2GrammarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(EsperEPL2GrammarParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(EsperEPL2GrammarParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(EsperEPL2GrammarParser.QUESTION, i);
		}
		public MatchRecogPatternAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogPatternAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogPatternAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogPatternAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogPatternAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogPatternAtomContext matchRecogPatternAtom() {
		MatchRecogPatternAtomContext _localctx = new MatchRecogPatternAtomContext(Context, State);
		EnterRule(_localctx, 294, RULE_matchRecogPatternAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2033;
			_localctx.i = Match(IDENT);
			State = 2042;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 2129921L) != 0)) {
				{
				State = 2037;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 2034;
					_localctx.s = Match(STAR);
					}
					break;
				case PLUS:
					{
					State = 2035;
					_localctx.s = Match(PLUS);
					}
					break;
				case QUESTION:
					{
					State = 2036;
					_localctx.s = Match(QUESTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 2039;
					_localctx.reluctant = Match(QUESTION);
					}
				}

				}
			}

			State = 2045;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 2044;
				matchRecogPatternRepeat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogPatternRepeatContext : ParserRuleContext {
		public ExpressionContext e1;
		public IToken comma;
		public ExpressionContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(EsperEPL2GrammarParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(EsperEPL2GrammarParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(EsperEPL2GrammarParser.COMMA, 0); }
		public MatchRecogPatternRepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogPatternRepeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogPatternRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogPatternRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogPatternRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogPatternRepeatContext matchRecogPatternRepeat() {
		MatchRecogPatternRepeatContext _localctx = new MatchRecogPatternRepeatContext(Context, State);
		EnterRule(_localctx, 296, RULE_matchRecogPatternRepeat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2047;
			Match(LCURLY);
			State = 2049;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
			case 1:
				{
				State = 2048;
				_localctx.e1 = expression();
				}
				break;
			}
			State = 2052;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2051;
				_localctx.comma = Match(COMMA);
				}
			}

			State = 2055;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
				{
				State = 2054;
				_localctx.e2 = expression();
				}
			}

			State = 2057;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogDefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(EsperEPL2GrammarParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogDefineItemContext[] matchRecogDefineItem() {
			return GetRuleContexts<MatchRecogDefineItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchRecogDefineItemContext matchRecogDefineItem(int i) {
			return GetRuleContext<MatchRecogDefineItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public MatchRecogDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogDefineContext matchRecogDefine() {
		MatchRecogDefineContext _localctx = new MatchRecogDefineContext(Context, State);
		EnterRule(_localctx, 298, RULE_matchRecogDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2059;
			Match(DEFINE);
			State = 2060;
			matchRecogDefineItem();
			State = 2065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2061;
				Match(COMMA);
				State = 2062;
				matchRecogDefineItem();
				}
				}
				State = 2067;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchRecogDefineItemContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public MatchRecogDefineItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchRecogDefineItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchRecogDefineItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchRecogDefineItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchRecogDefineItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchRecogDefineItemContext matchRecogDefineItem() {
		MatchRecogDefineItemContext _localctx = new MatchRecogDefineItemContext(Context, State);
		EnterRule(_localctx, 300, RULE_matchRecogDefineItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2068;
			_localctx.i = Match(IDENT);
			State = 2069;
			Match(AS);
			State = 2070;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseExpressionContext caseExpression() {
			return GetRuleContext<CaseExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 302, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2072;
			caseExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(EsperEPL2GrammarParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(EsperEPL2GrammarParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhenClauseContext[] whenClause() {
			return GetRuleContexts<WhenClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenClauseContext whenClause(int i) {
			return GetRuleContext<WhenClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseClauseContext elseClause() {
			return GetRuleContext<ElseClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvalOrExpressionContext evalOrExpression() {
			return GetRuleContext<EvalOrExpressionContext>(0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterCaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitCaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseExpressionContext caseExpression() {
		CaseExpressionContext _localctx = new CaseExpressionContext(Context, State);
		EnterRule(_localctx, 304, RULE_caseExpression);
		int _la;
		try {
			State = 2102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				 paraphrases.Push("case expression"); 
				State = 2075;
				Match(CASE);
				State = 2077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2076;
					whenClause();
					}
					}
					State = 2079;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 2082;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 2081;
					elseClause();
					}
				}

				State = 2084;
				Match(END);
				 paraphrases.Pop(); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				 paraphrases.Push("case expression"); 
				State = 2088;
				Match(CASE);
				State = 2089;
				expression();
				State = 2091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2090;
					whenClause();
					}
					}
					State = 2093;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 2096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 2095;
					elseClause();
					}
				}

				State = 2098;
				Match(END);
				 paraphrases.Pop(); 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2101;
				evalOrExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalOrExpressionContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public EvalAndExpressionContext[] evalAndExpression() {
			return GetRuleContexts<EvalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvalAndExpressionContext evalAndExpression(int i) {
			return GetRuleContext<EvalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR_EXPR() { return GetTokens(EsperEPL2GrammarParser.OR_EXPR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_EXPR(int i) {
			return GetToken(EsperEPL2GrammarParser.OR_EXPR, i);
		}
		public EvalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterEvalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitEvalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalOrExpressionContext evalOrExpression() {
		EvalOrExpressionContext _localctx = new EvalOrExpressionContext(Context, State);
		EnterRule(_localctx, 306, RULE_evalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2104;
			evalAndExpression();
			State = 2109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR_EXPR) {
				{
				{
				State = 2105;
				_localctx.op = Match(OR_EXPR);
				State = 2106;
				evalAndExpression();
				}
				}
				State = 2111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalAndExpressionContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public BitWiseExpressionContext[] bitWiseExpression() {
			return GetRuleContexts<BitWiseExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitWiseExpressionContext bitWiseExpression(int i) {
			return GetRuleContext<BitWiseExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND_EXPR() { return GetTokens(EsperEPL2GrammarParser.AND_EXPR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_EXPR(int i) {
			return GetToken(EsperEPL2GrammarParser.AND_EXPR, i);
		}
		public EvalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterEvalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitEvalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalAndExpressionContext evalAndExpression() {
		EvalAndExpressionContext _localctx = new EvalAndExpressionContext(Context, State);
		EnterRule(_localctx, 308, RULE_evalAndExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2112;
			bitWiseExpression();
			State = 2117;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,269,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2113;
					_localctx.op = Match(AND_EXPR);
					State = 2114;
					bitWiseExpression();
					}
					} 
				}
				State = 2119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,269,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitWiseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegatedExpressionContext[] negatedExpression() {
			return GetRuleContexts<NegatedExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegatedExpressionContext negatedExpression(int i) {
			return GetRuleContext<NegatedExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BAND() { return GetTokens(EsperEPL2GrammarParser.BAND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAND(int i) {
			return GetToken(EsperEPL2GrammarParser.BAND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOR() { return GetTokens(EsperEPL2GrammarParser.BOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOR(int i) {
			return GetToken(EsperEPL2GrammarParser.BOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BXOR() { return GetTokens(EsperEPL2GrammarParser.BXOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BXOR(int i) {
			return GetToken(EsperEPL2GrammarParser.BXOR, i);
		}
		public BitWiseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitWiseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBitWiseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBitWiseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitWiseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitWiseExpressionContext bitWiseExpression() {
		BitWiseExpressionContext _localctx = new BitWiseExpressionContext(Context, State);
		EnterRule(_localctx, 310, RULE_bitWiseExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2120;
			negatedExpression();
			State = 2125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & 37L) != 0)) {
				{
				{
				State = 2121;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & 37L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2122;
				negatedExpression();
				}
				}
				State = 2127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegatedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvalEqualsExpressionContext evalEqualsExpression() {
			return GetRuleContext<EvalEqualsExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EXPR() { return GetToken(EsperEPL2GrammarParser.NOT_EXPR, 0); }
		public NegatedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negatedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterNegatedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitNegatedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegatedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegatedExpressionContext negatedExpression() {
		NegatedExpressionContext _localctx = new NegatedExpressionContext(Context, State);
		EnterRule(_localctx, 312, RULE_negatedExpression);
		try {
			State = 2131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WINDOW:
			case BETWEEN:
			case ESCAPE:
			case EVERY_EXPR:
			case WHERE:
			case SUM:
			case AVG:
			case MAX:
			case MIN:
			case COALESCE:
			case MEDIAN:
			case STDDEV:
			case AVEDEV:
			case COUNT:
			case OUTER:
			case JOIN:
			case LEFT:
			case RIGHT:
			case FULL:
			case EVENTS:
			case FIRST:
			case LAST:
			case ISTREAM:
			case SCHEMA:
			case UNIDIRECTIONAL:
			case RETAINUNION:
			case RETAININTERSECTION:
			case PATTERN:
			case SQL:
			case METADATASQL:
			case PREVIOUS:
			case PREVIOUSTAIL:
			case PREVIOUSCOUNT:
			case PREVIOUSWINDOW:
			case PRIOR:
			case EXISTS:
			case WEEKDAY:
			case LW:
			case INSTANCEOF:
			case TYPEOF:
			case CAST:
			case CURRENT_TIMESTAMP:
			case SNAPSHOT:
			case SET:
			case VARIABLE:
			case TABLE:
			case UNTIL:
			case AT:
			case INDEX:
			case BOOLEAN_TRUE:
			case BOOLEAN_FALSE:
			case VALUE_NULL:
			case DEFINE:
			case PARTITION:
			case MATCHES:
			case AFTER:
			case FOR:
			case WHILE:
			case USING:
			case MERGE:
			case MATCHED:
			case NEWKW:
			case CONTEXT:
			case GROUPING:
			case GROUPING_ID:
			case QUESTION:
			case LPAREN:
			case LCURLY:
			case PLUS:
			case MINUS:
			case TICKED_STRING_LITERAL:
			case QUOTED_STRING_LITERAL:
			case STRING_LITERAL:
			case IDENT:
			case IntegerLiteral:
			case FloatingPointLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2128;
				evalEqualsExpression();
				}
				break;
			case NOT_EXPR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2129;
				Match(NOT_EXPR);
				State = 2130;
				evalEqualsExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalEqualsExpressionContext : ParserRuleContext {
		public IToken eq;
		public IToken @is;
		public IToken isnot;
		public IToken sqlne;
		public IToken ne;
		public IToken a;
		[System.Diagnostics.DebuggerNonUserCode] public EvalRelationalExpressionContext[] evalRelationalExpression() {
			return GetRuleContexts<EvalRelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvalRelationalExpressionContext evalRelationalExpression(int i) {
			return GetRuleContext<EvalRelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT_EXPR() { return GetTokens(EsperEPL2GrammarParser.NOT_EXPR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EXPR(int i) {
			return GetToken(EsperEPL2GrammarParser.NOT_EXPR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(EsperEPL2GrammarParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(EsperEPL2GrammarParser.EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IS() { return GetTokens(EsperEPL2GrammarParser.IS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS(int i) {
			return GetToken(EsperEPL2GrammarParser.IS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQL_NE() { return GetTokens(EsperEPL2GrammarParser.SQL_NE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NE(int i) {
			return GetToken(EsperEPL2GrammarParser.SQL_NE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT_EQUAL() { return GetTokens(EsperEPL2GrammarParser.NOT_EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL(int i) {
			return GetToken(EsperEPL2GrammarParser.NOT_EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubSelectGroupExpressionContext[] subSelectGroupExpression() {
			return GetRuleContexts<SubSelectGroupExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubSelectGroupExpressionContext subSelectGroupExpression(int i) {
			return GetRuleContext<SubSelectGroupExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY() { return GetTokens(EsperEPL2GrammarParser.ANY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY(int i) {
			return GetToken(EsperEPL2GrammarParser.ANY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOME() { return GetTokens(EsperEPL2GrammarParser.SOME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME(int i) {
			return GetToken(EsperEPL2GrammarParser.SOME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALL() { return GetTokens(EsperEPL2GrammarParser.ALL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL(int i) {
			return GetToken(EsperEPL2GrammarParser.ALL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EsperEPL2GrammarParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EsperEPL2GrammarParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EsperEPL2GrammarParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EsperEPL2GrammarParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		public EvalEqualsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalEqualsExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterEvalEqualsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitEvalEqualsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalEqualsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalEqualsExpressionContext evalEqualsExpression() {
		EvalEqualsExpressionContext _localctx = new EvalEqualsExpressionContext(Context, State);
		EnterRule(_localctx, 314, RULE_evalEqualsExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2133;
			evalRelationalExpression();
			State = 2160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IS || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 16387L) != 0)) {
				{
				{
				State = 2140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
				case 1:
					{
					State = 2134;
					_localctx.eq = Match(EQUALS);
					}
					break;
				case 2:
					{
					State = 2135;
					_localctx.@is = Match(IS);
					}
					break;
				case 3:
					{
					State = 2136;
					_localctx.isnot = Match(IS);
					State = 2137;
					Match(NOT_EXPR);
					}
					break;
				case 4:
					{
					State = 2138;
					_localctx.sqlne = Match(SQL_NE);
					}
					break;
				case 5:
					{
					State = 2139;
					_localctx.ne = Match(NOT_EQUAL);
					}
					break;
				}
				State = 2156;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WINDOW:
				case BETWEEN:
				case ESCAPE:
				case EVERY_EXPR:
				case WHERE:
				case SUM:
				case AVG:
				case MAX:
				case MIN:
				case COALESCE:
				case MEDIAN:
				case STDDEV:
				case AVEDEV:
				case COUNT:
				case OUTER:
				case JOIN:
				case LEFT:
				case RIGHT:
				case FULL:
				case EVENTS:
				case FIRST:
				case LAST:
				case ISTREAM:
				case SCHEMA:
				case UNIDIRECTIONAL:
				case RETAINUNION:
				case RETAININTERSECTION:
				case PATTERN:
				case SQL:
				case METADATASQL:
				case PREVIOUS:
				case PREVIOUSTAIL:
				case PREVIOUSCOUNT:
				case PREVIOUSWINDOW:
				case PRIOR:
				case EXISTS:
				case WEEKDAY:
				case LW:
				case INSTANCEOF:
				case TYPEOF:
				case CAST:
				case CURRENT_TIMESTAMP:
				case SNAPSHOT:
				case SET:
				case VARIABLE:
				case TABLE:
				case UNTIL:
				case AT:
				case INDEX:
				case BOOLEAN_TRUE:
				case BOOLEAN_FALSE:
				case VALUE_NULL:
				case DEFINE:
				case PARTITION:
				case MATCHES:
				case AFTER:
				case FOR:
				case WHILE:
				case USING:
				case MERGE:
				case MATCHED:
				case NEWKW:
				case CONTEXT:
				case GROUPING:
				case GROUPING_ID:
				case QUESTION:
				case LPAREN:
				case LCURLY:
				case PLUS:
				case MINUS:
				case TICKED_STRING_LITERAL:
				case QUOTED_STRING_LITERAL:
				case STRING_LITERAL:
				case IDENT:
				case IntegerLiteral:
				case FloatingPointLiteral:
					{
					State = 2142;
					evalRelationalExpression();
					}
					break;
				case ALL:
				case ANY:
				case SOME:
					{
					State = 2146;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ANY:
						{
						State = 2143;
						_localctx.a = Match(ANY);
						}
						break;
					case SOME:
						{
						State = 2144;
						_localctx.a = Match(SOME);
						}
						break;
					case ALL:
						{
						State = 2145;
						_localctx.a = Match(ALL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2154;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
					case 1:
						{
						{
						State = 2148;
						Match(LPAREN);
						State = 2150;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
							{
							State = 2149;
							expressionList();
							}
						}

						State = 2152;
						Match(RPAREN);
						}
						}
						break;
					case 2:
						{
						State = 2153;
						subSelectGroupExpression();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 2162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalRelationalExpressionContext : ParserRuleContext {
		public IToken r;
		public IToken g;
		public IToken n;
		public IToken @in;
		public IToken l;
		public IToken col;
		public IToken inset;
		public IToken between;
		public IToken like;
		public IToken regex;
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenationExprContext[] concatenationExpr() {
			return GetRuleContexts<ConcatenationExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenationExprContext concatenationExpr(int i) {
			return GetRuleContext<ConcatenationExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InSubSelectQueryContext inSubSelectQuery() {
			return GetRuleContext<InSubSelectQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BetweenListContext betweenList() {
			return GetRuleContext<BetweenListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SET() { return GetToken(EsperEPL2GrammarParser.IN_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(EsperEPL2GrammarParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(EsperEPL2GrammarParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(EsperEPL2GrammarParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EXPR() { return GetToken(EsperEPL2GrammarParser.NOT_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(EsperEPL2GrammarParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringconstantContext stringconstant() {
			return GetRuleContext<StringconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(EsperEPL2GrammarParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(EsperEPL2GrammarParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(EsperEPL2GrammarParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(EsperEPL2GrammarParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(EsperEPL2GrammarParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(EsperEPL2GrammarParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(EsperEPL2GrammarParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(EsperEPL2GrammarParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(EsperEPL2GrammarParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(EsperEPL2GrammarParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LE() { return GetTokens(EsperEPL2GrammarParser.LE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE(int i) {
			return GetToken(EsperEPL2GrammarParser.LE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GE() { return GetTokens(EsperEPL2GrammarParser.GE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE(int i) {
			return GetToken(EsperEPL2GrammarParser.GE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubSelectGroupExpressionContext[] subSelectGroupExpression() {
			return GetRuleContexts<SubSelectGroupExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubSelectGroupExpressionContext subSelectGroupExpression(int i) {
			return GetRuleContext<SubSelectGroupExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY() { return GetTokens(EsperEPL2GrammarParser.ANY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY(int i) {
			return GetToken(EsperEPL2GrammarParser.ANY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOME() { return GetTokens(EsperEPL2GrammarParser.SOME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME(int i) {
			return GetToken(EsperEPL2GrammarParser.SOME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALL() { return GetTokens(EsperEPL2GrammarParser.ALL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL(int i) {
			return GetToken(EsperEPL2GrammarParser.ALL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		public EvalRelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalRelationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterEvalRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitEvalRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalRelationalExpressionContext evalRelationalExpression() {
		EvalRelationalExpressionContext _localctx = new EvalRelationalExpressionContext(Context, State);
		EnterRule(_localctx, 316, RULE_evalRelationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2163;
			concatenationExpr();
			State = 2229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
			case 1:
				{
				{
				State = 2188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 15L) != 0)) {
					{
					{
					State = 2168;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LT:
						{
						State = 2164;
						_localctx.r = Match(LT);
						}
						break;
					case GT:
						{
						State = 2165;
						_localctx.r = Match(GT);
						}
						break;
					case LE:
						{
						State = 2166;
						_localctx.r = Match(LE);
						}
						break;
					case GE:
						{
						State = 2167;
						_localctx.r = Match(GE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2184;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WINDOW:
					case BETWEEN:
					case ESCAPE:
					case EVERY_EXPR:
					case WHERE:
					case SUM:
					case AVG:
					case MAX:
					case MIN:
					case COALESCE:
					case MEDIAN:
					case STDDEV:
					case AVEDEV:
					case COUNT:
					case OUTER:
					case JOIN:
					case LEFT:
					case RIGHT:
					case FULL:
					case EVENTS:
					case FIRST:
					case LAST:
					case ISTREAM:
					case SCHEMA:
					case UNIDIRECTIONAL:
					case RETAINUNION:
					case RETAININTERSECTION:
					case PATTERN:
					case SQL:
					case METADATASQL:
					case PREVIOUS:
					case PREVIOUSTAIL:
					case PREVIOUSCOUNT:
					case PREVIOUSWINDOW:
					case PRIOR:
					case EXISTS:
					case WEEKDAY:
					case LW:
					case INSTANCEOF:
					case TYPEOF:
					case CAST:
					case CURRENT_TIMESTAMP:
					case SNAPSHOT:
					case SET:
					case VARIABLE:
					case TABLE:
					case UNTIL:
					case AT:
					case INDEX:
					case BOOLEAN_TRUE:
					case BOOLEAN_FALSE:
					case VALUE_NULL:
					case DEFINE:
					case PARTITION:
					case MATCHES:
					case AFTER:
					case FOR:
					case WHILE:
					case USING:
					case MERGE:
					case MATCHED:
					case NEWKW:
					case CONTEXT:
					case GROUPING:
					case GROUPING_ID:
					case QUESTION:
					case LPAREN:
					case LCURLY:
					case PLUS:
					case MINUS:
					case TICKED_STRING_LITERAL:
					case QUOTED_STRING_LITERAL:
					case STRING_LITERAL:
					case IDENT:
					case IntegerLiteral:
					case FloatingPointLiteral:
						{
						State = 2170;
						concatenationExpr();
						}
						break;
					case ALL:
					case ANY:
					case SOME:
						{
						State = 2174;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case ANY:
							{
							State = 2171;
							_localctx.g = Match(ANY);
							}
							break;
						case SOME:
							{
							State = 2172;
							_localctx.g = Match(SOME);
							}
							break;
						case ALL:
							{
							State = 2173;
							_localctx.g = Match(ALL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2182;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
						case 1:
							{
							{
							State = 2176;
							Match(LPAREN);
							State = 2178;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
								{
								State = 2177;
								expressionList();
								}
							}

							State = 2180;
							Match(RPAREN);
							}
							}
							break;
						case 2:
							{
							State = 2181;
							subSelectGroupExpression();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 2190;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				State = 2192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_EXPR) {
					{
					State = 2191;
					_localctx.n = Match(NOT_EXPR);
					}
				}

				State = 2227;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
				case 1:
					{
					{
					State = 2194;
					_localctx.@in = Match(IN_SET);
					State = 2197;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LPAREN:
						{
						State = 2195;
						_localctx.l = Match(LPAREN);
						}
						break;
					case LBRACK:
						{
						State = 2196;
						_localctx.l = Match(LBRACK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2199;
					expression();
					State = 2209;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case COLON:
						{
						{
						State = 2200;
						_localctx.col = Match(COLON);
						{
						State = 2201;
						expression();
						}
						}
						}
						break;
					case RPAREN:
					case RBRACK:
					case COMMA:
						{
						{
						State = 2206;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 2202;
							Match(COMMA);
							State = 2203;
							expression();
							}
							}
							State = 2208;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2213;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case RPAREN:
						{
						State = 2211;
						_localctx.r = Match(RPAREN);
						}
						break;
					case RBRACK:
						{
						State = 2212;
						_localctx.r = Match(RBRACK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case 2:
					{
					State = 2215;
					_localctx.inset = Match(IN_SET);
					State = 2216;
					inSubSelectQuery();
					}
					break;
				case 3:
					{
					State = 2217;
					_localctx.between = Match(BETWEEN);
					State = 2218;
					betweenList();
					}
					break;
				case 4:
					{
					State = 2219;
					_localctx.like = Match(LIKE);
					State = 2220;
					concatenationExpr();
					State = 2223;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
					case 1:
						{
						State = 2221;
						Match(ESCAPE);
						State = 2222;
						stringconstant();
						}
						break;
					}
					}
					break;
				case 5:
					{
					State = 2225;
					_localctx.regex = Match(REGEXP);
					State = 2226;
					concatenationExpr();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InSubSelectQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExprContext subQueryExpr() {
			return GetRuleContext<SubQueryExprContext>(0);
		}
		public InSubSelectQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inSubSelectQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterInSubSelectQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitInSubSelectQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInSubSelectQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InSubSelectQueryContext inSubSelectQuery() {
		InSubSelectQueryContext _localctx = new InSubSelectQueryContext(Context, State);
		EnterRule(_localctx, 318, RULE_inSubSelectQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2231;
			subQueryExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenationExprContext : ParserRuleContext {
		public IToken c;
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOR() { return GetTokens(EsperEPL2GrammarParser.LOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOR(int i) {
			return GetToken(EsperEPL2GrammarParser.LOR, i);
		}
		public ConcatenationExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenationExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterConcatenationExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitConcatenationExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatenationExprContext concatenationExpr() {
		ConcatenationExprContext _localctx = new ConcatenationExprContext(Context, State);
		EnterRule(_localctx, 320, RULE_concatenationExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2233;
			additiveExpression();
			State = 2243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOR) {
				{
				State = 2234;
				_localctx.c = Match(LOR);
				State = 2235;
				additiveExpression();
				State = 2240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LOR) {
					{
					{
					State = 2236;
					Match(LOR);
					State = 2237;
					additiveExpression();
					}
					}
					State = 2242;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyExpressionContext[] multiplyExpression() {
			return GetRuleContexts<MultiplyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyExpressionContext multiplyExpression(int i) {
			return GetRuleContext<MultiplyExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(EsperEPL2GrammarParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(EsperEPL2GrammarParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(EsperEPL2GrammarParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(EsperEPL2GrammarParser.MINUS, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 322, RULE_additiveExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2245;
			multiplyExpression();
			State = 2250;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,294,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2246;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2247;
					multiplyExpression();
					}
					} 
				}
				State = 2252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,294,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(EsperEPL2GrammarParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(EsperEPL2GrammarParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(EsperEPL2GrammarParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(EsperEPL2GrammarParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(EsperEPL2GrammarParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(EsperEPL2GrammarParser.MOD, i);
		}
		public MultiplyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyExpressionContext multiplyExpression() {
		MultiplyExpressionContext _localctx = new MultiplyExpressionContext(Context, State);
		EnterRule(_localctx, 324, RULE_multiplyExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2253;
			unaryExpression();
			State = 2258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & 1281L) != 0)) {
				{
				{
				State = 2254;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & 1281L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2255;
				unaryExpression();
				}
				}
				State = 2260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public IToken inner;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryMinusContext unaryMinus() {
			return GetRuleContext<UnaryMinusContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionCanChainContext substitutionCanChain() {
			return GetRuleContext<SubstitutionCanChainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableElementsContext chainableElements() {
			return GetRuleContext<ChainableElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinFuncContext builtinFunc() {
			return GetRuleContext<BuiltinFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext chainable() {
			return GetRuleContext<ChainableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayExpressionContext arrayExpression() {
			return GetRuleContext<ArrayExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowSubSelectExpressionContext rowSubSelectExpression() {
			return GetRuleContext<RowSubSelectExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExistsSubSelectExpressionContext existsSubSelectExpression() {
			return GetRuleContext<ExistsSubSelectExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWKW() { return GetToken(EsperEPL2GrammarParser.NEWKW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(EsperEPL2GrammarParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewAssignContext[] newAssign() {
			return GetRuleContexts<NewAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewAssignContext newAssign(int i) {
			return GetRuleContext<NewAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(EsperEPL2GrammarParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierNoDimensionsContext classIdentifierNoDimensions() {
			return GetRuleContext<ClassIdentifierNoDimensionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(EsperEPL2GrammarParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(EsperEPL2GrammarParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(EsperEPL2GrammarParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(EsperEPL2GrammarParser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonobjectContext jsonobject() {
			return GetRuleContext<JsonobjectContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 326, RULE_unaryExpression);
		int _la;
		try {
			State = 2325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2261;
				unaryMinus();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2262;
				constant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2263;
				substitutionCanChain();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2264;
				_localctx.inner = Match(LPAREN);
				State = 2265;
				expression();
				State = 2266;
				Match(RPAREN);
				State = 2267;
				chainableElements();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2269;
				builtinFunc();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2270;
				chainable();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2271;
				arrayExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2272;
				rowSubSelectExpression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2273;
				existsSubSelectExpression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2274;
				Match(NEWKW);
				State = 2275;
				Match(LCURLY);
				State = 2276;
				newAssign();
				State = 2281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2277;
					Match(COMMA);
					State = 2278;
					newAssign();
					}
					}
					State = 2283;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2284;
				Match(RCURLY);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2286;
				Match(NEWKW);
				State = 2287;
				classIdentifierNoDimensions();
				State = 2288;
				Match(LPAREN);
				State = 2297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
					{
					State = 2289;
					expression();
					State = 2294;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2290;
						Match(COMMA);
						State = 2291;
						expression();
						}
						}
						State = 2296;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 2299;
				Match(RPAREN);
				State = 2300;
				chainableElements();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2302;
				Match(NEWKW);
				State = 2303;
				classIdentifierNoDimensions();
				State = 2304;
				Match(LBRACK);
				State = 2305;
				expression();
				State = 2306;
				Match(RBRACK);
				State = 2312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACK) {
					{
					State = 2307;
					Match(LBRACK);
					State = 2309;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
						{
						State = 2308;
						expression();
						}
					}

					State = 2311;
					Match(RBRACK);
					}
				}

				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2314;
				Match(NEWKW);
				State = 2315;
				classIdentifierNoDimensions();
				State = 2316;
				Match(LBRACK);
				State = 2317;
				Match(RBRACK);
				State = 2320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACK) {
					{
					State = 2318;
					Match(LBRACK);
					State = 2319;
					Match(RBRACK);
					}
				}

				State = 2322;
				arrayExpression();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2324;
				jsonobject();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryMinusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(EsperEPL2GrammarParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext chainable() {
			return GetRuleContext<ChainableContext>(0);
		}
		public UnaryMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryMinus; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterUnaryMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitUnaryMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryMinusContext unaryMinus() {
		UnaryMinusContext _localctx = new UnaryMinusContext(Context, State);
		EnterRule(_localctx, 328, RULE_unaryMinus);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2327;
			Match(MINUS);
			State = 2328;
			chainable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstitutionCanChainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableElementsContext chainableElements() {
			return GetRuleContext<ChainableElementsContext>(0);
		}
		public SubstitutionCanChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substitutionCanChain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSubstitutionCanChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSubstitutionCanChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstitutionCanChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstitutionCanChainContext substitutionCanChain() {
		SubstitutionCanChainContext _localctx = new SubstitutionCanChainContext(Context, State);
		EnterRule(_localctx, 330, RULE_substitutionCanChain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2330;
			substitution();
			State = 2331;
			chainableElements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext chainable() {
			return GetRuleContext<ChainableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(EsperEPL2GrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NewAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterNewAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitNewAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewAssignContext newAssign() {
		NewAssignContext _localctx = new NewAssignContext(Context, State);
		EnterRule(_localctx, 332, RULE_newAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2333;
			chainable();
			State = 2336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 2334;
				Match(EQUALS);
				State = 2335;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowSubSelectExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExprContext subQueryExpr() {
			return GetRuleContext<SubQueryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableElementsContext chainableElements() {
			return GetRuleContext<ChainableElementsContext>(0);
		}
		public RowSubSelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowSubSelectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterRowSubSelectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitRowSubSelectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowSubSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowSubSelectExpressionContext rowSubSelectExpression() {
		RowSubSelectExpressionContext _localctx = new RowSubSelectExpressionContext(Context, State);
		EnterRule(_localctx, 334, RULE_rowSubSelectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2338;
			subQueryExpr();
			State = 2339;
			chainableElements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubSelectGroupExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExprContext subQueryExpr() {
			return GetRuleContext<SubQueryExprContext>(0);
		}
		public SubSelectGroupExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subSelectGroupExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSubSelectGroupExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSubSelectGroupExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubSelectGroupExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubSelectGroupExpressionContext subSelectGroupExpression() {
		SubSelectGroupExpressionContext _localctx = new SubSelectGroupExpressionContext(Context, State);
		EnterRule(_localctx, 336, RULE_subSelectGroupExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2341;
			subQueryExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistsSubSelectExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(EsperEPL2GrammarParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExprContext subQueryExpr() {
			return GetRuleContext<SubQueryExprContext>(0);
		}
		public ExistsSubSelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existsSubSelectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExistsSubSelectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExistsSubSelectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsSubSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExistsSubSelectExpressionContext existsSubSelectExpression() {
		ExistsSubSelectExpressionContext _localctx = new ExistsSubSelectExpressionContext(Context, State);
		EnterRule(_localctx, 338, RULE_existsSubSelectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2343;
			Match(EXISTS);
			State = 2344;
			subQueryExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubQueryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(EsperEPL2GrammarParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectionListContext selectionList() {
			return GetRuleContext<SelectionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(EsperEPL2GrammarParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubSelectFilterExprContext subSelectFilterExpr() {
			return GetRuleContext<SubSelectFilterExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EsperEPL2GrammarParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(EsperEPL2GrammarParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(EsperEPL2GrammarParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupByListExprContext groupByListExpr() {
			return GetRuleContext<GroupByListExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(EsperEPL2GrammarParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		public SubQueryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subQueryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSubQueryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSubQueryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubQueryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubQueryExprContext subQueryExpr() {
		SubQueryExprContext _localctx = new SubQueryExprContext(Context, State);
		EnterRule(_localctx, 340, RULE_subQueryExpr);
		 paraphrases.Push("subquery"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2346;
			Match(LPAREN);
			State = 2347;
			Match(SELECT);
			State = 2349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISTINCT) {
				{
				State = 2348;
				Match(DISTINCT);
				}
			}

			State = 2351;
			selectionList();
			State = 2352;
			Match(FROM);
			State = 2353;
			subSelectFilterExpr();
			State = 2356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2354;
				Match(WHERE);
				State = 2355;
				whereClause();
				}
			}

			State = 2361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUP) {
				{
				State = 2358;
				Match(GROUP);
				State = 2359;
				Match(BY);
				State = 2360;
				groupByListExpr();
				}
			}

			State = 2365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 2363;
				Match(HAVING);
				State = 2364;
				havingClause();
				}
			}

			State = 2367;
			Match(RPAREN);
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubSelectFilterExprContext : ParserRuleContext {
		public IToken ru;
		public IToken ri;
		[System.Diagnostics.DebuggerNonUserCode] public EventFilterExpressionContext eventFilterExpression() {
			return GetRuleContext<EventFilterExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewExpressionsContext viewExpressions() {
			return GetRuleContext<ViewExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentOrTickedContext identOrTicked() {
			return GetRuleContext<IdentOrTickedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAINUNION() { return GetToken(EsperEPL2GrammarParser.RETAINUNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAININTERSECTION() { return GetToken(EsperEPL2GrammarParser.RETAININTERSECTION, 0); }
		public SubSelectFilterExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subSelectFilterExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSubSelectFilterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSubSelectFilterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubSelectFilterExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubSelectFilterExprContext subSelectFilterExpr() {
		SubSelectFilterExprContext _localctx = new SubSelectFilterExprContext(Context, State);
		EnterRule(_localctx, 342, RULE_subSelectFilterExpr);
		 paraphrases.Push("subquery filter specification"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2369;
			eventFilterExpression();
			State = 2371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT || _la==HASHCHAR) {
				{
				State = 2370;
				viewExpressions();
				}
			}

			State = 2376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 2373;
				Match(AS);
				State = 2374;
				identOrTicked();
				}
				break;
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 2375;
				identOrTicked();
				}
				break;
			case WHERE:
			case GROUP:
			case HAVING:
			case RETAINUNION:
			case RETAININTERSECTION:
			case RPAREN:
				break;
			default:
				break;
			}
			State = 2380;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETAINUNION:
				{
				State = 2378;
				_localctx.ru = Match(RETAINUNION);
				}
				break;
			case RETAININTERSECTION:
				{
				State = 2379;
				_localctx.ri = Match(RETAININTERSECTION);
				}
				break;
			case WHERE:
			case GROUP:
			case HAVING:
			case RPAREN:
				break;
			default:
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(EsperEPL2GrammarParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(EsperEPL2GrammarParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableElementsContext chainableElements() {
			return GetRuleContext<ChainableElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public ArrayExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterArrayExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitArrayExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayExpressionContext arrayExpression() {
		ArrayExpressionContext _localctx = new ArrayExpressionContext(Context, State);
		EnterRule(_localctx, 344, RULE_arrayExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2382;
			Match(LCURLY);
			State = 2391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
				{
				State = 2383;
				expression();
				State = 2388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2384;
					Match(COMMA);
					State = 2385;
					expression();
					}
					}
					State = 2390;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 2393;
			Match(RCURLY);
			State = 2394;
			chainableElements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinFuncContext : ParserRuleContext {
		public BuiltinFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinFunc; } }
	 
		public BuiltinFuncContext() { }
		public virtual void CopyFrom(BuiltinFuncContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Builtin_castContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(EsperEPL2GrammarParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierWithDimensionsContext classIdentifierWithDimensions() {
			return GetRuleContext<ClassIdentifierWithDimensionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableElementsContext chainableElements() {
			return GetRuleContext<ChainableElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNamedParameterContext expressionNamedParameter() {
			return GetRuleContext<ExpressionNamedParameterContext>(0);
		}
		public Builtin_castContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_cast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_cast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_cast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_cntContext : BuiltinFuncContext {
		public IToken a;
		public IToken d;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(EsperEPL2GrammarParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListWithNamedContext expressionListWithNamed() {
			return GetRuleContext<ExpressionListWithNamedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EsperEPL2GrammarParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EsperEPL2GrammarParser.DISTINCT, 0); }
		public Builtin_cntContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_cnt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_cnt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_cnt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_sumContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(EsperEPL2GrammarParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListWithNamedContext expressionListWithNamed() {
			return GetRuleContext<ExpressionListWithNamedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EsperEPL2GrammarParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EsperEPL2GrammarParser.DISTINCT, 0); }
		public Builtin_sumContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_sum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_sum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_sum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_priorContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(EsperEPL2GrammarParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(EsperEPL2GrammarParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext chainable() {
			return GetRuleContext<ChainableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public Builtin_priorContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_prior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_prior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_prior(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_existsContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(EsperEPL2GrammarParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableContext chainable() {
			return GetRuleContext<ChainableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public Builtin_existsContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_exists(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_prevtailContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREVIOUSTAIL() { return GetToken(EsperEPL2GrammarParser.PREVIOUSTAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableElementsContext chainableElements() {
			return GetRuleContext<ChainableElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(EsperEPL2GrammarParser.COMMA, 0); }
		public Builtin_prevtailContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_prevtail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_prevtail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_prevtail(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_istreamContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISTREAM() { return GetToken(EsperEPL2GrammarParser.ISTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public Builtin_istreamContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_istream(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_istream(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_istream(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_medianContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIAN() { return GetToken(EsperEPL2GrammarParser.MEDIAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListWithNamedContext expressionListWithNamed() {
			return GetRuleContext<ExpressionListWithNamedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EsperEPL2GrammarParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EsperEPL2GrammarParser.DISTINCT, 0); }
		public Builtin_medianContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_median(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_median(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_median(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_currtsContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(EsperEPL2GrammarParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableElementsContext chainableElements() {
			return GetRuleContext<ChainableElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public Builtin_currtsContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_currts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_currts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_currts(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_coalesceContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(EsperEPL2GrammarParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public Builtin_coalesceContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_coalesce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_coalesce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_coalesce(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_prevContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREVIOUS() { return GetToken(EsperEPL2GrammarParser.PREVIOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableElementsContext chainableElements() {
			return GetRuleContext<ChainableElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(EsperEPL2GrammarParser.COMMA, 0); }
		public Builtin_prevContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_prev(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_prev(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_prev(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_prevcountContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREVIOUSCOUNT() { return GetToken(EsperEPL2GrammarParser.PREVIOUSCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public Builtin_prevcountContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_prevcount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_prevcount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_prevcount(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_groupingidContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING_ID() { return GetToken(EsperEPL2GrammarParser.GROUPING_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public Builtin_groupingidContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_groupingid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_groupingid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_groupingid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_prevwindowContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREVIOUSWINDOW() { return GetToken(EsperEPL2GrammarParser.PREVIOUSWINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableElementsContext chainableElements() {
			return GetRuleContext<ChainableElementsContext>(0);
		}
		public Builtin_prevwindowContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_prevwindow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_prevwindow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_prevwindow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_stddevContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(EsperEPL2GrammarParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListWithNamedContext expressionListWithNamed() {
			return GetRuleContext<ExpressionListWithNamedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EsperEPL2GrammarParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EsperEPL2GrammarParser.DISTINCT, 0); }
		public Builtin_stddevContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_stddev(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_stddev(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_stddev(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_groupingContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(EsperEPL2GrammarParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public Builtin_groupingContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_grouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_grouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_grouping(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_typeofContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(EsperEPL2GrammarParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public Builtin_typeofContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_typeof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_typeof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_typeof(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_firstlastwindowContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public FirstLastWindowAggregationContext firstLastWindowAggregation() {
			return GetRuleContext<FirstLastWindowAggregationContext>(0);
		}
		public Builtin_firstlastwindowContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_firstlastwindow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_firstlastwindow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_firstlastwindow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_instanceofContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCEOF() { return GetToken(EsperEPL2GrammarParser.INSTANCEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext[] classIdentifier() {
			return GetRuleContexts<ClassIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier(int i) {
			return GetRuleContext<ClassIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public Builtin_instanceofContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_instanceof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_instanceof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_instanceof(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_avgContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(EsperEPL2GrammarParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListWithNamedContext expressionListWithNamed() {
			return GetRuleContext<ExpressionListWithNamedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EsperEPL2GrammarParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EsperEPL2GrammarParser.DISTINCT, 0); }
		public Builtin_avgContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_avg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_avg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_avg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Builtin_avedevContext : BuiltinFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVEDEV() { return GetToken(EsperEPL2GrammarParser.AVEDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListWithNamedContext expressionListWithNamed() {
			return GetRuleContext<ExpressionListWithNamedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EsperEPL2GrammarParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EsperEPL2GrammarParser.DISTINCT, 0); }
		public Builtin_avedevContext(BuiltinFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBuiltin_avedev(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBuiltin_avedev(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_avedev(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinFuncContext builtinFunc() {
		BuiltinFuncContext _localctx = new BuiltinFuncContext(Context, State);
		EnterRule(_localctx, 346, RULE_builtinFunc);
		int _la;
		try {
			State = 2553;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUM:
				_localctx = new Builtin_sumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2396;
				Match(SUM);
				State = 2397;
				Match(LPAREN);
				State = 2399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT || _la==ALL) {
					{
					State = 2398;
					_la = TokenStream.LA(1);
					if ( !(_la==DISTINCT || _la==ALL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2401;
				expressionListWithNamed();
				State = 2402;
				Match(RPAREN);
				}
				break;
			case AVG:
				_localctx = new Builtin_avgContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2404;
				Match(AVG);
				State = 2405;
				Match(LPAREN);
				State = 2407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT || _la==ALL) {
					{
					State = 2406;
					_la = TokenStream.LA(1);
					if ( !(_la==DISTINCT || _la==ALL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2409;
				expressionListWithNamed();
				State = 2410;
				Match(RPAREN);
				}
				break;
			case COUNT:
				_localctx = new Builtin_cntContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2412;
				Match(COUNT);
				State = 2413;
				Match(LPAREN);
				State = 2416;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALL:
					{
					State = 2414;
					((Builtin_cntContext)_localctx).a = Match(ALL);
					}
					break;
				case DISTINCT:
					{
					State = 2415;
					((Builtin_cntContext)_localctx).d = Match(DISTINCT);
					}
					break;
				case WINDOW:
				case BETWEEN:
				case ESCAPE:
				case NOT_EXPR:
				case EVERY_EXPR:
				case WHERE:
				case SUM:
				case AVG:
				case MAX:
				case MIN:
				case COALESCE:
				case MEDIAN:
				case STDDEV:
				case AVEDEV:
				case COUNT:
				case CASE:
				case OUTER:
				case JOIN:
				case LEFT:
				case RIGHT:
				case FULL:
				case EVENTS:
				case FIRST:
				case LAST:
				case ISTREAM:
				case SCHEMA:
				case UNIDIRECTIONAL:
				case RETAINUNION:
				case RETAININTERSECTION:
				case PATTERN:
				case SQL:
				case METADATASQL:
				case PREVIOUS:
				case PREVIOUSTAIL:
				case PREVIOUSCOUNT:
				case PREVIOUSWINDOW:
				case PRIOR:
				case EXISTS:
				case WEEKDAY:
				case LW:
				case INSTANCEOF:
				case TYPEOF:
				case CAST:
				case CURRENT_TIMESTAMP:
				case SNAPSHOT:
				case SET:
				case VARIABLE:
				case TABLE:
				case UNTIL:
				case AT:
				case INDEX:
				case BOOLEAN_TRUE:
				case BOOLEAN_FALSE:
				case VALUE_NULL:
				case DEFINE:
				case PARTITION:
				case MATCHES:
				case AFTER:
				case FOR:
				case WHILE:
				case USING:
				case MERGE:
				case MATCHED:
				case NEWKW:
				case CONTEXT:
				case GROUPING:
				case GROUPING_ID:
				case QUESTION:
				case LPAREN:
				case LBRACK:
				case LCURLY:
				case PLUS:
				case MINUS:
				case STAR:
				case TICKED_STRING_LITERAL:
				case QUOTED_STRING_LITERAL:
				case STRING_LITERAL:
				case IDENT:
				case IntegerLiteral:
				case FloatingPointLiteral:
					break;
				default:
					break;
				}
				State = 2418;
				expressionListWithNamed();
				State = 2419;
				Match(RPAREN);
				}
				break;
			case MEDIAN:
				_localctx = new Builtin_medianContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2421;
				Match(MEDIAN);
				State = 2422;
				Match(LPAREN);
				State = 2424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT || _la==ALL) {
					{
					State = 2423;
					_la = TokenStream.LA(1);
					if ( !(_la==DISTINCT || _la==ALL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2426;
				expressionListWithNamed();
				State = 2427;
				Match(RPAREN);
				}
				break;
			case STDDEV:
				_localctx = new Builtin_stddevContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2429;
				Match(STDDEV);
				State = 2430;
				Match(LPAREN);
				State = 2432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT || _la==ALL) {
					{
					State = 2431;
					_la = TokenStream.LA(1);
					if ( !(_la==DISTINCT || _la==ALL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2434;
				expressionListWithNamed();
				State = 2435;
				Match(RPAREN);
				}
				break;
			case AVEDEV:
				_localctx = new Builtin_avedevContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2437;
				Match(AVEDEV);
				State = 2438;
				Match(LPAREN);
				State = 2440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT || _la==ALL) {
					{
					State = 2439;
					_la = TokenStream.LA(1);
					if ( !(_la==DISTINCT || _la==ALL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2442;
				expressionListWithNamed();
				State = 2443;
				Match(RPAREN);
				}
				break;
			case WINDOW:
			case FIRST:
			case LAST:
				_localctx = new Builtin_firstlastwindowContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2445;
				firstLastWindowAggregation();
				}
				break;
			case COALESCE:
				_localctx = new Builtin_coalesceContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2446;
				Match(COALESCE);
				State = 2447;
				Match(LPAREN);
				State = 2448;
				expression();
				State = 2449;
				Match(COMMA);
				State = 2450;
				expression();
				State = 2455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2451;
					Match(COMMA);
					State = 2452;
					expression();
					}
					}
					State = 2457;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2458;
				Match(RPAREN);
				}
				break;
			case PREVIOUS:
				_localctx = new Builtin_prevContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2460;
				Match(PREVIOUS);
				State = 2461;
				Match(LPAREN);
				State = 2462;
				expression();
				State = 2465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2463;
					Match(COMMA);
					State = 2464;
					expression();
					}
				}

				State = 2467;
				Match(RPAREN);
				State = 2468;
				chainableElements();
				}
				break;
			case PREVIOUSTAIL:
				_localctx = new Builtin_prevtailContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2470;
				Match(PREVIOUSTAIL);
				State = 2471;
				Match(LPAREN);
				State = 2472;
				expression();
				State = 2475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2473;
					Match(COMMA);
					State = 2474;
					expression();
					}
				}

				State = 2477;
				Match(RPAREN);
				State = 2478;
				chainableElements();
				}
				break;
			case PREVIOUSCOUNT:
				_localctx = new Builtin_prevcountContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2480;
				Match(PREVIOUSCOUNT);
				State = 2481;
				Match(LPAREN);
				State = 2482;
				expression();
				State = 2483;
				Match(RPAREN);
				}
				break;
			case PREVIOUSWINDOW:
				_localctx = new Builtin_prevwindowContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2485;
				Match(PREVIOUSWINDOW);
				State = 2486;
				Match(LPAREN);
				State = 2487;
				expression();
				State = 2488;
				Match(RPAREN);
				State = 2489;
				chainableElements();
				}
				break;
			case PRIOR:
				_localctx = new Builtin_priorContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2491;
				Match(PRIOR);
				State = 2492;
				Match(LPAREN);
				State = 2493;
				expression();
				State = 2494;
				Match(COMMA);
				State = 2495;
				chainable();
				State = 2496;
				Match(RPAREN);
				}
				break;
			case GROUPING:
				_localctx = new Builtin_groupingContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2498;
				Match(GROUPING);
				State = 2499;
				Match(LPAREN);
				State = 2500;
				expression();
				State = 2501;
				Match(RPAREN);
				}
				break;
			case GROUPING_ID:
				_localctx = new Builtin_groupingidContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2503;
				Match(GROUPING_ID);
				State = 2504;
				Match(LPAREN);
				State = 2505;
				expressionList();
				State = 2506;
				Match(RPAREN);
				}
				break;
			case INSTANCEOF:
				_localctx = new Builtin_instanceofContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2508;
				Match(INSTANCEOF);
				State = 2509;
				Match(LPAREN);
				State = 2510;
				expression();
				State = 2511;
				Match(COMMA);
				State = 2512;
				classIdentifier();
				State = 2517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2513;
					Match(COMMA);
					State = 2514;
					classIdentifier();
					}
					}
					State = 2519;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2520;
				Match(RPAREN);
				}
				break;
			case TYPEOF:
				_localctx = new Builtin_typeofContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2522;
				Match(TYPEOF);
				State = 2523;
				Match(LPAREN);
				State = 2524;
				expression();
				State = 2525;
				Match(RPAREN);
				}
				break;
			case CAST:
				_localctx = new Builtin_castContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2527;
				Match(CAST);
				State = 2528;
				Match(LPAREN);
				State = 2529;
				expression();
				State = 2530;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==COMMA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2531;
				classIdentifierWithDimensions();
				State = 2534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2532;
					Match(COMMA);
					State = 2533;
					expressionNamedParameter();
					}
				}

				State = 2536;
				Match(RPAREN);
				State = 2537;
				chainableElements();
				}
				break;
			case EXISTS:
				_localctx = new Builtin_existsContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2539;
				Match(EXISTS);
				State = 2540;
				Match(LPAREN);
				State = 2541;
				chainable();
				State = 2542;
				Match(RPAREN);
				}
				break;
			case CURRENT_TIMESTAMP:
				_localctx = new Builtin_currtsContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2544;
				Match(CURRENT_TIMESTAMP);
				State = 2547;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
				case 1:
					{
					State = 2545;
					Match(LPAREN);
					State = 2546;
					Match(RPAREN);
					}
					break;
				}
				State = 2549;
				chainableElements();
				}
				break;
			case ISTREAM:
				_localctx = new Builtin_istreamContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2550;
				Match(ISTREAM);
				State = 2551;
				Match(LPAREN);
				State = 2552;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstLastWindowAggregationContext : ParserRuleContext {
		public IToken q;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableElementsContext chainableElements() {
			return GetRuleContext<ChainableElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(EsperEPL2GrammarParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(EsperEPL2GrammarParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(EsperEPL2GrammarParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListWithNamedContext expressionListWithNamed() {
			return GetRuleContext<ExpressionListWithNamedContext>(0);
		}
		public FirstLastWindowAggregationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstLastWindowAggregation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterFirstLastWindowAggregation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitFirstLastWindowAggregation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstLastWindowAggregation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstLastWindowAggregationContext firstLastWindowAggregation() {
		FirstLastWindowAggregationContext _localctx = new FirstLastWindowAggregationContext(Context, State);
		EnterRule(_localctx, 348, RULE_firstLastWindowAggregation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2558;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FIRST:
				{
				State = 2555;
				_localctx.q = Match(FIRST);
				}
				break;
			case LAST:
				{
				State = 2556;
				_localctx.q = Match(LAST);
				}
				break;
			case WINDOW:
				{
				State = 2557;
				_localctx.q = Match(WINDOW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2560;
			Match(LPAREN);
			State = 2562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 78384562369L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
				{
				State = 2561;
				expressionListWithNamed();
				}
			}

			State = 2564;
			Match(RPAREN);
			State = 2565;
			chainableElements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibFunctionNoClassContext : ParserRuleContext {
		public IToken l;
		[System.Diagnostics.DebuggerNonUserCode] public FuncIdentChainedContext funcIdentChained() {
			return GetRuleContext<FuncIdentChainedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LibFunctionArgsContext libFunctionArgs() {
			return GetRuleContext<LibFunctionArgsContext>(0);
		}
		public LibFunctionNoClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libFunctionNoClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterLibFunctionNoClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitLibFunctionNoClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibFunctionNoClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibFunctionNoClassContext libFunctionNoClass() {
		LibFunctionNoClassContext _localctx = new LibFunctionNoClassContext(Context, State);
		EnterRule(_localctx, 350, RULE_libFunctionNoClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2567;
			funcIdentChained();
			State = 2573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 2568;
				_localctx.l = Match(LPAREN);
				State = 2570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431347076622734188L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 78384562369L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
					{
					State = 2569;
					libFunctionArgs();
					}
				}

				State = 2572;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncIdentChainedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EscapableIdentContext escapableIdent() {
			return GetRuleContext<EscapableIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(EsperEPL2GrammarParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(EsperEPL2GrammarParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(EsperEPL2GrammarParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(EsperEPL2GrammarParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(EsperEPL2GrammarParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(EsperEPL2GrammarParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(EsperEPL2GrammarParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(EsperEPL2GrammarParser.BETWEEN, 0); }
		public FuncIdentChainedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcIdentChained; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterFuncIdentChained(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitFuncIdentChained(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncIdentChained(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncIdentChainedContext funcIdentChained() {
		FuncIdentChainedContext _localctx = new FuncIdentChainedContext(Context, State);
		EnterRule(_localctx, 352, RULE_funcIdentChained);
		try {
			State = 2585;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TICKED_STRING_LITERAL:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2575;
				escapableIdent();
				}
				break;
			case LAST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2576;
				Match(LAST);
				}
				break;
			case FIRST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2577;
				Match(FIRST);
				}
				break;
			case WINDOW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2578;
				Match(WINDOW);
				}
				break;
			case MAX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2579;
				Match(MAX);
				}
				break;
			case MIN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2580;
				Match(MIN);
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2581;
				Match(WHERE);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2582;
				Match(SET);
				}
				break;
			case AFTER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2583;
				Match(AFTER);
				}
				break;
			case BETWEEN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2584;
				Match(BETWEEN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibFunctionArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LibFunctionArgItemContext[] libFunctionArgItem() {
			return GetRuleContexts<LibFunctionArgItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LibFunctionArgItemContext libFunctionArgItem(int i) {
			return GetRuleContext<LibFunctionArgItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(EsperEPL2GrammarParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(EsperEPL2GrammarParser.DISTINCT, 0); }
		public LibFunctionArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libFunctionArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterLibFunctionArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitLibFunctionArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibFunctionArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibFunctionArgsContext libFunctionArgs() {
		LibFunctionArgsContext _localctx = new LibFunctionArgsContext(Context, State);
		EnterRule(_localctx, 354, RULE_libFunctionArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISTINCT || _la==ALL) {
				{
				State = 2587;
				_la = TokenStream.LA(1);
				if ( !(_la==DISTINCT || _la==ALL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2590;
			libFunctionArgItem();
			State = 2595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2591;
				Match(COMMA);
				State = 2592;
				libFunctionArgItem();
				}
				}
				State = 2597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibFunctionArgItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithNamedContext expressionWithNamed() {
			return GetRuleContext<ExpressionWithNamedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionLambdaDeclContext expressionLambdaDecl() {
			return GetRuleContext<ExpressionLambdaDeclContext>(0);
		}
		public LibFunctionArgItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libFunctionArgItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterLibFunctionArgItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitLibFunctionArgItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibFunctionArgItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibFunctionArgItemContext libFunctionArgItem() {
		LibFunctionArgItemContext _localctx = new LibFunctionArgItemContext(Context, State);
		EnterRule(_localctx, 356, RULE_libFunctionArgItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,333,Context) ) {
			case 1:
				{
				State = 2598;
				expressionLambdaDecl();
				}
				break;
			}
			State = 2601;
			expressionWithNamed();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BetweenListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenationExprContext[] concatenationExpr() {
			return GetRuleContexts<ConcatenationExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenationExprContext concatenationExpr(int i) {
			return GetRuleContext<ConcatenationExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_EXPR() { return GetToken(EsperEPL2GrammarParser.AND_EXPR, 0); }
		public BetweenListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_betweenList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterBetweenList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitBetweenList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BetweenListContext betweenList() {
		BetweenListContext _localctx = new BetweenListContext(Context, State);
		EnterRule(_localctx, 358, RULE_betweenList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2603;
			concatenationExpr();
			State = 2604;
			Match(AND_EXPR);
			State = 2605;
			concatenationExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FollowedByExpressionContext followedByExpression() {
			return GetRuleContext<FollowedByExpressionContext>(0);
		}
		public PatternExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterPatternExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitPatternExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternExpressionContext patternExpression() {
		PatternExpressionContext _localctx = new PatternExpressionContext(Context, State);
		EnterRule(_localctx, 360, RULE_patternExpression);
		 paraphrases.Push("pattern expression"); 
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2607;
			followedByExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FollowedByExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FollowedByRepeatContext[] followedByRepeat() {
			return GetRuleContexts<FollowedByRepeatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FollowedByRepeatContext followedByRepeat(int i) {
			return GetRuleContext<FollowedByRepeatContext>(i);
		}
		public FollowedByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_followedByExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterFollowedByExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitFollowedByExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFollowedByExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FollowedByExpressionContext followedByExpression() {
		FollowedByExpressionContext _localctx = new FollowedByExpressionContext(Context, State);
		EnterRule(_localctx, 362, RULE_followedByExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2609;
			orExpression();
			State = 2613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOLLOWMAX_BEGIN || _la==FOLLOWED_BY) {
				{
				{
				State = 2610;
				followedByRepeat();
				}
				}
				State = 2615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FollowedByRepeatContext : ParserRuleContext {
		public IToken f;
		public IToken g;
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWED_BY() { return GetToken(EsperEPL2GrammarParser.FOLLOWED_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(EsperEPL2GrammarParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EsperEPL2GrammarParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWMAX_BEGIN() { return GetToken(EsperEPL2GrammarParser.FOLLOWMAX_BEGIN, 0); }
		public FollowedByRepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_followedByRepeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterFollowedByRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitFollowedByRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFollowedByRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FollowedByRepeatContext followedByRepeat() {
		FollowedByRepeatContext _localctx = new FollowedByRepeatContext(Context, State);
		EnterRule(_localctx, 364, RULE_followedByRepeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2622;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOLLOWED_BY:
				{
				State = 2616;
				_localctx.f = Match(FOLLOWED_BY);
				}
				break;
			case FOLLOWMAX_BEGIN:
				{
				{
				State = 2617;
				_localctx.g = Match(FOLLOWMAX_BEGIN);
				State = 2618;
				expression();
				State = 2619;
				Match(RBRACK);
				State = 2620;
				Match(GT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2624;
			orExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		public IToken o;
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR_EXPR() { return GetTokens(EsperEPL2GrammarParser.OR_EXPR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_EXPR(int i) {
			return GetToken(EsperEPL2GrammarParser.OR_EXPR, i);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		OrExpressionContext _localctx = new OrExpressionContext(Context, State);
		EnterRule(_localctx, 366, RULE_orExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2626;
			andExpression();
			State = 2631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR_EXPR) {
				{
				{
				State = 2627;
				_localctx.o = Match(OR_EXPR);
				State = 2628;
				andExpression();
				}
				}
				State = 2633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public IToken a;
		[System.Diagnostics.DebuggerNonUserCode] public MatchUntilExpressionContext[] matchUntilExpression() {
			return GetRuleContexts<MatchUntilExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchUntilExpressionContext matchUntilExpression(int i) {
			return GetRuleContext<MatchUntilExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND_EXPR() { return GetTokens(EsperEPL2GrammarParser.AND_EXPR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_EXPR(int i) {
			return GetToken(EsperEPL2GrammarParser.AND_EXPR, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 368, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2634;
			matchUntilExpression();
			State = 2639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND_EXPR) {
				{
				{
				State = 2635;
				_localctx.a = Match(AND_EXPR);
				State = 2636;
				matchUntilExpression();
				}
				}
				State = 2641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchUntilExpressionContext : ParserRuleContext {
		public MatchUntilRangeContext r;
		public QualifyExpressionContext until;
		[System.Diagnostics.DebuggerNonUserCode] public QualifyExpressionContext[] qualifyExpression() {
			return GetRuleContexts<QualifyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifyExpressionContext qualifyExpression(int i) {
			return GetRuleContext<QualifyExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(EsperEPL2GrammarParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MatchUntilRangeContext matchUntilRange() {
			return GetRuleContext<MatchUntilRangeContext>(0);
		}
		public MatchUntilExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchUntilExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchUntilExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchUntilExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchUntilExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchUntilExpressionContext matchUntilExpression() {
		MatchUntilExpressionContext _localctx = new MatchUntilExpressionContext(Context, State);
		EnterRule(_localctx, 370, RULE_matchUntilExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 2642;
				_localctx.r = matchUntilRange();
				}
			}

			State = 2645;
			qualifyExpression();
			State = 2648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL) {
				{
				State = 2646;
				Match(UNTIL);
				State = 2647;
				_localctx.until = qualifyExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifyExpressionContext : ParserRuleContext {
		public IToken e;
		public IToken n;
		public IToken d;
		[System.Diagnostics.DebuggerNonUserCode] public GuardPostFixContext guardPostFix() {
			return GetRuleContext<GuardPostFixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DistinctExpressionListContext distinctExpressionList() {
			return GetRuleContext<DistinctExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_EXPR() { return GetToken(EsperEPL2GrammarParser.EVERY_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EXPR() { return GetToken(EsperEPL2GrammarParser.NOT_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_DISTINCT_EXPR() { return GetToken(EsperEPL2GrammarParser.EVERY_DISTINCT_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MatchUntilRangeContext matchUntilRange() {
			return GetRuleContext<MatchUntilRangeContext>(0);
		}
		public QualifyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterQualifyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitQualifyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifyExpressionContext qualifyExpression() {
		QualifyExpressionContext _localctx = new QualifyExpressionContext(Context, State);
		EnterRule(_localctx, 372, RULE_qualifyExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2659;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7168L) != 0)) {
				{
				State = 2654;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EVERY_EXPR:
					{
					State = 2650;
					_localctx.e = Match(EVERY_EXPR);
					}
					break;
				case NOT_EXPR:
					{
					State = 2651;
					_localctx.n = Match(NOT_EXPR);
					}
					break;
				case EVERY_DISTINCT_EXPR:
					{
					State = 2652;
					_localctx.d = Match(EVERY_DISTINCT_EXPR);
					State = 2653;
					distinctExpressionList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2657;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACK) {
					{
					State = 2656;
					matchUntilRange();
					}
				}

				}
			}

			State = 2661;
			guardPostFix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardPostFixContext : ParserRuleContext {
		public IToken l;
		public IToken wh;
		public IToken wi;
		[System.Diagnostics.DebuggerNonUserCode] public AtomicExpressionContext atomicExpression() {
			return GetRuleContext<AtomicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternExpressionContext patternExpression() {
			return GetRuleContext<PatternExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GuardWhereExpressionContext guardWhereExpression() {
			return GetRuleContext<GuardWhereExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GuardWhileExpressionContext guardWhileExpression() {
			return GetRuleContext<GuardWhileExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(EsperEPL2GrammarParser.WHILE, 0); }
		public GuardPostFixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guardPostFix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGuardPostFix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGuardPostFix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuardPostFix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuardPostFixContext guardPostFix() {
		GuardPostFixContext _localctx = new GuardPostFixContext(Context, State);
		EnterRule(_localctx, 374, RULE_guardPostFix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2668;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENTS:
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 2663;
				atomicExpression();
				}
				break;
			case LPAREN:
				{
				State = 2664;
				_localctx.l = Match(LPAREN);
				State = 2665;
				patternExpression();
				State = 2666;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2674;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				{
				{
				State = 2670;
				_localctx.wh = Match(WHERE);
				State = 2671;
				guardWhereExpression();
				}
				}
				break;
			case WHILE:
				{
				{
				State = 2672;
				_localctx.wi = Match(WHILE);
				State = 2673;
				guardWhileExpression();
				}
				}
				break;
			case OR_EXPR:
			case AND_EXPR:
			case UNTIL:
			case FOLLOWMAX_BEGIN:
			case FOLLOWED_BY:
			case RPAREN:
			case RBRACK:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistinctExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DistinctExpressionAtomContext[] distinctExpressionAtom() {
			return GetRuleContexts<DistinctExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DistinctExpressionAtomContext distinctExpressionAtom(int i) {
			return GetRuleContext<DistinctExpressionAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public DistinctExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distinctExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterDistinctExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitDistinctExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistinctExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistinctExpressionListContext distinctExpressionList() {
		DistinctExpressionListContext _localctx = new DistinctExpressionListContext(Context, State);
		EnterRule(_localctx, 376, RULE_distinctExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2676;
			Match(LPAREN);
			State = 2677;
			distinctExpressionAtom();
			State = 2682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2678;
				Match(COMMA);
				State = 2679;
				distinctExpressionAtom();
				}
				}
				State = 2684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2685;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistinctExpressionAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTimeContext expressionWithTime() {
			return GetRuleContext<ExpressionWithTimeContext>(0);
		}
		public DistinctExpressionAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distinctExpressionAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterDistinctExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitDistinctExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistinctExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistinctExpressionAtomContext distinctExpressionAtom() {
		DistinctExpressionAtomContext _localctx = new DistinctExpressionAtomContext(Context, State);
		EnterRule(_localctx, 378, RULE_distinctExpressionAtom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2687;
			expressionWithTime();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObserverExpressionContext observerExpression() {
			return GetRuleContext<ObserverExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternFilterExpressionContext patternFilterExpression() {
			return GetRuleContext<PatternFilterExpressionContext>(0);
		}
		public AtomicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterAtomicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitAtomicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicExpressionContext atomicExpression() {
		AtomicExpressionContext _localctx = new AtomicExpressionContext(Context, State);
		EnterRule(_localctx, 380, RULE_atomicExpression);
		try {
			State = 2691;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2689;
				observerExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2690;
				patternFilterExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObserverExpressionContext : ParserRuleContext {
		public IToken ns;
		public IToken nm;
		public IToken a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(EsperEPL2GrammarParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListWithNamedWithTimeContext expressionListWithNamedWithTime() {
			return GetRuleContext<ExpressionListWithNamedWithTimeContext>(0);
		}
		public ObserverExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_observerExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterObserverExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitObserverExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObserverExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObserverExpressionContext observerExpression() {
		ObserverExpressionContext _localctx = new ObserverExpressionContext(Context, State);
		EnterRule(_localctx, 382, RULE_observerExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2693;
			_localctx.ns = Match(IDENT);
			State = 2694;
			Match(COLON);
			State = 2697;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 2695;
				_localctx.nm = Match(IDENT);
				}
				break;
			case AT:
				{
				State = 2696;
				_localctx.a = Match(AT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2699;
			Match(LPAREN);
			State = 2701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 78384562369L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
				{
				State = 2700;
				expressionListWithNamedWithTime();
				}
			}

			State = 2703;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardWhereExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTimeListContext expressionWithTimeList() {
			return GetRuleContext<ExpressionWithTimeListContext>(0);
		}
		public GuardWhereExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guardWhereExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGuardWhereExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGuardWhereExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuardWhereExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuardWhereExpressionContext guardWhereExpression() {
		GuardWhereExpressionContext _localctx = new GuardWhereExpressionContext(Context, State);
		EnterRule(_localctx, 384, RULE_guardWhereExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2705;
			Match(IDENT);
			State = 2706;
			Match(COLON);
			State = 2707;
			Match(IDENT);
			State = 2708;
			Match(LPAREN);
			State = 2710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 78384562369L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
				{
				State = 2709;
				expressionWithTimeList();
				}
			}

			State = 2712;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardWhileExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public GuardWhileExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guardWhileExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterGuardWhileExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitGuardWhileExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuardWhileExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuardWhileExpressionContext guardWhileExpression() {
		GuardWhileExpressionContext _localctx = new GuardWhileExpressionContext(Context, State);
		EnterRule(_localctx, 386, RULE_guardWhileExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2714;
			Match(LPAREN);
			State = 2715;
			expression();
			State = 2716;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchUntilRangeContext : ParserRuleContext {
		public ExpressionContext low;
		public IToken c1;
		public ExpressionContext high;
		public IToken c2;
		public ExpressionContext upper;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(EsperEPL2GrammarParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(EsperEPL2GrammarParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		public MatchUntilRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchUntilRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMatchUntilRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMatchUntilRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchUntilRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchUntilRangeContext matchUntilRange() {
		MatchUntilRangeContext _localctx = new MatchUntilRangeContext(Context, State);
		EnterRule(_localctx, 388, RULE_matchUntilRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2718;
			Match(LBRACK);
			State = 2728;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WINDOW:
			case BETWEEN:
			case ESCAPE:
			case NOT_EXPR:
			case EVERY_EXPR:
			case WHERE:
			case SUM:
			case AVG:
			case MAX:
			case MIN:
			case COALESCE:
			case MEDIAN:
			case STDDEV:
			case AVEDEV:
			case COUNT:
			case CASE:
			case OUTER:
			case JOIN:
			case LEFT:
			case RIGHT:
			case FULL:
			case EVENTS:
			case FIRST:
			case LAST:
			case ISTREAM:
			case SCHEMA:
			case UNIDIRECTIONAL:
			case RETAINUNION:
			case RETAININTERSECTION:
			case PATTERN:
			case SQL:
			case METADATASQL:
			case PREVIOUS:
			case PREVIOUSTAIL:
			case PREVIOUSCOUNT:
			case PREVIOUSWINDOW:
			case PRIOR:
			case EXISTS:
			case WEEKDAY:
			case LW:
			case INSTANCEOF:
			case TYPEOF:
			case CAST:
			case CURRENT_TIMESTAMP:
			case SNAPSHOT:
			case SET:
			case VARIABLE:
			case TABLE:
			case UNTIL:
			case AT:
			case INDEX:
			case BOOLEAN_TRUE:
			case BOOLEAN_FALSE:
			case VALUE_NULL:
			case DEFINE:
			case PARTITION:
			case MATCHES:
			case AFTER:
			case FOR:
			case WHILE:
			case USING:
			case MERGE:
			case MATCHED:
			case NEWKW:
			case CONTEXT:
			case GROUPING:
			case GROUPING_ID:
			case QUESTION:
			case LPAREN:
			case LCURLY:
			case PLUS:
			case MINUS:
			case TICKED_STRING_LITERAL:
			case QUOTED_STRING_LITERAL:
			case STRING_LITERAL:
			case IDENT:
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 2719;
				_localctx.low = expression();
				State = 2724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 2720;
					_localctx.c1 = Match(COLON);
					State = 2722;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
						{
						State = 2721;
						_localctx.high = expression();
						}
					}

					}
				}

				}
				break;
			case COLON:
				{
				State = 2726;
				_localctx.c2 = Match(COLON);
				State = 2727;
				_localctx.upper = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2730;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventFilterExpressionContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(EsperEPL2GrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionContext propertyExpression() {
			return GetRuleContext<PropertyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public EventFilterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventFilterExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterEventFilterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitEventFilterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventFilterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventFilterExpressionContext eventFilterExpression() {
		EventFilterExpressionContext _localctx = new EventFilterExpressionContext(Context, State);
		EnterRule(_localctx, 390, RULE_eventFilterExpression);
		 paraphrases.Push("filter specification"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,353,Context) ) {
			case 1:
				{
				State = 2732;
				_localctx.i = Match(IDENT);
				State = 2733;
				Match(EQUALS);
				}
				break;
			}
			State = 2736;
			classIdentifier();
			State = 2742;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 2737;
				Match(LPAREN);
				State = 2739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
					{
					State = 2738;
					expressionList();
					}
				}

				State = 2741;
				Match(RPAREN);
				}
			}

			State = 2745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 2744;
				propertyExpression();
				}
			}

			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionAtomicContext[] propertyExpressionAtomic() {
			return GetRuleContexts<PropertyExpressionAtomicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionAtomicContext propertyExpressionAtomic(int i) {
			return GetRuleContext<PropertyExpressionAtomicContext>(i);
		}
		public PropertyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterPropertyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitPropertyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyExpressionContext propertyExpression() {
		PropertyExpressionContext _localctx = new PropertyExpressionContext(Context, State);
		EnterRule(_localctx, 392, RULE_propertyExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2747;
			propertyExpressionAtomic();
			State = 2751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 2748;
				propertyExpressionAtomic();
				}
				}
				State = 2753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyExpressionAtomicContext : ParserRuleContext {
		public IToken n;
		public ExpressionContext where;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(EsperEPL2GrammarParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(EsperEPL2GrammarParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionSelectContext propertyExpressionSelect() {
			return GetRuleContext<PropertyExpressionSelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeExpressionAnnotationContext typeExpressionAnnotation() {
			return GetRuleContext<TypeExpressionAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public PropertyExpressionAtomicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyExpressionAtomic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterPropertyExpressionAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitPropertyExpressionAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAtomic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyExpressionAtomicContext propertyExpressionAtomic() {
		PropertyExpressionAtomicContext _localctx = new PropertyExpressionAtomicContext(Context, State);
		EnterRule(_localctx, 394, RULE_propertyExpressionAtomic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2754;
			Match(LBRACK);
			State = 2756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SELECT) {
				{
				State = 2755;
				propertyExpressionSelect();
				}
			}

			State = 2758;
			expression();
			State = 2760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATCHAR) {
				{
				State = 2759;
				typeExpressionAnnotation();
				}
			}

			State = 2764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2762;
				Match(AS);
				State = 2763;
				_localctx.n = Match(IDENT);
				}
			}

			State = 2768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2766;
				Match(WHERE);
				State = 2767;
				_localctx.where = expression();
				}
			}

			State = 2770;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyExpressionSelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(EsperEPL2GrammarParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertySelectionListContext propertySelectionList() {
			return GetRuleContext<PropertySelectionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(EsperEPL2GrammarParser.FROM, 0); }
		public PropertyExpressionSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyExpressionSelect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterPropertyExpressionSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitPropertyExpressionSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyExpressionSelectContext propertyExpressionSelect() {
		PropertyExpressionSelectContext _localctx = new PropertyExpressionSelectContext(Context, State);
		EnterRule(_localctx, 396, RULE_propertyExpressionSelect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2772;
			Match(SELECT);
			State = 2773;
			propertySelectionList();
			State = 2774;
			Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySelectionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertySelectionListElementContext[] propertySelectionListElement() {
			return GetRuleContexts<PropertySelectionListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySelectionListElementContext propertySelectionListElement(int i) {
			return GetRuleContext<PropertySelectionListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public PropertySelectionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySelectionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterPropertySelectionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitPropertySelectionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySelectionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySelectionListContext propertySelectionList() {
		PropertySelectionListContext _localctx = new PropertySelectionListContext(Context, State);
		EnterRule(_localctx, 398, RULE_propertySelectionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2776;
			propertySelectionListElement();
			State = 2781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2777;
				Match(COMMA);
				State = 2778;
				propertySelectionListElement();
				}
				}
				State = 2783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySelectionListElementContext : ParserRuleContext {
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(EsperEPL2GrammarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyStreamSelectorContext propertyStreamSelector() {
			return GetRuleContext<PropertyStreamSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext keywordAllowedIdent() {
			return GetRuleContext<KeywordAllowedIdentContext>(0);
		}
		public PropertySelectionListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySelectionListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterPropertySelectionListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitPropertySelectionListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySelectionListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySelectionListElementContext propertySelectionListElement() {
		PropertySelectionListElementContext _localctx = new PropertySelectionListElementContext(Context, State);
		EnterRule(_localctx, 400, RULE_propertySelectionListElement);
		int _la;
		try {
			State = 2791;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2784;
				_localctx.s = Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2785;
				propertyStreamSelector();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2786;
				expression();
				State = 2789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 2787;
					Match(AS);
					State = 2788;
					keywordAllowedIdent();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyStreamSelectorContext : ParserRuleContext {
		public IToken s;
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(EsperEPL2GrammarParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(EsperEPL2GrammarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EsperEPL2GrammarParser.AS, 0); }
		public PropertyStreamSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyStreamSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterPropertyStreamSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitPropertyStreamSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyStreamSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyStreamSelectorContext propertyStreamSelector() {
		PropertyStreamSelectorContext _localctx = new PropertyStreamSelectorContext(Context, State);
		EnterRule(_localctx, 402, RULE_propertyStreamSelector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2793;
			_localctx.s = Match(IDENT);
			State = 2794;
			Match(DOT);
			State = 2795;
			Match(STAR);
			State = 2798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2796;
				Match(AS);
				State = 2797;
				_localctx.i = Match(IDENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExpressionAnnotationContext : ParserRuleContext {
		public IToken n;
		public IToken v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATCHAR() { return GetToken(EsperEPL2GrammarParser.ATCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public TypeExpressionAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExpressionAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterTypeExpressionAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitTypeExpressionAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExpressionAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeExpressionAnnotationContext typeExpressionAnnotation() {
		TypeExpressionAnnotationContext _localctx = new TypeExpressionAnnotationContext(Context, State);
		EnterRule(_localctx, 404, RULE_typeExpressionAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2800;
			Match(ATCHAR);
			State = 2801;
			_localctx.n = Match(IDENT);
			{
			State = 2802;
			Match(LPAREN);
			State = 2803;
			_localctx.v = Match(IDENT);
			State = 2804;
			Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternFilterExpressionContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(EsperEPL2GrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionContext propertyExpression() {
			return GetRuleContext<PropertyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternFilterAnnotationContext patternFilterAnnotation() {
			return GetRuleContext<PatternFilterAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public PatternFilterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternFilterExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterPatternFilterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitPatternFilterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternFilterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternFilterExpressionContext patternFilterExpression() {
		PatternFilterExpressionContext _localctx = new PatternFilterExpressionContext(Context, State);
		EnterRule(_localctx, 406, RULE_patternFilterExpression);
		 paraphrases.Push("filter specification"); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2808;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
			case 1:
				{
				State = 2806;
				_localctx.i = Match(IDENT);
				State = 2807;
				Match(EQUALS);
				}
				break;
			}
			State = 2810;
			classIdentifier();
			State = 2816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 2811;
				Match(LPAREN);
				State = 2813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
					{
					State = 2812;
					expressionList();
					}
				}

				State = 2815;
				Match(RPAREN);
				}
			}

			State = 2819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 2818;
				propertyExpression();
				}
			}

			State = 2822;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATCHAR) {
				{
				State = 2821;
				patternFilterAnnotation();
				}
			}

			}
			Context.Stop = TokenStream.LT(-1);
			 paraphrases.Pop(); 
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternFilterAnnotationContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATCHAR() { return GetToken(EsperEPL2GrammarParser.ATCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		public PatternFilterAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternFilterAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterPatternFilterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitPatternFilterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternFilterAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternFilterAnnotationContext patternFilterAnnotation() {
		PatternFilterAnnotationContext _localctx = new PatternFilterAnnotationContext(Context, State);
		EnterRule(_localctx, 408, RULE_patternFilterAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2824;
			Match(ATCHAR);
			State = 2825;
			_localctx.i = Match(IDENT);
			State = 2830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 2826;
				Match(LPAREN);
				State = 2827;
				number();
				State = 2828;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassIdentifierNoDimensionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ClassIdentifierNoDimensionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classIdentifierNoDimensions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterClassIdentifierNoDimensions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitClassIdentifierNoDimensions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassIdentifierNoDimensions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassIdentifierNoDimensionsContext classIdentifierNoDimensions() {
		ClassIdentifierNoDimensionsContext _localctx = new ClassIdentifierNoDimensionsContext(Context, State);
		EnterRule(_localctx, 410, RULE_classIdentifierNoDimensions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2832;
			classIdentifier();
			State = 2834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2833;
				typeParameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassIdentifierWithDimensionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier() {
			return GetRuleContext<ClassIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionsContext[] dimensions() {
			return GetRuleContexts<DimensionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionsContext dimensions(int i) {
			return GetRuleContext<DimensionsContext>(i);
		}
		public ClassIdentifierWithDimensionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classIdentifierWithDimensions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterClassIdentifierWithDimensions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitClassIdentifierWithDimensions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassIdentifierWithDimensions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassIdentifierWithDimensionsContext classIdentifierWithDimensions() {
		ClassIdentifierWithDimensionsContext _localctx = new ClassIdentifierWithDimensionsContext(Context, State);
		EnterRule(_localctx, 412, RULE_classIdentifierWithDimensions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2836;
			classIdentifier();
			State = 2838;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,373,Context) ) {
			case 1:
				{
				State = 2837;
				typeParameters();
				}
				break;
			}
			State = 2843;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,374,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2840;
					dimensions();
					}
					} 
				}
				State = 2845;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,374,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EsperEPL2GrammarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierWithDimensionsContext[] classIdentifierWithDimensions() {
			return GetRuleContexts<ClassIdentifierWithDimensionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierWithDimensionsContext classIdentifierWithDimensions(int i) {
			return GetRuleContext<ClassIdentifierWithDimensionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EsperEPL2GrammarParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 414, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2846;
			Match(LT);
			State = 2847;
			classIdentifierWithDimensions();
			State = 2852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2848;
				Match(COMMA);
				State = 2849;
				classIdentifierWithDimensions();
				}
				}
				State = 2854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2855;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionsContext : ParserRuleContext {
		public IToken p;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(EsperEPL2GrammarParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(EsperEPL2GrammarParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public DimensionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterDimensions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitDimensions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensionsContext dimensions() {
		DimensionsContext _localctx = new DimensionsContext(Context, State);
		EnterRule(_localctx, 416, RULE_dimensions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2857;
			Match(LBRACK);
			State = 2859;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 2858;
				_localctx.p = Match(IDENT);
				}
			}

			State = 2861;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassIdentifierContext : ParserRuleContext {
		public EscapableStrContext i1;
		public EscapableStrContext i2;
		[System.Diagnostics.DebuggerNonUserCode] public EscapableStrContext[] escapableStr() {
			return GetRuleContexts<EscapableStrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EscapableStrContext escapableStr(int i) {
			return GetRuleContext<EscapableStrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(EsperEPL2GrammarParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(EsperEPL2GrammarParser.DOT, i);
		}
		public ClassIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterClassIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitClassIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassIdentifierContext classIdentifier() {
		ClassIdentifierContext _localctx = new ClassIdentifierContext(Context, State);
		EnterRule(_localctx, 418, RULE_classIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2863;
			_localctx.i1 = escapableStr();
			State = 2868;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,377,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2864;
					Match(DOT);
					State = 2865;
					_localctx.i2 = escapableStr();
					}
					} 
				}
				State = 2870;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,377,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassIdentifierGenericArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EsperEPL2GrammarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierGenericArgsListContext classIdentifierGenericArgsList() {
			return GetRuleContext<ClassIdentifierGenericArgsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EsperEPL2GrammarParser.GT, 0); }
		public ClassIdentifierGenericArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classIdentifierGenericArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterClassIdentifierGenericArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitClassIdentifierGenericArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassIdentifierGenericArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassIdentifierGenericArgsContext classIdentifierGenericArgs() {
		ClassIdentifierGenericArgsContext _localctx = new ClassIdentifierGenericArgsContext(Context, State);
		EnterRule(_localctx, 420, RULE_classIdentifierGenericArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2871;
			Match(LT);
			State = 2872;
			classIdentifierGenericArgsList();
			State = 2873;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassIdentifierGenericArgsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext[] classIdentifier() {
			return GetRuleContexts<ClassIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierContext classIdentifier(int i) {
			return GetRuleContext<ClassIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public ClassIdentifierGenericArgsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classIdentifierGenericArgsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterClassIdentifierGenericArgsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitClassIdentifierGenericArgsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassIdentifierGenericArgsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassIdentifierGenericArgsListContext classIdentifierGenericArgsList() {
		ClassIdentifierGenericArgsListContext _localctx = new ClassIdentifierGenericArgsListContext(Context, State);
		EnterRule(_localctx, 422, RULE_classIdentifierGenericArgsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2875;
			classIdentifier();
			State = 2880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2876;
				Match(COMMA);
				State = 2877;
				classIdentifier();
				}
				}
				State = 2882;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListWithNamedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithNamedContext[] expressionWithNamed() {
			return GetRuleContexts<ExpressionWithNamedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithNamedContext expressionWithNamed(int i) {
			return GetRuleContext<ExpressionWithNamedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public ExpressionListWithNamedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionListWithNamed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionListWithNamed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionListWithNamed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionListWithNamed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListWithNamedContext expressionListWithNamed() {
		ExpressionListWithNamedContext _localctx = new ExpressionListWithNamedContext(Context, State);
		EnterRule(_localctx, 424, RULE_expressionListWithNamed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2883;
			expressionWithNamed();
			State = 2888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2884;
				Match(COMMA);
				State = 2885;
				expressionWithNamed();
				}
				}
				State = 2890;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListWithNamedWithTimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithNamedWithTimeContext[] expressionWithNamedWithTime() {
			return GetRuleContexts<ExpressionWithNamedWithTimeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithNamedWithTimeContext expressionWithNamedWithTime(int i) {
			return GetRuleContext<ExpressionWithNamedWithTimeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public ExpressionListWithNamedWithTimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionListWithNamedWithTime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionListWithNamedWithTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionListWithNamedWithTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionListWithNamedWithTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListWithNamedWithTimeContext expressionListWithNamedWithTime() {
		ExpressionListWithNamedWithTimeContext _localctx = new ExpressionListWithNamedWithTimeContext(Context, State);
		EnterRule(_localctx, 426, RULE_expressionListWithNamedWithTime);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2891;
			expressionWithNamedWithTime();
			State = 2896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2892;
				Match(COMMA);
				State = 2893;
				expressionWithNamedWithTime();
				}
				}
				State = 2898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionWithNamedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNamedParameterContext expressionNamedParameter() {
			return GetRuleContext<ExpressionNamedParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTimeContext expressionWithTime() {
			return GetRuleContext<ExpressionWithTimeContext>(0);
		}
		public ExpressionWithNamedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionWithNamed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionWithNamed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionWithNamed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionWithNamed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionWithNamedContext expressionWithNamed() {
		ExpressionWithNamedContext _localctx = new ExpressionWithNamedContext(Context, State);
		EnterRule(_localctx, 428, RULE_expressionWithNamed);
		try {
			State = 2901;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2899;
				expressionNamedParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2900;
				expressionWithTime();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionWithNamedWithTimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionNamedParameterWithTimeContext expressionNamedParameterWithTime() {
			return GetRuleContext<ExpressionNamedParameterWithTimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTimeInclLastContext expressionWithTimeInclLast() {
			return GetRuleContext<ExpressionWithTimeInclLastContext>(0);
		}
		public ExpressionWithNamedWithTimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionWithNamedWithTime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionWithNamedWithTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionWithNamedWithTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionWithNamedWithTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionWithNamedWithTimeContext expressionWithNamedWithTime() {
		ExpressionWithNamedWithTimeContext _localctx = new ExpressionWithNamedWithTimeContext(Context, State);
		EnterRule(_localctx, 430, RULE_expressionWithNamedWithTime);
		try {
			State = 2905;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2903;
				expressionNamedParameterWithTime();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2904;
				expressionWithTimeInclLast();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionNamedParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ExpressionNamedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionNamedParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionNamedParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionNamedParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionNamedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionNamedParameterContext expressionNamedParameter() {
		ExpressionNamedParameterContext _localctx = new ExpressionNamedParameterContext(Context, State);
		EnterRule(_localctx, 432, RULE_expressionNamedParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2907;
			Match(IDENT);
			State = 2908;
			Match(COLON);
			State = 2915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
			case 1:
				{
				State = 2909;
				expression();
				}
				break;
			case 2:
				{
				State = 2910;
				Match(LPAREN);
				State = 2912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 9664823489L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
					{
					State = 2911;
					expressionList();
					}
				}

				State = 2914;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionNamedParameterWithTimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTimeContext expressionWithTime() {
			return GetRuleContext<ExpressionWithTimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTimeListContext expressionWithTimeList() {
			return GetRuleContext<ExpressionWithTimeListContext>(0);
		}
		public ExpressionNamedParameterWithTimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionNamedParameterWithTime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionNamedParameterWithTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionNamedParameterWithTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionNamedParameterWithTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionNamedParameterWithTimeContext expressionNamedParameterWithTime() {
		ExpressionNamedParameterWithTimeContext _localctx = new ExpressionNamedParameterWithTimeContext(Context, State);
		EnterRule(_localctx, 434, RULE_expressionNamedParameterWithTime);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2917;
			Match(IDENT);
			State = 2918;
			Match(COLON);
			State = 2925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
			case 1:
				{
				State = 2919;
				expressionWithTime();
				}
				break;
			case 2:
				{
				State = 2920;
				Match(LPAREN);
				State = 2922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431360270762267500L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 78384562369L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
					{
					State = 2921;
					expressionWithTimeList();
					}
				}

				State = 2924;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 436, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2927;
			expression();
			State = 2932;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2928;
				Match(COMMA);
				State = 2929;
				expression();
				}
				}
				State = 2934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionWithTimeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTimeInclLastContext[] expressionWithTimeInclLast() {
			return GetRuleContexts<ExpressionWithTimeInclLastContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTimeInclLastContext expressionWithTimeInclLast(int i) {
			return GetRuleContext<ExpressionWithTimeInclLastContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public ExpressionWithTimeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionWithTimeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionWithTimeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionWithTimeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionWithTimeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionWithTimeListContext expressionWithTimeList() {
		ExpressionWithTimeListContext _localctx = new ExpressionWithTimeListContext(Context, State);
		EnterRule(_localctx, 438, RULE_expressionWithTimeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2935;
			expressionWithTimeInclLast();
			State = 2940;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2936;
				Match(COMMA);
				State = 2937;
				expressionWithTimeInclLast();
				}
				}
				State = 2942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionWithTimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LastWeekdayOperandContext lastWeekdayOperand() {
			return GetRuleContext<LastWeekdayOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimePeriodContext timePeriod() {
			return GetRuleContext<TimePeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionQualifyableContext expressionQualifyable() {
			return GetRuleContext<ExpressionQualifyableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeOperandContext rangeOperand() {
			return GetRuleContext<RangeOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequencyOperandContext frequencyOperand() {
			return GetRuleContext<FrequencyOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LastOperatorContext lastOperator() {
			return GetRuleContext<LastOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeekDayOperatorContext weekDayOperator() {
			return GetRuleContext<WeekDayOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericParameterListContext numericParameterList() {
			return GetRuleContext<NumericParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(EsperEPL2GrammarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyStreamSelectorContext propertyStreamSelector() {
			return GetRuleContext<PropertyStreamSelectorContext>(0);
		}
		public ExpressionWithTimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionWithTime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionWithTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionWithTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionWithTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionWithTimeContext expressionWithTime() {
		ExpressionWithTimeContext _localctx = new ExpressionWithTimeContext(Context, State);
		EnterRule(_localctx, 440, RULE_expressionWithTime);
		try {
			State = 2953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,389,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2943;
				lastWeekdayOperand();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2944;
				timePeriod();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2945;
				expressionQualifyable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2946;
				rangeOperand();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2947;
				frequencyOperand();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2948;
				lastOperator();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2949;
				weekDayOperator();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2950;
				numericParameterList();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2951;
				Match(STAR);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2952;
				propertyStreamSelector();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionWithTimeInclLastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LastOperandContext lastOperand() {
			return GetRuleContext<LastOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTimeContext expressionWithTime() {
			return GetRuleContext<ExpressionWithTimeContext>(0);
		}
		public ExpressionWithTimeInclLastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionWithTimeInclLast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionWithTimeInclLast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionWithTimeInclLast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionWithTimeInclLast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionWithTimeInclLastContext expressionWithTimeInclLast() {
		ExpressionWithTimeInclLastContext _localctx = new ExpressionWithTimeInclLastContext(Context, State);
		EnterRule(_localctx, 442, RULE_expressionWithTimeInclLast);
		try {
			State = 2957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,390,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2955;
				lastOperand();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2956;
				expressionWithTime();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionQualifyableContext : ParserRuleContext {
		public IToken a;
		public IToken d;
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(EsperEPL2GrammarParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(EsperEPL2GrammarParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_SECONDS() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_SECOND() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_SEC() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_SEC, 0); }
		public ExpressionQualifyableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionQualifyable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterExpressionQualifyable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitExpressionQualifyable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionQualifyable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionQualifyableContext expressionQualifyable() {
		ExpressionQualifyableContext _localctx = new ExpressionQualifyableContext(Context, State);
		EnterRule(_localctx, 444, RULE_expressionQualifyable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2959;
			expression();
			State = 2965;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASC:
				{
				State = 2960;
				_localctx.a = Match(ASC);
				}
				break;
			case DESC:
				{
				State = 2961;
				_localctx.d = Match(DESC);
				}
				break;
			case TIMEPERIOD_SECONDS:
				{
				State = 2962;
				_localctx.s = Match(TIMEPERIOD_SECONDS);
				}
				break;
			case TIMEPERIOD_SECOND:
				{
				State = 2963;
				_localctx.s = Match(TIMEPERIOD_SECOND);
				}
				break;
			case TIMEPERIOD_SEC:
				{
				State = 2964;
				_localctx.s = Match(TIMEPERIOD_SEC);
				}
				break;
			case RPAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastWeekdayOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LW() { return GetToken(EsperEPL2GrammarParser.LW, 0); }
		public LastWeekdayOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastWeekdayOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterLastWeekdayOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitLastWeekdayOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastWeekdayOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastWeekdayOperandContext lastWeekdayOperand() {
		LastWeekdayOperandContext _localctx = new LastWeekdayOperandContext(Context, State);
		EnterRule(_localctx, 446, RULE_lastWeekdayOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2967;
			Match(LW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(EsperEPL2GrammarParser.LAST, 0); }
		public LastOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterLastOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitLastOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastOperandContext lastOperand() {
		LastOperandContext _localctx = new LastOperandContext(Context, State);
		EnterRule(_localctx, 448, RULE_lastOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2969;
			Match(LAST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrequencyOperandContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(EsperEPL2GrammarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(EsperEPL2GrammarParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public FrequencyOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frequencyOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterFrequencyOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitFrequencyOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrequencyOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrequencyOperandContext frequencyOperand() {
		FrequencyOperandContext _localctx = new FrequencyOperandContext(Context, State);
		EnterRule(_localctx, 450, RULE_frequencyOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2971;
			Match(STAR);
			State = 2972;
			Match(DIV);
			State = 2976;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 2973;
				number();
				}
				break;
			case IDENT:
				{
				State = 2974;
				_localctx.i = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 2975;
				substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeOperandContext : ParserRuleContext {
		public NumberContext n1;
		public IToken i1;
		public SubstitutionContext s1;
		public NumberContext n2;
		public IToken i2;
		public SubstitutionContext s2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(EsperEPL2GrammarParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(EsperEPL2GrammarParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext[] substitution() {
			return GetRuleContexts<SubstitutionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution(int i) {
			return GetRuleContext<SubstitutionContext>(i);
		}
		public RangeOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterRangeOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitRangeOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeOperandContext rangeOperand() {
		RangeOperandContext _localctx = new RangeOperandContext(Context, State);
		EnterRule(_localctx, 452, RULE_rangeOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2981;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 2978;
				_localctx.n1 = number();
				}
				break;
			case IDENT:
				{
				State = 2979;
				_localctx.i1 = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 2980;
				_localctx.s1 = substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2983;
			Match(COLON);
			State = 2987;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 2984;
				_localctx.n2 = number();
				}
				break;
			case IDENT:
				{
				State = 2985;
				_localctx.i2 = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 2986;
				_localctx.s2 = substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastOperatorContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(EsperEPL2GrammarParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public LastOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterLastOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitLastOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastOperatorContext lastOperator() {
		LastOperatorContext _localctx = new LastOperatorContext(Context, State);
		EnterRule(_localctx, 454, RULE_lastOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2992;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 2989;
				number();
				}
				break;
			case IDENT:
				{
				State = 2990;
				_localctx.i = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 2991;
				substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2994;
			Match(LAST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeekDayOperatorContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(EsperEPL2GrammarParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public WeekDayOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weekDayOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterWeekDayOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitWeekDayOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeekDayOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeekDayOperatorContext weekDayOperator() {
		WeekDayOperatorContext _localctx = new WeekDayOperatorContext(Context, State);
		EnterRule(_localctx, 456, RULE_weekDayOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2999;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 2996;
				number();
				}
				break;
			case IDENT:
				{
				State = 2997;
				_localctx.i = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 2998;
				substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3001;
			Match(WEEKDAY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(EsperEPL2GrammarParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericListParameterContext[] numericListParameter() {
			return GetRuleContexts<NumericListParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericListParameterContext numericListParameter(int i) {
			return GetRuleContext<NumericListParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(EsperEPL2GrammarParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public NumericParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterNumericParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitNumericParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericParameterListContext numericParameterList() {
		NumericParameterListContext _localctx = new NumericParameterListContext(Context, State);
		EnterRule(_localctx, 458, RULE_numericParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3003;
			Match(LBRACK);
			State = 3004;
			numericListParameter();
			State = 3009;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3005;
				Match(COMMA);
				State = 3006;
				numericListParameter();
				}
				}
				State = 3011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3012;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericListParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RangeOperandContext rangeOperand() {
			return GetRuleContext<RangeOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrequencyOperandContext frequencyOperand() {
			return GetRuleContext<FrequencyOperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext numberconstant() {
			return GetRuleContext<NumberconstantContext>(0);
		}
		public NumericListParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericListParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterNumericListParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitNumericListParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericListParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericListParameterContext numericListParameter() {
		NumericListParameterContext _localctx = new NumericListParameterContext(Context, State);
		EnterRule(_localctx, 460, RULE_numericListParameter);
		try {
			State = 3017;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,398,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3014;
				rangeOperand();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3015;
				frequencyOperand();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3016;
				numberconstant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainableRootWithOptContext chainableRootWithOpt() {
			return GetRuleContext<ChainableRootWithOptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableElementsContext chainableElements() {
			return GetRuleContext<ChainableElementsContext>(0);
		}
		public ChainableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterChainable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitChainable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableContext chainable() {
		ChainableContext _localctx = new ChainableContext(Context, State);
		EnterRule(_localctx, 462, RULE_chainable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3019;
			chainableRootWithOpt();
			State = 3020;
			chainableElements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableRootWithOptContext : ParserRuleContext {
		public IToken q;
		[System.Diagnostics.DebuggerNonUserCode] public ChainableWithArgsContext chainableWithArgs() {
			return GetRuleContext<ChainableWithArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(EsperEPL2GrammarParser.QUESTION, 0); }
		public ChainableRootWithOptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainableRootWithOpt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterChainableRootWithOpt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitChainableRootWithOpt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainableRootWithOpt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableRootWithOptContext chainableRootWithOpt() {
		ChainableRootWithOptContext _localctx = new ChainableRootWithOptContext(Context, State);
		EnterRule(_localctx, 464, RULE_chainableRootWithOpt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3022;
			chainableWithArgs();
			State = 3024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,399,Context) ) {
			case 1:
				{
				State = 3023;
				_localctx.q = Match(QUESTION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainableAtomicWithOptContext[] chainableAtomicWithOpt() {
			return GetRuleContexts<ChainableAtomicWithOptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableAtomicWithOptContext chainableAtomicWithOpt(int i) {
			return GetRuleContext<ChainableAtomicWithOptContext>(i);
		}
		public ChainableElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainableElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterChainableElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitChainableElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainableElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableElementsContext chainableElements() {
		ChainableElementsContext _localctx = new ChainableElementsContext(Context, State);
		EnterRule(_localctx, 466, RULE_chainableElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3029;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || _la==DOT) {
				{
				{
				State = 3026;
				chainableAtomicWithOpt();
				}
				}
				State = 3031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableAtomicWithOptContext : ParserRuleContext {
		public IToken q;
		[System.Diagnostics.DebuggerNonUserCode] public ChainableAtomicContext chainableAtomic() {
			return GetRuleContext<ChainableAtomicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(EsperEPL2GrammarParser.QUESTION, 0); }
		public ChainableAtomicWithOptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainableAtomicWithOpt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterChainableAtomicWithOpt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitChainableAtomicWithOpt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainableAtomicWithOpt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableAtomicWithOptContext chainableAtomicWithOpt() {
		ChainableAtomicWithOptContext _localctx = new ChainableAtomicWithOptContext(Context, State);
		EnterRule(_localctx, 468, RULE_chainableAtomicWithOpt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3032;
			chainableAtomic();
			State = 3034;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,401,Context) ) {
			case 1:
				{
				State = 3033;
				_localctx.q = Match(QUESTION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableAtomicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainableArrayContext chainableArray() {
			return GetRuleContext<ChainableArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(EsperEPL2GrammarParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainableWithArgsContext chainableWithArgs() {
			return GetRuleContext<ChainableWithArgsContext>(0);
		}
		public ChainableAtomicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainableAtomic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterChainableAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitChainableAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainableAtomic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableAtomicContext chainableAtomic() {
		ChainableAtomicContext _localctx = new ChainableAtomicContext(Context, State);
		EnterRule(_localctx, 470, RULE_chainableAtomic);
		try {
			State = 3039;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3036;
				chainableArray();
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3037;
				Match(DOT);
				State = 3038;
				chainableWithArgs();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableArrayContext : ParserRuleContext {
		public IToken lb;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(EsperEPL2GrammarParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(EsperEPL2GrammarParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public ChainableArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainableArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterChainableArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitChainableArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainableArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableArrayContext chainableArray() {
		ChainableArrayContext _localctx = new ChainableArrayContext(Context, State);
		EnterRule(_localctx, 472, RULE_chainableArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3041;
			_localctx.lb = Match(LBRACK);
			State = 3042;
			expression();
			State = 3047;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3043;
				Match(COMMA);
				State = 3044;
				expression();
				}
				}
				State = 3049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3050;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableWithArgsContext : ParserRuleContext {
		public IToken lp;
		[System.Diagnostics.DebuggerNonUserCode] public ChainableIdentContext chainableIdent() {
			return GetRuleContext<ChainableIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(EsperEPL2GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(EsperEPL2GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LibFunctionArgsContext libFunctionArgs() {
			return GetRuleContext<LibFunctionArgsContext>(0);
		}
		public ChainableWithArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainableWithArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterChainableWithArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitChainableWithArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainableWithArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableWithArgsContext chainableWithArgs() {
		ChainableWithArgsContext _localctx = new ChainableWithArgsContext(Context, State);
		EnterRule(_localctx, 474, RULE_chainableWithArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3052;
			chainableIdent();
			State = 3058;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,405,Context) ) {
			case 1:
				{
				State = 3053;
				_localctx.lp = Match(LPAREN);
				State = 3055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -431347076622734188L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6921971054613118977L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 78384562369L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 119L) != 0)) {
					{
					State = 3054;
					libFunctionArgs();
					}
				}

				State = 3057;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableIdentContext : ParserRuleContext {
		public KeywordAllowedIdentContext ipi;
		public KeywordAllowedIdentContext ipi2;
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext[] keywordAllowedIdent() {
			return GetRuleContexts<KeywordAllowedIdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext keywordAllowedIdent(int i) {
			return GetRuleContext<KeywordAllowedIdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPECHAR() { return GetTokens(EsperEPL2GrammarParser.ESCAPECHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPECHAR(int i) {
			return GetToken(EsperEPL2GrammarParser.ESCAPECHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(EsperEPL2GrammarParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(EsperEPL2GrammarParser.DOT, i);
		}
		public ChainableIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainableIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterChainableIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitChainableIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainableIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableIdentContext chainableIdent() {
		ChainableIdentContext _localctx = new ChainableIdentContext(Context, State);
		EnterRule(_localctx, 476, RULE_chainableIdent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3060;
			_localctx.ipi = keywordAllowedIdent();
			State = 3068;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ESCAPECHAR) {
				{
				{
				State = 3061;
				Match(ESCAPECHAR);
				State = 3062;
				Match(DOT);
				State = 3064;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,406,Context) ) {
				case 1:
					{
					State = 3063;
					_localctx.ipi2 = keywordAllowedIdent();
					}
					break;
				}
				}
				}
				State = 3070;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentOrTickedContext : ParserRuleContext {
		public IToken i1;
		public IToken i2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TICKED_STRING_LITERAL() { return GetToken(EsperEPL2GrammarParser.TICKED_STRING_LITERAL, 0); }
		public IdentOrTickedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identOrTicked; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterIdentOrTicked(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitIdentOrTicked(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentOrTicked(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentOrTickedContext identOrTicked() {
		IdentOrTickedContext _localctx = new IdentOrTickedContext(Context, State);
		EnterRule(_localctx, 478, RULE_identOrTicked);
		try {
			State = 3073;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3071;
				_localctx.i1 = Match(IDENT);
				}
				break;
			case TICKED_STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3072;
				_localctx.i2 = Match(TICKED_STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordAllowedIdentContext : ParserRuleContext {
		public IToken i1;
		public IToken i2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TICKED_STRING_LITERAL() { return GetToken(EsperEPL2GrammarParser.TICKED_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(EsperEPL2GrammarParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(EsperEPL2GrammarParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(EsperEPL2GrammarParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVEDEV() { return GetToken(EsperEPL2GrammarParser.AVEDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(EsperEPL2GrammarParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(EsperEPL2GrammarParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(EsperEPL2GrammarParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(EsperEPL2GrammarParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(EsperEPL2GrammarParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(EsperEPL2GrammarParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(EsperEPL2GrammarParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(EsperEPL2GrammarParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_EXPR() { return GetToken(EsperEPL2GrammarParser.EVERY_EXPR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(EsperEPL2GrammarParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(EsperEPL2GrammarParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(EsperEPL2GrammarParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(EsperEPL2GrammarParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCEOF() { return GetToken(EsperEPL2GrammarParser.INSTANCEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(EsperEPL2GrammarParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(EsperEPL2GrammarParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(EsperEPL2GrammarParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LW() { return GetToken(EsperEPL2GrammarParser.LW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(EsperEPL2GrammarParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(EsperEPL2GrammarParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHES() { return GetToken(EsperEPL2GrammarParser.MATCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIAN() { return GetToken(EsperEPL2GrammarParser.MEDIAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(EsperEPL2GrammarParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METADATASQL() { return GetToken(EsperEPL2GrammarParser.METADATASQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(EsperEPL2GrammarParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(EsperEPL2GrammarParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(EsperEPL2GrammarParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN() { return GetToken(EsperEPL2GrammarParser.PATTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREVIOUS() { return GetToken(EsperEPL2GrammarParser.PREVIOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREVIOUSTAIL() { return GetToken(EsperEPL2GrammarParser.PREVIOUSTAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(EsperEPL2GrammarParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAINUNION() { return GetToken(EsperEPL2GrammarParser.RETAINUNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAININTERSECTION() { return GetToken(EsperEPL2GrammarParser.RETAININTERSECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(EsperEPL2GrammarParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(EsperEPL2GrammarParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(EsperEPL2GrammarParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(EsperEPL2GrammarParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(EsperEPL2GrammarParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(EsperEPL2GrammarParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(EsperEPL2GrammarParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(EsperEPL2GrammarParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(EsperEPL2GrammarParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIDIRECTIONAL() { return GetToken(EsperEPL2GrammarParser.UNIDIRECTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(EsperEPL2GrammarParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(EsperEPL2GrammarParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(EsperEPL2GrammarParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(EsperEPL2GrammarParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(EsperEPL2GrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(EsperEPL2GrammarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(EsperEPL2GrammarParser.WINDOW, 0); }
		public KeywordAllowedIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordAllowedIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterKeywordAllowedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitKeywordAllowedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeywordAllowedIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordAllowedIdentContext keywordAllowedIdent() {
		KeywordAllowedIdentContext _localctx = new KeywordAllowedIdentContext(Context, State);
		EnterRule(_localctx, 480, RULE_keywordAllowedIdent);
		try {
			State = 3131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3075;
				_localctx.i1 = Match(IDENT);
				}
				break;
			case TICKED_STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3076;
				_localctx.i2 = Match(TICKED_STRING_LITERAL);
				}
				break;
			case AFTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3077;
				Match(AFTER);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3078;
				Match(AT);
				}
				break;
			case AVG:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3079;
				Match(AVG);
				}
				break;
			case AVEDEV:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3080;
				Match(AVEDEV);
				}
				break;
			case BETWEEN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3081;
				Match(BETWEEN);
				}
				break;
			case CAST:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3082;
				Match(CAST);
				}
				break;
			case COALESCE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3083;
				Match(COALESCE);
				}
				break;
			case CONTEXT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3084;
				Match(CONTEXT);
				}
				break;
			case COUNT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3085;
				Match(COUNT);
				}
				break;
			case DEFINE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3086;
				Match(DEFINE);
				}
				break;
			case ESCAPE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3087;
				Match(ESCAPE);
				}
				break;
			case EVENTS:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3088;
				Match(EVENTS);
				}
				break;
			case EVERY_EXPR:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3089;
				Match(EVERY_EXPR);
				}
				break;
			case FIRST:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3090;
				Match(FIRST);
				}
				break;
			case FULL:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3091;
				Match(FULL);
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 18);
				{
				State = 3092;
				Match(FOR);
				}
				break;
			case INDEX:
				EnterOuterAlt(_localctx, 19);
				{
				State = 3093;
				Match(INDEX);
				}
				break;
			case INSTANCEOF:
				EnterOuterAlt(_localctx, 20);
				{
				State = 3094;
				Match(INSTANCEOF);
				}
				break;
			case JOIN:
				EnterOuterAlt(_localctx, 21);
				{
				State = 3095;
				Match(JOIN);
				}
				break;
			case LAST:
				EnterOuterAlt(_localctx, 22);
				{
				State = 3096;
				Match(LAST);
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 23);
				{
				State = 3097;
				Match(LEFT);
				}
				break;
			case LW:
				EnterOuterAlt(_localctx, 24);
				{
				State = 3098;
				Match(LW);
				}
				break;
			case MAX:
				EnterOuterAlt(_localctx, 25);
				{
				State = 3099;
				Match(MAX);
				}
				break;
			case MATCHED:
				EnterOuterAlt(_localctx, 26);
				{
				State = 3100;
				Match(MATCHED);
				}
				break;
			case MATCHES:
				EnterOuterAlt(_localctx, 27);
				{
				State = 3101;
				Match(MATCHES);
				}
				break;
			case MEDIAN:
				EnterOuterAlt(_localctx, 28);
				{
				State = 3102;
				Match(MEDIAN);
				}
				break;
			case MERGE:
				EnterOuterAlt(_localctx, 29);
				{
				State = 3103;
				Match(MERGE);
				}
				break;
			case METADATASQL:
				EnterOuterAlt(_localctx, 30);
				{
				State = 3104;
				Match(METADATASQL);
				}
				break;
			case MIN:
				EnterOuterAlt(_localctx, 31);
				{
				State = 3105;
				Match(MIN);
				}
				break;
			case OUTER:
				EnterOuterAlt(_localctx, 32);
				{
				State = 3106;
				Match(OUTER);
				}
				break;
			case PARTITION:
				EnterOuterAlt(_localctx, 33);
				{
				State = 3107;
				Match(PARTITION);
				}
				break;
			case PATTERN:
				EnterOuterAlt(_localctx, 34);
				{
				State = 3108;
				Match(PATTERN);
				}
				break;
			case PREVIOUS:
				EnterOuterAlt(_localctx, 35);
				{
				State = 3109;
				Match(PREVIOUS);
				}
				break;
			case PREVIOUSTAIL:
				EnterOuterAlt(_localctx, 36);
				{
				State = 3110;
				Match(PREVIOUSTAIL);
				}
				break;
			case PRIOR:
				EnterOuterAlt(_localctx, 37);
				{
				State = 3111;
				Match(PRIOR);
				}
				break;
			case RETAINUNION:
				EnterOuterAlt(_localctx, 38);
				{
				State = 3112;
				Match(RETAINUNION);
				}
				break;
			case RETAININTERSECTION:
				EnterOuterAlt(_localctx, 39);
				{
				State = 3113;
				Match(RETAININTERSECTION);
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 40);
				{
				State = 3114;
				Match(RIGHT);
				}
				break;
			case SCHEMA:
				EnterOuterAlt(_localctx, 41);
				{
				State = 3115;
				Match(SCHEMA);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 42);
				{
				State = 3116;
				Match(SET);
				}
				break;
			case SNAPSHOT:
				EnterOuterAlt(_localctx, 43);
				{
				State = 3117;
				Match(SNAPSHOT);
				}
				break;
			case STDDEV:
				EnterOuterAlt(_localctx, 44);
				{
				State = 3118;
				Match(STDDEV);
				}
				break;
			case SUM:
				EnterOuterAlt(_localctx, 45);
				{
				State = 3119;
				Match(SUM);
				}
				break;
			case SQL:
				EnterOuterAlt(_localctx, 46);
				{
				State = 3120;
				Match(SQL);
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 47);
				{
				State = 3121;
				Match(TABLE);
				}
				break;
			case TYPEOF:
				EnterOuterAlt(_localctx, 48);
				{
				State = 3122;
				Match(TYPEOF);
				}
				break;
			case UNIDIRECTIONAL:
				EnterOuterAlt(_localctx, 49);
				{
				State = 3123;
				Match(UNIDIRECTIONAL);
				}
				break;
			case UNTIL:
				EnterOuterAlt(_localctx, 50);
				{
				State = 3124;
				Match(UNTIL);
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 51);
				{
				State = 3125;
				Match(USING);
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 52);
				{
				State = 3126;
				Match(VARIABLE);
				}
				break;
			case WEEKDAY:
				EnterOuterAlt(_localctx, 53);
				{
				State = 3127;
				Match(WEEKDAY);
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 54);
				{
				State = 3128;
				Match(WHERE);
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 55);
				{
				State = 3129;
				Match(WHILE);
				}
				break;
			case WINDOW:
				EnterOuterAlt(_localctx, 56);
				{
				State = 3130;
				Match(WINDOW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapableStrContext : ParserRuleContext {
		public IToken i1;
		public IToken i2;
		public IToken i3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(EsperEPL2GrammarParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TICKED_STRING_LITERAL() { return GetToken(EsperEPL2GrammarParser.TICKED_STRING_LITERAL, 0); }
		public EscapableStrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapableStr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterEscapableStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitEscapableStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscapableStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscapableStrContext escapableStr() {
		EscapableStrContext _localctx = new EscapableStrContext(Context, State);
		EnterRule(_localctx, 482, RULE_escapableStr);
		try {
			State = 3136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3133;
				_localctx.i1 = Match(IDENT);
				}
				break;
			case EVENTS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3134;
				_localctx.i2 = Match(EVENTS);
				}
				break;
			case TICKED_STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3135;
				_localctx.i3 = Match(TICKED_STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapableIdentContext : ParserRuleContext {
		public IToken t;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TICKED_STRING_LITERAL() { return GetToken(EsperEPL2GrammarParser.TICKED_STRING_LITERAL, 0); }
		public EscapableIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapableIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterEscapableIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitEscapableIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscapableIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscapableIdentContext escapableIdent() {
		EscapableIdentContext _localctx = new EscapableIdentContext(Context, State);
		EnterRule(_localctx, 484, RULE_escapableIdent);
		try {
			State = 3140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3138;
				Match(IDENT);
				}
				break;
			case TICKED_STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3139;
				_localctx.t = Match(TICKED_STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimePeriodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public YearPartContext yearPart() {
			return GetRuleContext<YearPartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MonthPartContext monthPart() {
			return GetRuleContext<MonthPartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeekPartContext weekPart() {
			return GetRuleContext<WeekPartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DayPartContext dayPart() {
			return GetRuleContext<DayPartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HourPartContext hourPart() {
			return GetRuleContext<HourPartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinutePartContext minutePart() {
			return GetRuleContext<MinutePartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SecondPartContext secondPart() {
			return GetRuleContext<SecondPartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MillisecondPartContext millisecondPart() {
			return GetRuleContext<MillisecondPartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MicrosecondPartContext microsecondPart() {
			return GetRuleContext<MicrosecondPartContext>(0);
		}
		public TimePeriodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timePeriod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterTimePeriod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitTimePeriod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimePeriod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimePeriodContext timePeriod() {
		TimePeriodContext _localctx = new TimePeriodContext(Context, State);
		EnterRule(_localctx, 486, RULE_timePeriod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,448,Context) ) {
			case 1:
				{
				State = 3142;
				yearPart();
				State = 3144;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,412,Context) ) {
				case 1:
					{
					State = 3143;
					monthPart();
					}
					break;
				}
				State = 3147;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,413,Context) ) {
				case 1:
					{
					State = 3146;
					weekPart();
					}
					break;
				}
				State = 3150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,414,Context) ) {
				case 1:
					{
					State = 3149;
					dayPart();
					}
					break;
				}
				State = 3153;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,415,Context) ) {
				case 1:
					{
					State = 3152;
					hourPart();
					}
					break;
				}
				State = 3156;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,416,Context) ) {
				case 1:
					{
					State = 3155;
					minutePart();
					}
					break;
				}
				State = 3159;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,417,Context) ) {
				case 1:
					{
					State = 3158;
					secondPart();
					}
					break;
				}
				State = 3162;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,418,Context) ) {
				case 1:
					{
					State = 3161;
					millisecondPart();
					}
					break;
				}
				State = 3165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 63050394783481857L) != 0)) {
					{
					State = 3164;
					microsecondPart();
					}
				}

				}
				break;
			case 2:
				{
				State = 3167;
				monthPart();
				State = 3169;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,420,Context) ) {
				case 1:
					{
					State = 3168;
					weekPart();
					}
					break;
				}
				State = 3172;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,421,Context) ) {
				case 1:
					{
					State = 3171;
					dayPart();
					}
					break;
				}
				State = 3175;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,422,Context) ) {
				case 1:
					{
					State = 3174;
					hourPart();
					}
					break;
				}
				State = 3178;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,423,Context) ) {
				case 1:
					{
					State = 3177;
					minutePart();
					}
					break;
				}
				State = 3181;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,424,Context) ) {
				case 1:
					{
					State = 3180;
					secondPart();
					}
					break;
				}
				State = 3184;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,425,Context) ) {
				case 1:
					{
					State = 3183;
					millisecondPart();
					}
					break;
				}
				State = 3187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 63050394783481857L) != 0)) {
					{
					State = 3186;
					microsecondPart();
					}
				}

				}
				break;
			case 3:
				{
				State = 3189;
				weekPart();
				State = 3191;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,427,Context) ) {
				case 1:
					{
					State = 3190;
					dayPart();
					}
					break;
				}
				State = 3194;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,428,Context) ) {
				case 1:
					{
					State = 3193;
					hourPart();
					}
					break;
				}
				State = 3197;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,429,Context) ) {
				case 1:
					{
					State = 3196;
					minutePart();
					}
					break;
				}
				State = 3200;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,430,Context) ) {
				case 1:
					{
					State = 3199;
					secondPart();
					}
					break;
				}
				State = 3203;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,431,Context) ) {
				case 1:
					{
					State = 3202;
					millisecondPart();
					}
					break;
				}
				State = 3206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 63050394783481857L) != 0)) {
					{
					State = 3205;
					microsecondPart();
					}
				}

				}
				break;
			case 4:
				{
				State = 3208;
				dayPart();
				State = 3210;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,433,Context) ) {
				case 1:
					{
					State = 3209;
					hourPart();
					}
					break;
				}
				State = 3213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,434,Context) ) {
				case 1:
					{
					State = 3212;
					minutePart();
					}
					break;
				}
				State = 3216;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,435,Context) ) {
				case 1:
					{
					State = 3215;
					secondPart();
					}
					break;
				}
				State = 3219;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,436,Context) ) {
				case 1:
					{
					State = 3218;
					millisecondPart();
					}
					break;
				}
				State = 3222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 63050394783481857L) != 0)) {
					{
					State = 3221;
					microsecondPart();
					}
				}

				}
				break;
			case 5:
				{
				State = 3224;
				hourPart();
				State = 3226;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
				case 1:
					{
					State = 3225;
					minutePart();
					}
					break;
				}
				State = 3229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,439,Context) ) {
				case 1:
					{
					State = 3228;
					secondPart();
					}
					break;
				}
				State = 3232;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,440,Context) ) {
				case 1:
					{
					State = 3231;
					millisecondPart();
					}
					break;
				}
				State = 3235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 63050394783481857L) != 0)) {
					{
					State = 3234;
					microsecondPart();
					}
				}

				}
				break;
			case 6:
				{
				State = 3237;
				minutePart();
				State = 3239;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,442,Context) ) {
				case 1:
					{
					State = 3238;
					secondPart();
					}
					break;
				}
				State = 3242;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
				case 1:
					{
					State = 3241;
					millisecondPart();
					}
					break;
				}
				State = 3245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 63050394783481857L) != 0)) {
					{
					State = 3244;
					microsecondPart();
					}
				}

				}
				break;
			case 7:
				{
				State = 3247;
				secondPart();
				State = 3249;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,445,Context) ) {
				case 1:
					{
					State = 3248;
					millisecondPart();
					}
					break;
				}
				State = 3252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 63050394783481857L) != 0)) {
					{
					State = 3251;
					microsecondPart();
					}
				}

				}
				break;
			case 8:
				{
				State = 3254;
				millisecondPart();
				State = 3256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 63050394783481857L) != 0)) {
					{
					State = 3255;
					microsecondPart();
					}
				}

				}
				break;
			case 9:
				{
				State = 3258;
				microsecondPart();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YearPartContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_YEARS() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_YEARS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_YEAR() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext numberconstant() {
			return GetRuleContext<NumberconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public YearPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yearPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterYearPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitYearPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYearPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YearPartContext yearPart() {
		YearPartContext _localctx = new YearPartContext(Context, State);
		EnterRule(_localctx, 488, RULE_yearPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3264;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 3261;
				numberconstant();
				}
				break;
			case IDENT:
				{
				State = 3262;
				_localctx.i = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 3263;
				substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3266;
			_la = TokenStream.LA(1);
			if ( !(_la==TIMEPERIOD_YEAR || _la==TIMEPERIOD_YEARS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonthPartContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_MONTHS() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_MONTHS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_MONTH() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext numberconstant() {
			return GetRuleContext<NumberconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public MonthPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monthPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMonthPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMonthPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonthPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonthPartContext monthPart() {
		MonthPartContext _localctx = new MonthPartContext(Context, State);
		EnterRule(_localctx, 490, RULE_monthPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3271;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 3268;
				numberconstant();
				}
				break;
			case IDENT:
				{
				State = 3269;
				_localctx.i = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 3270;
				substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3273;
			_la = TokenStream.LA(1);
			if ( !(_la==TIMEPERIOD_MONTH || _la==TIMEPERIOD_MONTHS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeekPartContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_WEEKS() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_WEEKS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_WEEK() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext numberconstant() {
			return GetRuleContext<NumberconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public WeekPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weekPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterWeekPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitWeekPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeekPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeekPartContext weekPart() {
		WeekPartContext _localctx = new WeekPartContext(Context, State);
		EnterRule(_localctx, 492, RULE_weekPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 3275;
				numberconstant();
				}
				break;
			case IDENT:
				{
				State = 3276;
				_localctx.i = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 3277;
				substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3280;
			_la = TokenStream.LA(1);
			if ( !(_la==TIMEPERIOD_WEEK || _la==TIMEPERIOD_WEEKS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayPartContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_DAYS() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_DAY() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext numberconstant() {
			return GetRuleContext<NumberconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public DayPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dayPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterDayPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitDayPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayPartContext dayPart() {
		DayPartContext _localctx = new DayPartContext(Context, State);
		EnterRule(_localctx, 494, RULE_dayPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 3282;
				numberconstant();
				}
				break;
			case IDENT:
				{
				State = 3283;
				_localctx.i = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 3284;
				substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3287;
			_la = TokenStream.LA(1);
			if ( !(_la==TIMEPERIOD_DAY || _la==TIMEPERIOD_DAYS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HourPartContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_HOURS() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_HOURS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_HOUR() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext numberconstant() {
			return GetRuleContext<NumberconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public HourPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hourPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterHourPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitHourPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHourPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HourPartContext hourPart() {
		HourPartContext _localctx = new HourPartContext(Context, State);
		EnterRule(_localctx, 496, RULE_hourPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3292;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 3289;
				numberconstant();
				}
				break;
			case IDENT:
				{
				State = 3290;
				_localctx.i = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 3291;
				substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3294;
			_la = TokenStream.LA(1);
			if ( !(_la==TIMEPERIOD_HOUR || _la==TIMEPERIOD_HOURS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinutePartContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_MINUTES() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_MINUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_MINUTE() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(EsperEPL2GrammarParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext numberconstant() {
			return GetRuleContext<NumberconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public MinutePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minutePart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMinutePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMinutePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinutePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinutePartContext minutePart() {
		MinutePartContext _localctx = new MinutePartContext(Context, State);
		EnterRule(_localctx, 498, RULE_minutePart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 3296;
				numberconstant();
				}
				break;
			case IDENT:
				{
				State = 3297;
				_localctx.i = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 3298;
				substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3301;
			_la = TokenStream.LA(1);
			if ( !(_la==MIN || _la==TIMEPERIOD_MINUTE || _la==TIMEPERIOD_MINUTES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondPartContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_SECONDS() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_SECOND() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_SEC() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext numberconstant() {
			return GetRuleContext<NumberconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public SecondPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSecondPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSecondPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondPartContext secondPart() {
		SecondPartContext _localctx = new SecondPartContext(Context, State);
		EnterRule(_localctx, 500, RULE_secondPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 3303;
				numberconstant();
				}
				break;
			case IDENT:
				{
				State = 3304;
				_localctx.i = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 3305;
				substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3308;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MillisecondPartContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_MILLISECONDS() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_MILLISECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_MILLISECOND() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_MILLISECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_MILLISEC() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_MILLISEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext numberconstant() {
			return GetRuleContext<NumberconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public MillisecondPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_millisecondPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMillisecondPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMillisecondPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMillisecondPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MillisecondPartContext millisecondPart() {
		MillisecondPartContext _localctx = new MillisecondPartContext(Context, State);
		EnterRule(_localctx, 502, RULE_millisecondPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3313;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 3310;
				numberconstant();
				}
				break;
			case IDENT:
				{
				State = 3311;
				_localctx.i = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 3312;
				substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3315;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MicrosecondPartContext : ParserRuleContext {
		public IToken i;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_MICROSECONDS() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_MICROSECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_MICROSECOND() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEPERIOD_MICROSEC() { return GetToken(EsperEPL2GrammarParser.TIMEPERIOD_MICROSEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext numberconstant() {
			return GetRuleContext<NumberconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionContext substitution() {
			return GetRuleContext<SubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(EsperEPL2GrammarParser.IDENT, 0); }
		public MicrosecondPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_microsecondPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterMicrosecondPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitMicrosecondPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMicrosecondPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MicrosecondPartContext microsecondPart() {
		MicrosecondPartContext _localctx = new MicrosecondPartContext(Context, State);
		EnterRule(_localctx, 504, RULE_microsecondPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
			case FloatingPointLiteral:
				{
				State = 3317;
				numberconstant();
				}
				break;
			case IDENT:
				{
				State = 3318;
				_localctx.i = Match(IDENT);
				}
				break;
			case QUESTION:
				{
				State = 3319;
				substitution();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3322;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(EsperEPL2GrammarParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingPointLiteral() { return GetToken(EsperEPL2GrammarParser.FloatingPointLiteral, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 506, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3324;
			_la = TokenStream.LA(1);
			if ( !(_la==IntegerLiteral || _la==FloatingPointLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstitutionContext : ParserRuleContext {
		public IToken q;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(EsperEPL2GrammarParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(EsperEPL2GrammarParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(EsperEPL2GrammarParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionSlashIdentContext substitutionSlashIdent() {
			return GetRuleContext<SubstitutionSlashIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassIdentifierWithDimensionsContext classIdentifierWithDimensions() {
			return GetRuleContext<ClassIdentifierWithDimensionsContext>(0);
		}
		public SubstitutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substitution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSubstitution(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSubstitution(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstitution(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstitutionContext substitution() {
		SubstitutionContext _localctx = new SubstitutionContext(Context, State);
		EnterRule(_localctx, 508, RULE_substitution);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3326;
			_localctx.q = Match(QUESTION);
			State = 3335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,460,Context) ) {
			case 1:
				{
				State = 3327;
				Match(COLON);
				State = 3329;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,458,Context) ) {
				case 1:
					{
					State = 3328;
					substitutionSlashIdent();
					}
					break;
				}
				State = 3333;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,459,Context) ) {
				case 1:
					{
					State = 3331;
					Match(COLON);
					State = 3332;
					classIdentifierWithDimensions();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstitutionSlashIdentContext : ParserRuleContext {
		public IToken d;
		public EscapableStrContext i1;
		public EscapableStrContext i2;
		[System.Diagnostics.DebuggerNonUserCode] public EscapableStrContext[] escapableStr() {
			return GetRuleContexts<EscapableStrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EscapableStrContext escapableStr(int i) {
			return GetRuleContext<EscapableStrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(EsperEPL2GrammarParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(EsperEPL2GrammarParser.DIV, i);
		}
		public SubstitutionSlashIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substitutionSlashIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterSubstitutionSlashIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitSubstitutionSlashIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstitutionSlashIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstitutionSlashIdentContext substitutionSlashIdent() {
		SubstitutionSlashIdentContext _localctx = new SubstitutionSlashIdentContext(Context, State);
		EnterRule(_localctx, 510, RULE_substitutionSlashIdent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DIV) {
				{
				State = 3337;
				_localctx.d = Match(DIV);
				}
			}

			State = 3340;
			_localctx.i1 = escapableStr();
			State = 3345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,462,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3341;
					Match(DIV);
					State = 3342;
					_localctx.i2 = escapableStr();
					}
					} 
				}
				State = 3347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,462,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken t;
		public IToken f;
		public IToken nu;
		[System.Diagnostics.DebuggerNonUserCode] public NumberconstantContext numberconstant() {
			return GetRuleContext<NumberconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringconstantContext stringconstant() {
			return GetRuleContext<StringconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_TRUE() { return GetToken(EsperEPL2GrammarParser.BOOLEAN_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_FALSE() { return GetToken(EsperEPL2GrammarParser.BOOLEAN_FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_NULL() { return GetToken(EsperEPL2GrammarParser.VALUE_NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 512, RULE_constant);
		try {
			State = 3353;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case IntegerLiteral:
			case FloatingPointLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3348;
				numberconstant();
				}
				break;
			case QUOTED_STRING_LITERAL:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3349;
				stringconstant();
				}
				break;
			case BOOLEAN_TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3350;
				_localctx.t = Match(BOOLEAN_TRUE);
				}
				break;
			case BOOLEAN_FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3351;
				_localctx.f = Match(BOOLEAN_FALSE);
				}
				break;
			case VALUE_NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3352;
				_localctx.nu = Match(VALUE_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberconstantContext : ParserRuleContext {
		public IToken m;
		public IToken p;
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(EsperEPL2GrammarParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(EsperEPL2GrammarParser.PLUS, 0); }
		public NumberconstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberconstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterNumberconstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitNumberconstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberconstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberconstantContext numberconstant() {
		NumberconstantContext _localctx = new NumberconstantContext(Context, State);
		EnterRule(_localctx, 514, RULE_numberconstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3357;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				{
				State = 3355;
				_localctx.m = Match(MINUS);
				}
				break;
			case PLUS:
				{
				State = 3356;
				_localctx.p = Match(PLUS);
				}
				break;
			case IntegerLiteral:
			case FloatingPointLiteral:
				break;
			default:
				break;
			}
			State = 3359;
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringconstantContext : ParserRuleContext {
		public IToken sl;
		public IToken qsl;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(EsperEPL2GrammarParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_STRING_LITERAL() { return GetToken(EsperEPL2GrammarParser.QUOTED_STRING_LITERAL, 0); }
		public StringconstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringconstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterStringconstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitStringconstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringconstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringconstantContext stringconstant() {
		StringconstantContext _localctx = new StringconstantContext(Context, State);
		EnterRule(_localctx, 516, RULE_stringconstant);
		try {
			State = 3363;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3361;
				_localctx.sl = Match(STRING_LITERAL);
				}
				break;
			case QUOTED_STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3362;
				_localctx.qsl = Match(QUOTED_STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonvalueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonobjectContext jsonobject() {
			return GetRuleContext<JsonobjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonarrayContext jsonarray() {
			return GetRuleContext<JsonarrayContext>(0);
		}
		public JsonvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonvalue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterJsonvalue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitJsonvalue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonvalueContext jsonvalue() {
		JsonvalueContext _localctx = new JsonvalueContext(Context, State);
		EnterRule(_localctx, 518, RULE_jsonvalue);
		try {
			State = 3368;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN_TRUE:
			case BOOLEAN_FALSE:
			case VALUE_NULL:
			case PLUS:
			case MINUS:
			case QUOTED_STRING_LITERAL:
			case STRING_LITERAL:
			case IntegerLiteral:
			case FloatingPointLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3365;
				constant();
				}
				break;
			case LCURLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3366;
				jsonobject();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3367;
				jsonarray();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonobjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(EsperEPL2GrammarParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonmembersContext jsonmembers() {
			return GetRuleContext<JsonmembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(EsperEPL2GrammarParser.RCURLY, 0); }
		public JsonobjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonobject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterJsonobject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitJsonobject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonobject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonobjectContext jsonobject() {
		JsonobjectContext _localctx = new JsonobjectContext(Context, State);
		EnterRule(_localctx, 520, RULE_jsonobject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3370;
			Match(LCURLY);
			State = 3371;
			jsonmembers();
			State = 3372;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonarrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(EsperEPL2GrammarParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(EsperEPL2GrammarParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonelementsContext jsonelements() {
			return GetRuleContext<JsonelementsContext>(0);
		}
		public JsonarrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonarray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterJsonarray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitJsonarray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonarray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonarrayContext jsonarray() {
		JsonarrayContext _localctx = new JsonarrayContext(Context, State);
		EnterRule(_localctx, 522, RULE_jsonarray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3374;
			Match(LBRACK);
			State = 3376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 40537894204473351L) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & 51L) != 0)) {
				{
				State = 3375;
				jsonelements();
				}
			}

			State = 3378;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonelementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonvalueContext[] jsonvalue() {
			return GetRuleContexts<JsonvalueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonvalueContext jsonvalue(int i) {
			return GetRuleContext<JsonvalueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public JsonelementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonelements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterJsonelements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitJsonelements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonelements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonelementsContext jsonelements() {
		JsonelementsContext _localctx = new JsonelementsContext(Context, State);
		EnterRule(_localctx, 524, RULE_jsonelements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3380;
			jsonvalue();
			State = 3385;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,468,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3381;
					Match(COMMA);
					State = 3382;
					jsonvalue();
					}
					} 
				}
				State = 3387;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,468,Context);
			}
			State = 3389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3388;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonmembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonpairContext[] jsonpair() {
			return GetRuleContexts<JsonpairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonpairContext jsonpair(int i) {
			return GetRuleContext<JsonpairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EsperEPL2GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EsperEPL2GrammarParser.COMMA, i);
		}
		public JsonmembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonmembers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterJsonmembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitJsonmembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonmembers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonmembersContext jsonmembers() {
		JsonmembersContext _localctx = new JsonmembersContext(Context, State);
		EnterRule(_localctx, 526, RULE_jsonmembers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3391;
			jsonpair();
			State = 3396;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,470,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3392;
					Match(COMMA);
					State = 3393;
					jsonpair();
					}
					} 
				}
				State = 3398;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,470,Context);
			}
			State = 3400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3399;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonpairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EsperEPL2GrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonvalueContext jsonvalue() {
			return GetRuleContext<JsonvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringconstantContext stringconstant() {
			return GetRuleContext<StringconstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordAllowedIdentContext keywordAllowedIdent() {
			return GetRuleContext<KeywordAllowedIdentContext>(0);
		}
		public JsonpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.EnterJsonpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEsperEPL2GrammarListener typedListener = listener as IEsperEPL2GrammarListener;
			if (typedListener != null) typedListener.ExitJsonpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEsperEPL2GrammarVisitor<TResult> typedVisitor = visitor as IEsperEPL2GrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonpairContext jsonpair() {
		JsonpairContext _localctx = new JsonpairContext(Context, State);
		EnterRule(_localctx, 528, RULE_jsonpair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3404;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUOTED_STRING_LITERAL:
			case STRING_LITERAL:
				{
				State = 3402;
				stringconstant();
				}
				break;
			case WINDOW:
			case BETWEEN:
			case ESCAPE:
			case EVERY_EXPR:
			case WHERE:
			case SUM:
			case AVG:
			case MAX:
			case MIN:
			case COALESCE:
			case MEDIAN:
			case STDDEV:
			case AVEDEV:
			case COUNT:
			case OUTER:
			case JOIN:
			case LEFT:
			case RIGHT:
			case FULL:
			case EVENTS:
			case FIRST:
			case LAST:
			case SCHEMA:
			case UNIDIRECTIONAL:
			case RETAINUNION:
			case RETAININTERSECTION:
			case PATTERN:
			case SQL:
			case METADATASQL:
			case PREVIOUS:
			case PREVIOUSTAIL:
			case PRIOR:
			case WEEKDAY:
			case LW:
			case INSTANCEOF:
			case TYPEOF:
			case CAST:
			case SNAPSHOT:
			case SET:
			case VARIABLE:
			case TABLE:
			case UNTIL:
			case AT:
			case INDEX:
			case DEFINE:
			case PARTITION:
			case MATCHES:
			case AFTER:
			case FOR:
			case WHILE:
			case USING:
			case MERGE:
			case MATCHED:
			case CONTEXT:
			case TICKED_STRING_LITERAL:
			case IDENT:
				{
				State = 3403;
				keywordAllowedIdent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3406;
			Match(COLON);
			State = 3407;
			jsonvalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,199,3410,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,1,0,1,0,1,0,5,0,534,8,
		0,10,0,12,0,537,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,
		3,1,3,1,4,1,4,3,4,555,8,4,1,4,3,4,558,8,4,1,4,3,4,561,8,4,1,4,1,4,1,4,
		3,4,566,8,4,1,4,3,4,569,8,4,1,4,1,4,3,4,573,8,4,1,4,1,4,1,5,1,5,1,5,1,
		6,1,6,3,6,582,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,591,8,6,1,7,1,7,1,7,
		1,7,1,7,3,7,598,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
		9,3,9,613,8,9,1,9,3,9,616,8,9,1,10,1,10,1,10,5,10,621,8,10,10,10,12,10,
		624,9,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,635,8,12,1,
		13,1,13,1,13,1,13,5,13,641,8,13,10,13,12,13,644,9,13,3,13,646,8,13,1,13,
		3,13,649,8,13,1,13,1,13,1,14,3,14,654,8,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,671,8,14,1,14,3,14,
		674,8,14,1,15,1,15,1,15,1,16,1,16,3,16,681,8,16,1,16,1,16,3,16,685,8,16,
		1,16,1,16,1,16,1,16,3,16,691,8,16,1,16,3,16,694,8,16,1,16,1,16,3,16,698,
		8,16,1,16,1,16,1,16,3,16,703,8,16,1,16,1,16,3,16,707,8,16,1,16,1,16,3,
		16,711,8,16,1,16,1,16,1,16,3,16,716,8,16,1,16,1,16,3,16,720,8,16,1,17,
		1,17,1,17,1,17,1,17,4,17,727,8,17,11,17,12,17,728,1,17,3,17,732,8,17,3,
		17,734,8,17,1,17,1,17,1,17,3,17,739,8,17,1,18,1,18,3,18,743,8,18,1,18,
		1,18,1,18,3,18,748,8,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,3,20,758,
		8,20,1,20,1,20,1,20,1,20,3,20,764,8,20,1,21,1,21,3,21,768,8,21,1,21,1,
		21,1,21,1,21,3,21,774,8,21,1,21,1,21,1,21,3,21,779,8,21,1,21,4,21,782,
		8,21,11,21,12,21,783,3,21,786,8,21,1,22,1,22,3,22,790,8,22,1,23,1,23,1,
		23,1,23,3,23,796,8,23,1,23,4,23,799,8,23,11,23,12,23,800,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,3,24,810,8,24,1,24,1,24,1,24,3,24,815,8,24,1,24,3,
		24,818,8,24,1,25,1,25,1,25,1,25,1,25,3,25,825,8,25,1,25,1,25,1,25,1,26,
		1,26,1,26,1,26,1,26,3,26,835,8,26,1,26,4,26,838,8,26,11,26,12,26,839,1,
		27,1,27,1,27,1,28,1,28,1,28,3,28,848,8,28,1,28,1,28,1,28,1,28,3,28,854,
		8,28,1,28,3,28,857,8,28,1,28,1,28,1,28,1,28,3,28,863,8,28,1,29,1,29,3,
		29,867,8,29,1,29,1,29,3,29,871,8,29,1,29,3,29,874,8,29,1,29,3,29,877,8,
		29,1,29,1,29,3,29,881,8,29,1,29,1,29,3,29,885,8,29,1,29,1,29,1,29,3,29,
		890,8,29,1,29,1,29,3,29,894,8,29,1,29,1,29,1,29,3,29,899,8,29,1,29,1,29,
		3,29,903,8,29,1,30,1,30,1,30,1,30,1,30,3,30,910,8,30,1,30,1,30,1,30,1,
		30,3,30,916,8,30,1,31,1,31,1,31,1,31,1,31,3,31,923,8,31,1,31,1,31,3,31,
		927,8,31,1,32,1,32,1,32,1,32,1,32,3,32,934,8,32,1,33,1,33,1,33,3,33,939,
		8,33,1,34,1,34,1,34,1,34,3,34,945,8,34,1,35,1,35,1,35,1,36,1,36,1,36,5,
		36,953,8,36,10,36,12,36,956,9,36,1,37,1,37,1,37,1,37,1,37,3,37,963,8,37,
		1,38,1,38,1,38,1,38,1,38,3,38,970,8,38,1,39,1,39,1,39,1,39,3,39,976,8,
		39,1,39,1,39,3,39,980,8,39,1,39,3,39,983,8,39,1,39,1,39,1,39,1,39,1,39,
		3,39,990,8,39,1,39,1,39,1,39,3,39,995,8,39,3,39,997,8,39,1,40,1,40,1,40,
		1,40,3,40,1003,8,40,1,40,1,40,1,41,1,41,3,41,1009,8,41,1,41,1,41,1,41,
		1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,5,42,1022,8,42,10,42,12,42,1025,
		9,42,1,43,1,43,1,43,3,43,1030,8,43,1,43,3,43,1033,8,43,1,43,1,43,1,43,
		3,43,1038,8,43,1,43,3,43,1041,8,43,3,43,1043,8,43,1,44,1,44,3,44,1047,
		8,44,1,44,1,44,1,44,1,44,1,44,3,44,1054,8,44,1,45,1,45,1,45,1,45,3,45,
		1060,8,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,5,46,1069,8,46,10,46,12,46,
		1072,9,46,1,47,1,47,1,47,1,47,3,47,1078,8,47,1,47,3,47,1081,8,47,1,47,
		3,47,1084,8,47,1,47,1,47,5,47,1088,8,47,10,47,12,47,1091,9,47,1,48,1,48,
		1,48,5,48,1096,8,48,10,48,12,48,1099,9,48,1,49,1,49,1,49,3,49,1104,8,49,
		1,50,1,50,1,50,5,50,1109,8,50,10,50,12,50,1112,9,50,1,51,1,51,1,51,1,51,
		3,51,1118,8,51,1,51,1,51,1,51,1,51,3,51,1124,8,51,1,52,1,52,3,52,1128,
		8,52,1,52,1,52,1,53,1,53,1,53,3,53,1135,8,53,1,53,1,53,1,53,3,53,1140,
		8,53,1,53,3,53,1143,8,53,1,53,5,53,1146,8,53,10,53,12,53,1149,9,53,1,54,
		1,54,1,54,1,54,1,54,1,54,3,54,1157,8,54,1,54,1,54,3,54,1161,8,54,1,55,
		1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,5,56,1172,8,56,10,56,12,56,1175,
		9,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,3,58,1185,8,58,1,58,1,58,
		1,59,1,59,5,59,1191,8,59,10,59,12,59,1194,9,59,1,60,5,60,1197,8,60,10,
		60,12,60,1200,9,60,1,60,1,60,3,60,1204,8,60,1,60,3,60,1207,8,60,1,60,3,
		60,1210,8,60,1,60,1,60,3,60,1214,8,60,1,60,3,60,1217,8,60,1,60,1,60,1,
		60,1,60,3,60,1223,8,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,5,62,1232,8,
		62,10,62,12,62,1235,9,62,1,63,1,63,3,63,1239,8,63,1,63,3,63,1242,8,63,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,66,
		5,66,1258,8,66,10,66,12,66,1261,9,66,1,67,1,67,3,67,1265,8,67,1,68,1,68,
		1,68,1,68,5,68,1271,8,68,10,68,12,68,1274,9,68,1,68,1,68,1,69,1,69,3,69,
		1280,8,69,1,70,1,70,3,70,1284,8,70,1,71,1,71,1,71,5,71,1289,8,71,10,71,
		12,71,1292,9,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
		3,72,1305,8,72,3,72,1307,8,72,1,73,1,73,1,73,1,73,3,73,1313,8,73,1,73,
		1,73,1,74,1,74,1,74,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,5,76,
		1329,8,76,10,76,12,76,1332,9,76,3,76,1334,8,76,1,77,1,77,1,77,3,77,1339,
		8,77,1,77,1,77,1,78,1,78,1,78,1,78,3,78,1347,8,78,1,78,1,78,3,78,1351,
		8,78,1,78,1,78,3,78,1355,8,78,1,78,3,78,1358,8,78,1,78,1,78,1,78,3,78,
		1363,8,78,1,78,1,78,1,78,3,78,1368,8,78,1,78,3,78,1371,8,78,1,78,1,78,
		3,78,1375,8,78,1,78,1,78,1,78,5,78,1380,8,78,10,78,12,78,1383,9,78,1,78,
		3,78,1386,8,78,1,78,3,78,1389,8,78,1,78,1,78,1,78,5,78,1394,8,78,10,78,
		12,78,1397,9,78,1,78,1,78,1,78,1,78,1,78,3,78,1404,8,78,1,78,1,78,1,78,
		5,78,1409,8,78,10,78,12,78,1412,9,78,1,78,1,78,1,78,3,78,1417,8,78,3,78,
		1419,8,78,1,79,1,79,1,79,3,79,1424,8,79,1,79,1,79,1,80,1,80,1,80,1,80,
		3,80,1432,8,80,1,80,3,80,1435,8,80,1,80,3,80,1438,8,80,1,80,1,80,1,80,
		3,80,1443,8,80,1,81,1,81,3,81,1447,8,81,1,81,3,81,1450,8,81,1,82,1,82,
		1,82,5,82,1455,8,82,10,82,12,82,1458,9,82,1,82,1,82,1,82,3,82,1463,8,82,
		1,82,3,82,1466,8,82,1,83,1,83,1,83,1,83,1,84,1,84,3,84,1474,8,84,1,84,
		1,84,1,84,1,84,1,85,1,85,3,85,1482,8,85,1,85,1,85,1,85,5,85,1487,8,85,
		10,85,12,85,1490,9,85,1,86,1,86,3,86,1494,8,86,1,86,1,86,1,87,1,87,1,87,
		1,88,1,88,1,88,5,88,1504,8,88,10,88,12,88,1507,9,88,1,89,1,89,3,89,1511,
		8,89,1,90,1,90,1,90,1,91,1,91,1,91,3,91,1519,8,91,1,91,1,91,1,91,1,91,
		3,91,1525,8,91,1,91,3,91,1528,8,91,1,91,3,91,1531,8,91,1,92,1,92,1,92,
		1,92,1,92,1,93,1,93,1,93,5,93,1541,8,93,10,93,12,93,1544,9,93,1,94,1,94,
		1,94,5,94,1549,8,94,10,94,12,94,1552,9,94,1,95,1,95,1,95,3,95,1557,8,95,
		1,96,1,96,5,96,1561,8,96,10,96,12,96,1564,9,96,1,97,1,97,5,97,1568,8,97,
		10,97,12,97,1571,9,97,1,98,1,98,1,98,3,98,1576,8,98,1,98,3,98,1579,8,98,
		1,98,3,98,1582,8,98,1,98,1,98,1,98,3,98,1587,8,98,1,99,1,99,1,99,1,99,
		5,99,1593,8,99,10,99,12,99,1596,9,99,1,100,1,100,1,100,1,100,1,101,1,101,
		1,102,1,102,1,102,3,102,1607,8,102,1,102,3,102,1610,8,102,1,102,1,102,
		1,103,1,103,1,103,5,103,1617,8,103,10,103,12,103,1620,9,103,1,104,1,104,
		1,104,3,104,1625,8,104,1,105,1,105,3,105,1629,8,105,1,105,3,105,1632,8,
		105,1,105,3,105,1635,8,105,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,
		107,3,107,1645,8,107,1,108,1,108,1,108,1,108,3,108,1651,8,108,1,108,3,
		108,1654,8,108,1,108,1,108,1,108,3,108,1659,8,108,1,108,3,108,1662,8,108,
		1,108,1,108,3,108,1666,8,108,1,109,1,109,1,109,1,109,3,109,1672,8,109,
		1,109,3,109,1675,8,109,1,110,1,110,5,110,1679,8,110,10,110,12,110,1682,
		9,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,111,3,111,
		1694,8,111,1,111,1,111,1,111,3,111,1699,8,111,3,111,1701,8,111,1,111,1,
		111,1,112,1,112,1,112,1,112,1,112,3,112,1710,8,112,1,112,3,112,1713,8,
		112,1,112,3,112,1716,8,112,1,113,1,113,1,113,1,113,5,113,1722,8,113,10,
		113,12,113,1725,9,113,1,113,1,113,1,113,1,113,5,113,1731,8,113,10,113,
		12,113,1734,9,113,3,113,1736,8,113,1,114,1,114,1,114,1,114,1,115,1,115,
		3,115,1744,8,115,1,115,1,115,1,116,1,116,3,116,1750,8,116,1,116,1,116,
		3,116,1754,8,116,1,116,3,116,1757,8,116,1,117,1,117,1,117,5,117,1762,8,
		117,10,117,12,117,1765,9,117,1,118,1,118,1,118,3,118,1770,8,118,1,119,
		1,119,1,119,1,119,1,119,5,119,1777,8,119,10,119,12,119,1780,9,119,1,119,
		1,119,1,120,1,120,1,120,1,120,1,120,1,120,5,120,1790,8,120,10,120,12,120,
		1793,9,120,1,120,1,120,1,121,1,121,3,121,1799,8,121,1,122,1,122,1,122,
		1,122,1,122,5,122,1806,8,122,10,122,12,122,1809,9,122,3,122,1811,8,122,
		1,122,3,122,1814,8,122,1,123,1,123,1,123,5,123,1819,8,123,10,123,12,123,
		1822,9,123,1,124,1,124,1,124,3,124,1827,8,124,1,125,1,125,1,126,3,126,
		1832,8,126,1,126,1,126,1,126,1,126,3,126,1838,8,126,1,126,1,126,1,126,
		1,126,3,126,1844,8,126,1,126,3,126,1847,8,126,1,126,1,126,1,126,1,126,
		1,126,1,126,3,126,1855,8,126,1,126,1,126,1,126,1,126,3,126,1861,8,126,
		1,126,1,126,3,126,1865,8,126,1,126,3,126,1868,8,126,1,126,3,126,1871,8,
		126,1,127,1,127,1,127,1,127,1,127,3,127,1878,8,127,1,127,1,127,3,127,1882,
		8,127,1,128,1,128,1,128,1,128,1,128,3,128,1889,8,128,1,129,1,129,3,129,
		1893,8,129,1,129,1,129,3,129,1897,8,129,1,129,1,129,3,129,1901,8,129,3,
		129,1903,8,129,1,130,1,130,1,130,5,130,1908,8,130,10,130,12,130,1911,9,
		130,1,131,1,131,1,131,1,131,1,132,1,132,1,132,1,132,1,132,1,133,1,133,
		1,133,1,134,1,134,1,134,3,134,1928,8,134,1,134,1,134,3,134,1932,8,134,
		1,134,3,134,1935,8,134,1,134,1,134,3,134,1939,8,134,1,134,3,134,1942,8,
		134,1,134,1,134,1,135,1,135,1,135,1,135,1,135,5,135,1951,8,135,10,135,
		12,135,1954,9,135,1,136,1,136,1,136,1,136,5,136,1960,8,136,10,136,12,136,
		1963,9,136,1,137,1,137,1,137,3,137,1968,8,137,3,137,1970,8,137,1,138,1,
		138,1,138,1,139,1,139,1,139,1,139,1,139,1,140,1,140,1,140,1,140,1,140,
		1,140,1,140,1,141,1,141,1,141,1,141,3,141,1991,8,141,1,142,1,142,1,142,
		5,142,1996,8,142,10,142,12,142,1999,9,142,1,143,4,143,2002,8,143,11,143,
		12,143,2003,1,144,1,144,1,144,3,144,2009,8,144,1,145,1,145,1,145,1,145,
		1,145,1,145,3,145,2017,8,145,1,145,3,145,2020,8,145,1,146,1,146,1,146,
		1,146,1,146,5,146,2027,8,146,10,146,12,146,2030,9,146,1,146,1,146,1,147,
		1,147,1,147,1,147,3,147,2038,8,147,1,147,3,147,2041,8,147,3,147,2043,8,
		147,1,147,3,147,2046,8,147,1,148,1,148,3,148,2050,8,148,1,148,3,148,2053,
		8,148,1,148,3,148,2056,8,148,1,148,1,148,1,149,1,149,1,149,1,149,5,149,
		2064,8,149,10,149,12,149,2067,9,149,1,150,1,150,1,150,1,150,1,151,1,151,
		1,152,1,152,1,152,4,152,2078,8,152,11,152,12,152,2079,1,152,3,152,2083,
		8,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,4,152,2092,8,152,11,152,
		12,152,2093,1,152,3,152,2097,8,152,1,152,1,152,1,152,1,152,3,152,2103,
		8,152,1,153,1,153,1,153,5,153,2108,8,153,10,153,12,153,2111,9,153,1,154,
		1,154,1,154,5,154,2116,8,154,10,154,12,154,2119,9,154,1,155,1,155,1,155,
		5,155,2124,8,155,10,155,12,155,2127,9,155,1,156,1,156,1,156,3,156,2132,
		8,156,1,157,1,157,1,157,1,157,1,157,1,157,1,157,3,157,2141,8,157,1,157,
		1,157,1,157,1,157,3,157,2147,8,157,1,157,1,157,3,157,2151,8,157,1,157,
		1,157,3,157,2155,8,157,3,157,2157,8,157,5,157,2159,8,157,10,157,12,157,
		2162,9,157,1,158,1,158,1,158,1,158,1,158,3,158,2169,8,158,1,158,1,158,
		1,158,1,158,3,158,2175,8,158,1,158,1,158,3,158,2179,8,158,1,158,1,158,
		3,158,2183,8,158,3,158,2185,8,158,5,158,2187,8,158,10,158,12,158,2190,
		9,158,1,158,3,158,2193,8,158,1,158,1,158,1,158,3,158,2198,8,158,1,158,
		1,158,1,158,1,158,1,158,5,158,2205,8,158,10,158,12,158,2208,9,158,3,158,
		2210,8,158,1,158,1,158,3,158,2214,8,158,1,158,1,158,1,158,1,158,1,158,
		1,158,1,158,1,158,3,158,2224,8,158,1,158,1,158,3,158,2228,8,158,3,158,
		2230,8,158,1,159,1,159,1,160,1,160,1,160,1,160,1,160,5,160,2239,8,160,
		10,160,12,160,2242,9,160,3,160,2244,8,160,1,161,1,161,1,161,5,161,2249,
		8,161,10,161,12,161,2252,9,161,1,162,1,162,1,162,5,162,2257,8,162,10,162,
		12,162,2260,9,162,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,
		1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,5,163,2280,8,163,
		10,163,12,163,2283,9,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,
		5,163,2293,8,163,10,163,12,163,2296,9,163,3,163,2298,8,163,1,163,1,163,
		1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,2310,8,163,1,163,
		3,163,2313,8,163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,2321,8,163,
		1,163,1,163,1,163,3,163,2326,8,163,1,164,1,164,1,164,1,165,1,165,1,165,
		1,166,1,166,1,166,3,166,2337,8,166,1,167,1,167,1,167,1,168,1,168,1,169,
		1,169,1,169,1,170,1,170,1,170,3,170,2350,8,170,1,170,1,170,1,170,1,170,
		1,170,3,170,2357,8,170,1,170,1,170,1,170,3,170,2362,8,170,1,170,1,170,
		3,170,2366,8,170,1,170,1,170,1,171,1,171,3,171,2372,8,171,1,171,1,171,
		1,171,3,171,2377,8,171,1,171,1,171,3,171,2381,8,171,1,172,1,172,1,172,
		1,172,5,172,2387,8,172,10,172,12,172,2390,9,172,3,172,2392,8,172,1,172,
		1,172,1,172,1,173,1,173,1,173,3,173,2400,8,173,1,173,1,173,1,173,1,173,
		1,173,1,173,3,173,2408,8,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
		3,173,2417,8,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2425,8,173,
		1,173,1,173,1,173,1,173,1,173,1,173,3,173,2433,8,173,1,173,1,173,1,173,
		1,173,1,173,1,173,3,173,2441,8,173,1,173,1,173,1,173,1,173,1,173,1,173,
		1,173,1,173,1,173,1,173,1,173,5,173,2454,8,173,10,173,12,173,2457,9,173,
		1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2466,8,173,1,173,1,173,
		1,173,1,173,1,173,1,173,1,173,1,173,3,173,2476,8,173,1,173,1,173,1,173,
		1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
		1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
		1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,5,173,
		2516,8,173,10,173,12,173,2519,9,173,1,173,1,173,1,173,1,173,1,173,1,173,
		1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2535,8,173,1,173,
		1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2548,
		8,173,1,173,1,173,1,173,1,173,3,173,2554,8,173,1,174,1,174,1,174,3,174,
		2559,8,174,1,174,1,174,3,174,2563,8,174,1,174,1,174,1,174,1,175,1,175,
		1,175,3,175,2571,8,175,1,175,3,175,2574,8,175,1,176,1,176,1,176,1,176,
		1,176,1,176,1,176,1,176,1,176,1,176,3,176,2586,8,176,1,177,3,177,2589,
		8,177,1,177,1,177,1,177,5,177,2594,8,177,10,177,12,177,2597,9,177,1,178,
		3,178,2600,8,178,1,178,1,178,1,179,1,179,1,179,1,179,1,180,1,180,1,181,
		1,181,5,181,2612,8,181,10,181,12,181,2615,9,181,1,182,1,182,1,182,1,182,
		1,182,1,182,3,182,2623,8,182,1,182,1,182,1,183,1,183,1,183,5,183,2630,
		8,183,10,183,12,183,2633,9,183,1,184,1,184,1,184,5,184,2638,8,184,10,184,
		12,184,2641,9,184,1,185,3,185,2644,8,185,1,185,1,185,1,185,3,185,2649,
		8,185,1,186,1,186,1,186,1,186,3,186,2655,8,186,1,186,3,186,2658,8,186,
		3,186,2660,8,186,1,186,1,186,1,187,1,187,1,187,1,187,1,187,3,187,2669,
		8,187,1,187,1,187,1,187,1,187,3,187,2675,8,187,1,188,1,188,1,188,1,188,
		5,188,2681,8,188,10,188,12,188,2684,9,188,1,188,1,188,1,189,1,189,1,190,
		1,190,3,190,2692,8,190,1,191,1,191,1,191,1,191,3,191,2698,8,191,1,191,
		1,191,3,191,2702,8,191,1,191,1,191,1,192,1,192,1,192,1,192,1,192,3,192,
		2711,8,192,1,192,1,192,1,193,1,193,1,193,1,193,1,194,1,194,1,194,1,194,
		3,194,2723,8,194,3,194,2725,8,194,1,194,1,194,3,194,2729,8,194,1,194,1,
		194,1,195,1,195,3,195,2735,8,195,1,195,1,195,1,195,3,195,2740,8,195,1,
		195,3,195,2743,8,195,1,195,3,195,2746,8,195,1,196,1,196,5,196,2750,8,196,
		10,196,12,196,2753,9,196,1,197,1,197,3,197,2757,8,197,1,197,1,197,3,197,
		2761,8,197,1,197,1,197,3,197,2765,8,197,1,197,1,197,3,197,2769,8,197,1,
		197,1,197,1,198,1,198,1,198,1,198,1,199,1,199,1,199,5,199,2780,8,199,10,
		199,12,199,2783,9,199,1,200,1,200,1,200,1,200,1,200,3,200,2790,8,200,3,
		200,2792,8,200,1,201,1,201,1,201,1,201,1,201,3,201,2799,8,201,1,202,1,
		202,1,202,1,202,1,202,1,202,1,203,1,203,3,203,2809,8,203,1,203,1,203,1,
		203,3,203,2814,8,203,1,203,3,203,2817,8,203,1,203,3,203,2820,8,203,1,203,
		3,203,2823,8,203,1,204,1,204,1,204,1,204,1,204,1,204,3,204,2831,8,204,
		1,205,1,205,3,205,2835,8,205,1,206,1,206,3,206,2839,8,206,1,206,5,206,
		2842,8,206,10,206,12,206,2845,9,206,1,207,1,207,1,207,1,207,5,207,2851,
		8,207,10,207,12,207,2854,9,207,1,207,1,207,1,208,1,208,3,208,2860,8,208,
		1,208,1,208,1,209,1,209,1,209,5,209,2867,8,209,10,209,12,209,2870,9,209,
		1,210,1,210,1,210,1,210,1,211,1,211,1,211,5,211,2879,8,211,10,211,12,211,
		2882,9,211,1,212,1,212,1,212,5,212,2887,8,212,10,212,12,212,2890,9,212,
		1,213,1,213,1,213,5,213,2895,8,213,10,213,12,213,2898,9,213,1,214,1,214,
		3,214,2902,8,214,1,215,1,215,3,215,2906,8,215,1,216,1,216,1,216,1,216,
		1,216,3,216,2913,8,216,1,216,3,216,2916,8,216,1,217,1,217,1,217,1,217,
		1,217,3,217,2923,8,217,1,217,3,217,2926,8,217,1,218,1,218,1,218,5,218,
		2931,8,218,10,218,12,218,2934,9,218,1,219,1,219,1,219,5,219,2939,8,219,
		10,219,12,219,2942,9,219,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
		1,220,1,220,3,220,2954,8,220,1,221,1,221,3,221,2958,8,221,1,222,1,222,
		1,222,1,222,1,222,1,222,3,222,2966,8,222,1,223,1,223,1,224,1,224,1,225,
		1,225,1,225,1,225,1,225,3,225,2977,8,225,1,226,1,226,1,226,3,226,2982,
		8,226,1,226,1,226,1,226,1,226,3,226,2988,8,226,1,227,1,227,1,227,3,227,
		2993,8,227,1,227,1,227,1,228,1,228,1,228,3,228,3000,8,228,1,228,1,228,
		1,229,1,229,1,229,1,229,5,229,3008,8,229,10,229,12,229,3011,9,229,1,229,
		1,229,1,230,1,230,1,230,3,230,3018,8,230,1,231,1,231,1,231,1,232,1,232,
		3,232,3025,8,232,1,233,5,233,3028,8,233,10,233,12,233,3031,9,233,1,234,
		1,234,3,234,3035,8,234,1,235,1,235,1,235,3,235,3040,8,235,1,236,1,236,
		1,236,1,236,5,236,3046,8,236,10,236,12,236,3049,9,236,1,236,1,236,1,237,
		1,237,1,237,3,237,3056,8,237,1,237,3,237,3059,8,237,1,238,1,238,1,238,
		1,238,3,238,3065,8,238,5,238,3067,8,238,10,238,12,238,3070,9,238,1,239,
		1,239,3,239,3074,8,239,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
		1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
		1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
		1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
		1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
		3,240,3132,8,240,1,241,1,241,1,241,3,241,3137,8,241,1,242,1,242,3,242,
		3141,8,242,1,243,1,243,3,243,3145,8,243,1,243,3,243,3148,8,243,1,243,3,
		243,3151,8,243,1,243,3,243,3154,8,243,1,243,3,243,3157,8,243,1,243,3,243,
		3160,8,243,1,243,3,243,3163,8,243,1,243,3,243,3166,8,243,1,243,1,243,3,
		243,3170,8,243,1,243,3,243,3173,8,243,1,243,3,243,3176,8,243,1,243,3,243,
		3179,8,243,1,243,3,243,3182,8,243,1,243,3,243,3185,8,243,1,243,3,243,3188,
		8,243,1,243,1,243,3,243,3192,8,243,1,243,3,243,3195,8,243,1,243,3,243,
		3198,8,243,1,243,3,243,3201,8,243,1,243,3,243,3204,8,243,1,243,3,243,3207,
		8,243,1,243,1,243,3,243,3211,8,243,1,243,3,243,3214,8,243,1,243,3,243,
		3217,8,243,1,243,3,243,3220,8,243,1,243,3,243,3223,8,243,1,243,1,243,3,
		243,3227,8,243,1,243,3,243,3230,8,243,1,243,3,243,3233,8,243,1,243,3,243,
		3236,8,243,1,243,1,243,3,243,3240,8,243,1,243,3,243,3243,8,243,1,243,3,
		243,3246,8,243,1,243,1,243,3,243,3250,8,243,1,243,3,243,3253,8,243,1,243,
		1,243,3,243,3257,8,243,1,243,3,243,3260,8,243,1,244,1,244,1,244,3,244,
		3265,8,244,1,244,1,244,1,245,1,245,1,245,3,245,3272,8,245,1,245,1,245,
		1,246,1,246,1,246,3,246,3279,8,246,1,246,1,246,1,247,1,247,1,247,3,247,
		3286,8,247,1,247,1,247,1,248,1,248,1,248,3,248,3293,8,248,1,248,1,248,
		1,249,1,249,1,249,3,249,3300,8,249,1,249,1,249,1,250,1,250,1,250,3,250,
		3307,8,250,1,250,1,250,1,251,1,251,1,251,3,251,3314,8,251,1,251,1,251,
		1,252,1,252,1,252,3,252,3321,8,252,1,252,1,252,1,253,1,253,1,254,1,254,
		1,254,3,254,3330,8,254,1,254,1,254,3,254,3334,8,254,3,254,3336,8,254,1,
		255,3,255,3339,8,255,1,255,1,255,1,255,5,255,3344,8,255,10,255,12,255,
		3347,9,255,1,256,1,256,1,256,1,256,1,256,3,256,3354,8,256,1,257,1,257,
		3,257,3358,8,257,1,257,1,257,1,258,1,258,3,258,3364,8,258,1,259,1,259,
		1,259,3,259,3369,8,259,1,260,1,260,1,260,1,260,1,261,1,261,3,261,3377,
		8,261,1,261,1,261,1,262,1,262,1,262,5,262,3384,8,262,10,262,12,262,3387,
		9,262,1,262,3,262,3390,8,262,1,263,1,263,1,263,5,263,3395,8,263,10,263,
		12,263,3398,9,263,1,263,3,263,3401,8,263,1,264,1,264,3,264,3405,8,264,
		1,264,1,264,1,264,1,264,0,0,265,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
		192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
		228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
		264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
		300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
		336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
		372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
		408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,
		444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,
		480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,
		516,518,520,522,524,526,528,0,19,1,0,140,141,2,0,142,142,151,151,2,0,9,
		9,152,152,1,0,133,134,3,0,173,173,175,175,178,178,2,0,159,159,162,162,
		3,0,157,157,165,165,167,167,1,0,42,43,2,0,14,14,152,152,1,0,86,87,1,0,
		88,89,1,0,90,91,1,0,92,93,1,0,94,95,2,0,18,18,96,97,1,0,98,100,1,0,101,
		103,1,0,104,106,1,0,198,199,3828,0,535,1,0,0,0,2,541,1,0,0,0,4,544,1,0,
		0,0,6,547,1,0,0,0,8,552,1,0,0,0,10,576,1,0,0,0,12,590,1,0,0,0,14,597,1,
		0,0,0,16,601,1,0,0,0,18,607,1,0,0,0,20,617,1,0,0,0,22,625,1,0,0,0,24,634,
		1,0,0,0,26,636,1,0,0,0,28,653,1,0,0,0,30,675,1,0,0,0,32,680,1,0,0,0,34,
		721,1,0,0,0,36,742,1,0,0,0,38,749,1,0,0,0,40,753,1,0,0,0,42,765,1,0,0,
		0,44,789,1,0,0,0,46,791,1,0,0,0,48,802,1,0,0,0,50,819,1,0,0,0,52,829,1,
		0,0,0,54,841,1,0,0,0,56,844,1,0,0,0,58,866,1,0,0,0,60,904,1,0,0,0,62,917,
		1,0,0,0,64,928,1,0,0,0,66,935,1,0,0,0,68,940,1,0,0,0,70,946,1,0,0,0,72,
		949,1,0,0,0,74,962,1,0,0,0,76,964,1,0,0,0,78,971,1,0,0,0,80,1002,1,0,0,
		0,82,1006,1,0,0,0,84,1018,1,0,0,0,86,1032,1,0,0,0,88,1044,1,0,0,0,90,1055,
		1,0,0,0,92,1065,1,0,0,0,94,1073,1,0,0,0,96,1092,1,0,0,0,98,1100,1,0,0,
		0,100,1105,1,0,0,0,102,1123,1,0,0,0,104,1125,1,0,0,0,106,1131,1,0,0,0,
		108,1150,1,0,0,0,110,1162,1,0,0,0,112,1165,1,0,0,0,114,1176,1,0,0,0,116,
		1180,1,0,0,0,118,1188,1,0,0,0,120,1222,1,0,0,0,122,1224,1,0,0,0,124,1228,
		1,0,0,0,126,1238,1,0,0,0,128,1243,1,0,0,0,130,1250,1,0,0,0,132,1253,1,
		0,0,0,134,1262,1,0,0,0,136,1266,1,0,0,0,138,1279,1,0,0,0,140,1281,1,0,
		0,0,142,1285,1,0,0,0,144,1306,1,0,0,0,146,1308,1,0,0,0,148,1316,1,0,0,
		0,150,1319,1,0,0,0,152,1333,1,0,0,0,154,1335,1,0,0,0,156,1418,1,0,0,0,
		158,1420,1,0,0,0,160,1442,1,0,0,0,162,1444,1,0,0,0,164,1451,1,0,0,0,166,
		1467,1,0,0,0,168,1471,1,0,0,0,170,1479,1,0,0,0,172,1491,1,0,0,0,174,1497,
		1,0,0,0,176,1500,1,0,0,0,178,1510,1,0,0,0,180,1512,1,0,0,0,182,1518,1,
		0,0,0,184,1532,1,0,0,0,186,1537,1,0,0,0,188,1545,1,0,0,0,190,1553,1,0,
		0,0,192,1562,1,0,0,0,194,1565,1,0,0,0,196,1581,1,0,0,0,198,1588,1,0,0,
		0,200,1597,1,0,0,0,202,1601,1,0,0,0,204,1606,1,0,0,0,206,1613,1,0,0,0,
		208,1624,1,0,0,0,210,1626,1,0,0,0,212,1636,1,0,0,0,214,1639,1,0,0,0,216,
		1650,1,0,0,0,218,1667,1,0,0,0,220,1676,1,0,0,0,222,1687,1,0,0,0,224,1704,
		1,0,0,0,226,1735,1,0,0,0,228,1737,1,0,0,0,230,1743,1,0,0,0,232,1749,1,
		0,0,0,234,1758,1,0,0,0,236,1769,1,0,0,0,238,1771,1,0,0,0,240,1783,1,0,
		0,0,242,1798,1,0,0,0,244,1813,1,0,0,0,246,1815,1,0,0,0,248,1823,1,0,0,
		0,250,1828,1,0,0,0,252,1831,1,0,0,0,254,1872,1,0,0,0,256,1883,1,0,0,0,
		258,1892,1,0,0,0,260,1904,1,0,0,0,262,1912,1,0,0,0,264,1916,1,0,0,0,266,
		1921,1,0,0,0,268,1924,1,0,0,0,270,1945,1,0,0,0,272,1955,1,0,0,0,274,1964,
		1,0,0,0,276,1971,1,0,0,0,278,1974,1,0,0,0,280,1979,1,0,0,0,282,1986,1,
		0,0,0,284,1992,1,0,0,0,286,2001,1,0,0,0,288,2008,1,0,0,0,290,2010,1,0,
		0,0,292,2021,1,0,0,0,294,2033,1,0,0,0,296,2047,1,0,0,0,298,2059,1,0,0,
		0,300,2068,1,0,0,0,302,2072,1,0,0,0,304,2102,1,0,0,0,306,2104,1,0,0,0,
		308,2112,1,0,0,0,310,2120,1,0,0,0,312,2131,1,0,0,0,314,2133,1,0,0,0,316,
		2163,1,0,0,0,318,2231,1,0,0,0,320,2233,1,0,0,0,322,2245,1,0,0,0,324,2253,
		1,0,0,0,326,2325,1,0,0,0,328,2327,1,0,0,0,330,2330,1,0,0,0,332,2333,1,
		0,0,0,334,2338,1,0,0,0,336,2341,1,0,0,0,338,2343,1,0,0,0,340,2346,1,0,
		0,0,342,2369,1,0,0,0,344,2382,1,0,0,0,346,2553,1,0,0,0,348,2558,1,0,0,
		0,350,2567,1,0,0,0,352,2585,1,0,0,0,354,2588,1,0,0,0,356,2599,1,0,0,0,
		358,2603,1,0,0,0,360,2607,1,0,0,0,362,2609,1,0,0,0,364,2622,1,0,0,0,366,
		2626,1,0,0,0,368,2634,1,0,0,0,370,2643,1,0,0,0,372,2659,1,0,0,0,374,2668,
		1,0,0,0,376,2676,1,0,0,0,378,2687,1,0,0,0,380,2691,1,0,0,0,382,2693,1,
		0,0,0,384,2705,1,0,0,0,386,2714,1,0,0,0,388,2718,1,0,0,0,390,2734,1,0,
		0,0,392,2747,1,0,0,0,394,2754,1,0,0,0,396,2772,1,0,0,0,398,2776,1,0,0,
		0,400,2791,1,0,0,0,402,2793,1,0,0,0,404,2800,1,0,0,0,406,2808,1,0,0,0,
		408,2824,1,0,0,0,410,2832,1,0,0,0,412,2836,1,0,0,0,414,2846,1,0,0,0,416,
		2857,1,0,0,0,418,2863,1,0,0,0,420,2871,1,0,0,0,422,2875,1,0,0,0,424,2883,
		1,0,0,0,426,2891,1,0,0,0,428,2901,1,0,0,0,430,2905,1,0,0,0,432,2907,1,
		0,0,0,434,2917,1,0,0,0,436,2927,1,0,0,0,438,2935,1,0,0,0,440,2953,1,0,
		0,0,442,2957,1,0,0,0,444,2959,1,0,0,0,446,2967,1,0,0,0,448,2969,1,0,0,
		0,450,2971,1,0,0,0,452,2981,1,0,0,0,454,2992,1,0,0,0,456,2999,1,0,0,0,
		458,3003,1,0,0,0,460,3017,1,0,0,0,462,3019,1,0,0,0,464,3022,1,0,0,0,466,
		3029,1,0,0,0,468,3032,1,0,0,0,470,3039,1,0,0,0,472,3041,1,0,0,0,474,3052,
		1,0,0,0,476,3060,1,0,0,0,478,3073,1,0,0,0,480,3131,1,0,0,0,482,3136,1,
		0,0,0,484,3140,1,0,0,0,486,3259,1,0,0,0,488,3264,1,0,0,0,490,3271,1,0,
		0,0,492,3278,1,0,0,0,494,3285,1,0,0,0,496,3292,1,0,0,0,498,3299,1,0,0,
		0,500,3306,1,0,0,0,502,3313,1,0,0,0,504,3320,1,0,0,0,506,3324,1,0,0,0,
		508,3326,1,0,0,0,510,3338,1,0,0,0,512,3353,1,0,0,0,514,3357,1,0,0,0,516,
		3363,1,0,0,0,518,3368,1,0,0,0,520,3370,1,0,0,0,522,3374,1,0,0,0,524,3380,
		1,0,0,0,526,3391,1,0,0,0,528,3404,1,0,0,0,530,534,3,18,9,0,531,534,3,8,
		4,0,532,534,3,6,3,0,533,530,1,0,0,0,533,531,1,0,0,0,533,532,1,0,0,0,534,
		537,1,0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,535,1,
		0,0,0,538,539,3,28,14,0,539,540,5,0,0,1,540,1,1,0,0,0,541,542,3,462,231,
		0,542,543,5,0,0,1,543,3,1,0,0,0,544,545,3,518,259,0,545,546,5,0,0,1,546,
		5,1,0,0,0,547,548,5,126,0,0,548,549,5,196,0,0,549,550,3,516,258,0,550,
		551,5,196,0,0,551,7,1,0,0,0,552,554,5,125,0,0,553,555,3,412,206,0,554,
		553,1,0,0,0,554,555,1,0,0,0,555,557,1,0,0,0,556,558,3,404,202,0,557,556,
		1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,561,3,10,5,0,560,559,1,0,0,
		0,560,561,1,0,0,0,561,562,1,0,0,0,562,568,5,197,0,0,563,565,5,145,0,0,
		564,566,3,186,93,0,565,564,1,0,0,0,565,566,1,0,0,0,566,567,1,0,0,0,567,
		569,5,146,0,0,568,563,1,0,0,0,568,569,1,0,0,0,569,572,1,0,0,0,570,571,
		5,197,0,0,571,573,5,120,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,574,1,
		0,0,0,574,575,3,12,6,0,575,9,1,0,0,0,576,577,5,197,0,0,577,578,5,151,0,
		0,578,11,1,0,0,0,579,581,5,149,0,0,580,582,3,14,7,0,581,580,1,0,0,0,581,
		582,1,0,0,0,582,583,1,0,0,0,583,584,3,302,151,0,584,585,5,150,0,0,585,
		591,1,0,0,0,586,587,5,147,0,0,587,588,3,516,258,0,588,589,5,148,0,0,589,
		591,1,0,0,0,590,579,1,0,0,0,590,586,1,0,0,0,591,13,1,0,0,0,592,598,3,480,
		240,0,593,594,5,145,0,0,594,595,3,188,94,0,595,596,5,146,0,0,596,598,1,
		0,0,0,597,592,1,0,0,0,597,593,1,0,0,0,598,599,1,0,0,0,599,600,7,0,0,0,
		600,15,1,0,0,0,601,602,5,188,0,0,602,603,5,197,0,0,603,604,5,145,0,0,604,
		605,5,197,0,0,605,606,5,146,0,0,606,17,1,0,0,0,607,608,5,188,0,0,608,615,
		3,418,209,0,609,612,5,145,0,0,610,613,3,20,10,0,611,613,3,24,12,0,612,
		610,1,0,0,0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,616,5,
		146,0,0,615,609,1,0,0,0,615,616,1,0,0,0,616,19,1,0,0,0,617,622,3,22,11,
		0,618,619,5,152,0,0,619,621,3,22,11,0,620,618,1,0,0,0,621,624,1,0,0,0,
		622,620,1,0,0,0,622,623,1,0,0,0,623,21,1,0,0,0,624,622,1,0,0,0,625,626,
		3,480,240,0,626,627,5,142,0,0,627,628,3,24,12,0,628,23,1,0,0,0,629,635,
		3,18,9,0,630,635,3,26,13,0,631,635,3,512,256,0,632,635,5,197,0,0,633,635,
		3,418,209,0,634,629,1,0,0,0,634,630,1,0,0,0,634,631,1,0,0,0,634,632,1,
		0,0,0,634,633,1,0,0,0,635,25,1,0,0,0,636,645,5,149,0,0,637,642,3,24,12,
		0,638,639,5,152,0,0,639,641,3,24,12,0,640,638,1,0,0,0,641,644,1,0,0,0,
		642,640,1,0,0,0,642,643,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,645,637,
		1,0,0,0,645,646,1,0,0,0,646,648,1,0,0,0,647,649,5,152,0,0,648,647,1,0,
		0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,651,5,150,0,0,651,27,1,0,0,0,652,
		654,3,30,15,0,653,652,1,0,0,0,653,654,1,0,0,0,654,670,1,0,0,0,655,671,
		3,32,16,0,656,671,3,78,39,0,657,671,3,82,41,0,658,671,3,88,44,0,659,671,
		3,90,45,0,660,671,3,104,52,0,661,671,3,146,73,0,662,671,3,148,74,0,663,
		671,3,150,75,0,664,671,3,34,17,0,665,671,3,38,19,0,666,671,3,116,58,0,
		667,671,3,108,54,0,668,671,3,110,55,0,669,671,3,112,56,0,670,655,1,0,0,
		0,670,656,1,0,0,0,670,657,1,0,0,0,670,658,1,0,0,0,670,659,1,0,0,0,670,
		660,1,0,0,0,670,661,1,0,0,0,670,662,1,0,0,0,670,663,1,0,0,0,670,664,1,
		0,0,0,670,665,1,0,0,0,670,666,1,0,0,0,670,667,1,0,0,0,670,668,1,0,0,0,
		670,669,1,0,0,0,671,673,1,0,0,0,672,674,3,218,109,0,673,672,1,0,0,0,673,
		674,1,0,0,0,674,29,1,0,0,0,675,676,5,129,0,0,676,677,5,197,0,0,677,31,
		1,0,0,0,678,679,5,51,0,0,679,681,3,180,90,0,680,678,1,0,0,0,680,681,1,
		0,0,0,681,684,1,0,0,0,682,683,5,50,0,0,683,685,3,182,91,0,684,682,1,0,
		0,0,684,685,1,0,0,0,685,686,1,0,0,0,686,687,5,24,0,0,687,690,3,204,102,
		0,688,689,5,30,0,0,689,691,3,190,95,0,690,688,1,0,0,0,690,691,1,0,0,0,
		691,693,1,0,0,0,692,694,3,268,134,0,693,692,1,0,0,0,693,694,1,0,0,0,694,
		697,1,0,0,0,695,696,5,13,0,0,696,698,3,202,101,0,697,695,1,0,0,0,697,698,
		1,0,0,0,698,702,1,0,0,0,699,700,5,40,0,0,700,701,5,39,0,0,701,703,3,234,
		117,0,702,699,1,0,0,0,702,703,1,0,0,0,703,706,1,0,0,0,704,705,5,41,0,0,
		705,707,3,250,125,0,706,704,1,0,0,0,706,707,1,0,0,0,707,710,1,0,0,0,708,
		709,5,46,0,0,709,711,3,252,126,0,710,708,1,0,0,0,710,711,1,0,0,0,711,715,
		1,0,0,0,712,713,5,53,0,0,713,714,5,39,0,0,714,716,3,246,123,0,715,712,
		1,0,0,0,715,716,1,0,0,0,716,719,1,0,0,0,717,718,5,110,0,0,718,720,3,258,
		129,0,719,717,1,0,0,0,719,720,1,0,0,0,720,33,1,0,0,0,721,722,5,37,0,0,
		722,738,3,36,18,0,723,739,3,68,34,0,724,733,3,58,29,0,725,727,3,62,31,
		0,726,725,1,0,0,0,727,728,1,0,0,0,728,726,1,0,0,0,728,729,1,0,0,0,729,
		731,1,0,0,0,730,732,3,66,33,0,731,730,1,0,0,0,731,732,1,0,0,0,732,734,
		1,0,0,0,733,726,1,0,0,0,733,734,1,0,0,0,734,739,1,0,0,0,735,739,3,70,35,
		0,736,739,3,60,30,0,737,739,3,42,21,0,738,723,1,0,0,0,738,724,1,0,0,0,
		738,735,1,0,0,0,738,736,1,0,0,0,738,737,1,0,0,0,739,35,1,0,0,0,740,743,
		3,390,195,0,741,743,3,220,110,0,742,740,1,0,0,0,742,741,1,0,0,0,743,747,
		1,0,0,0,744,745,5,14,0,0,745,748,3,478,239,0,746,748,3,478,239,0,747,744,
		1,0,0,0,747,746,1,0,0,0,747,748,1,0,0,0,748,37,1,0,0,0,749,750,5,112,0,
		0,750,751,5,57,0,0,751,752,3,40,20,0,752,39,1,0,0,0,753,757,3,418,209,
		0,754,755,5,14,0,0,755,758,3,478,239,0,756,758,3,478,239,0,757,754,1,0,
		0,0,757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,760,5,80,0,0,760,
		763,3,72,36,0,761,762,5,13,0,0,762,764,3,202,101,0,763,761,1,0,0,0,763,
		764,1,0,0,0,764,41,1,0,0,0,765,767,5,123,0,0,766,768,5,51,0,0,767,766,
		1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,0,769,773,5,197,0,0,770,771,5,14,
		0,0,771,774,3,478,239,0,772,774,3,478,239,0,773,770,1,0,0,0,773,772,1,
		0,0,0,773,774,1,0,0,0,774,785,1,0,0,0,775,786,3,50,25,0,776,777,5,13,0,
		0,777,779,3,202,101,0,778,776,1,0,0,0,778,779,1,0,0,0,779,781,1,0,0,0,
		780,782,3,44,22,0,781,780,1,0,0,0,782,783,1,0,0,0,783,781,1,0,0,0,783,
		784,1,0,0,0,784,786,1,0,0,0,785,775,1,0,0,0,785,778,1,0,0,0,786,43,1,0,
		0,0,787,790,3,46,23,0,788,790,3,52,26,0,789,787,1,0,0,0,789,788,1,0,0,
		0,790,45,1,0,0,0,791,792,5,27,0,0,792,795,5,124,0,0,793,794,5,9,0,0,794,
		796,3,302,151,0,795,793,1,0,0,0,795,796,1,0,0,0,796,798,1,0,0,0,797,799,
		3,48,24,0,798,797,1,0,0,0,799,800,1,0,0,0,800,798,1,0,0,0,800,801,1,0,
		0,0,801,47,1,0,0,0,802,817,5,28,0,0,803,804,5,112,0,0,804,805,5,80,0,0,
		805,806,3,72,36,0,806,809,1,0,0,0,807,808,5,13,0,0,808,810,3,202,101,0,
		809,807,1,0,0,0,809,810,1,0,0,0,810,818,1,0,0,0,811,814,5,78,0,0,812,813,
		5,13,0,0,813,815,3,202,101,0,814,812,1,0,0,0,814,815,1,0,0,0,815,818,1,
		0,0,0,816,818,3,56,28,0,817,803,1,0,0,0,817,811,1,0,0,0,817,816,1,0,0,
		0,818,49,1,0,0,0,819,824,5,50,0,0,820,821,5,145,0,0,821,822,3,186,93,0,
		822,823,5,146,0,0,823,825,1,0,0,0,824,820,1,0,0,0,824,825,1,0,0,0,825,
		826,1,0,0,0,826,827,5,24,0,0,827,828,3,206,103,0,828,51,1,0,0,0,829,830,
		5,27,0,0,830,831,5,10,0,0,831,834,5,124,0,0,832,833,5,9,0,0,833,835,3,
		302,151,0,834,832,1,0,0,0,834,835,1,0,0,0,835,837,1,0,0,0,836,838,3,54,
		27,0,837,836,1,0,0,0,838,839,1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,
		53,1,0,0,0,841,842,5,28,0,0,842,843,3,56,28,0,843,55,1,0,0,0,844,847,5,
		50,0,0,845,846,5,51,0,0,846,848,3,418,209,0,847,845,1,0,0,0,847,848,1,
		0,0,0,848,853,1,0,0,0,849,850,5,145,0,0,850,851,3,186,93,0,851,852,5,146,
		0,0,852,854,1,0,0,0,853,849,1,0,0,0,853,854,1,0,0,0,854,856,1,0,0,0,855,
		857,3,184,92,0,856,855,1,0,0,0,856,857,1,0,0,0,857,858,1,0,0,0,858,859,
		5,24,0,0,859,862,3,206,103,0,860,861,5,13,0,0,861,863,3,202,101,0,862,
		860,1,0,0,0,862,863,1,0,0,0,863,57,1,0,0,0,864,865,5,50,0,0,865,867,3,
		182,91,0,866,864,1,0,0,0,866,867,1,0,0,0,867,868,1,0,0,0,868,873,5,24,
		0,0,869,871,5,9,0,0,870,869,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,872,
		874,5,78,0,0,873,870,1,0,0,0,873,874,1,0,0,0,874,876,1,0,0,0,875,877,5,
		42,0,0,876,875,1,0,0,0,876,877,1,0,0,0,877,878,1,0,0,0,878,880,3,206,103,
		0,879,881,3,76,38,0,880,879,1,0,0,0,880,881,1,0,0,0,881,884,1,0,0,0,882,
		883,5,13,0,0,883,885,3,202,101,0,884,882,1,0,0,0,884,885,1,0,0,0,885,889,
		1,0,0,0,886,887,5,40,0,0,887,888,5,39,0,0,888,890,3,234,117,0,889,886,
		1,0,0,0,889,890,1,0,0,0,890,893,1,0,0,0,891,892,5,41,0,0,892,894,3,250,
		125,0,893,891,1,0,0,0,893,894,1,0,0,0,894,898,1,0,0,0,895,896,5,53,0,0,
		896,897,5,39,0,0,897,899,3,246,123,0,898,895,1,0,0,0,898,899,1,0,0,0,899,
		902,1,0,0,0,900,901,5,110,0,0,901,903,3,258,129,0,902,900,1,0,0,0,902,
		903,1,0,0,0,903,59,1,0,0,0,904,905,5,112,0,0,905,909,5,197,0,0,906,907,
		5,14,0,0,907,910,3,478,239,0,908,910,3,478,239,0,909,906,1,0,0,0,909,908,
		1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,912,5,80,0,0,912,915,3,72,
		36,0,913,914,5,13,0,0,914,916,3,202,101,0,915,913,1,0,0,0,915,916,1,0,
		0,0,916,61,1,0,0,0,917,918,5,50,0,0,918,919,3,182,91,0,919,920,5,24,0,
		0,920,922,3,206,103,0,921,923,3,64,32,0,922,921,1,0,0,0,922,923,1,0,0,
		0,923,926,1,0,0,0,924,925,5,13,0,0,925,927,3,202,101,0,926,924,1,0,0,0,
		926,927,1,0,0,0,927,63,1,0,0,0,928,929,5,30,0,0,929,933,3,392,196,0,930,
		931,5,14,0,0,931,934,3,478,239,0,932,934,3,478,239,0,933,930,1,0,0,0,933,
		932,1,0,0,0,933,934,1,0,0,0,934,65,1,0,0,0,935,938,5,46,0,0,936,939,5,
		48,0,0,937,939,5,43,0,0,938,936,1,0,0,0,938,937,1,0,0,0,939,67,1,0,0,0,
		940,941,5,78,0,0,941,944,3,76,38,0,942,943,5,13,0,0,943,945,3,202,101,
		0,944,942,1,0,0,0,944,945,1,0,0,0,945,69,1,0,0,0,946,947,5,80,0,0,947,
		948,3,72,36,0,948,71,1,0,0,0,949,954,3,74,37,0,950,951,5,152,0,0,951,953,
		3,74,37,0,952,950,1,0,0,0,953,956,1,0,0,0,954,952,1,0,0,0,954,955,1,0,
		0,0,955,73,1,0,0,0,956,954,1,0,0,0,957,958,3,462,231,0,958,959,5,142,0,
		0,959,960,3,302,151,0,960,963,1,0,0,0,961,963,3,302,151,0,962,957,1,0,
		0,0,962,961,1,0,0,0,963,75,1,0,0,0,964,965,5,30,0,0,965,969,5,197,0,0,
		966,967,5,14,0,0,967,970,3,478,239,0,968,970,3,478,239,0,969,966,1,0,0,
		0,969,968,1,0,0,0,969,970,1,0,0,0,970,77,1,0,0,0,971,972,5,1,0,0,972,973,
		5,2,0,0,973,975,5,197,0,0,974,976,3,226,113,0,975,974,1,0,0,0,975,976,
		1,0,0,0,976,979,1,0,0,0,977,980,5,61,0,0,978,980,5,62,0,0,979,977,1,0,
		0,0,979,978,1,0,0,0,979,980,1,0,0,0,980,982,1,0,0,0,981,983,5,14,0,0,982,
		981,1,0,0,0,982,983,1,0,0,0,983,989,1,0,0,0,984,990,3,80,40,0,985,986,
		5,145,0,0,986,987,3,96,48,0,987,988,5,146,0,0,988,990,1,0,0,0,989,984,
		1,0,0,0,989,985,1,0,0,0,990,996,1,0,0,0,991,994,5,50,0,0,992,993,5,13,
		0,0,993,995,3,302,151,0,994,992,1,0,0,0,994,995,1,0,0,0,995,997,1,0,0,
		0,996,991,1,0,0,0,996,997,1,0,0,0,997,79,1,0,0,0,998,999,5,24,0,0,999,
		1000,3,100,50,0,1000,1001,5,30,0,0,1001,1003,1,0,0,0,1002,998,1,0,0,0,
		1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,1005,3,418,209,0,1005,81,1,0,
		0,0,1006,1008,5,1,0,0,1007,1009,5,197,0,0,1008,1007,1,0,0,0,1008,1009,
		1,0,0,0,1009,1010,1,0,0,0,1010,1011,5,85,0,0,1011,1012,5,197,0,0,1012,
		1013,5,37,0,0,1013,1014,5,197,0,0,1014,1015,5,145,0,0,1015,1016,3,84,42,
		0,1016,1017,5,146,0,0,1017,83,1,0,0,0,1018,1023,3,86,43,0,1019,1020,5,
		152,0,0,1020,1022,3,86,43,0,1021,1019,1,0,0,0,1022,1025,1,0,0,0,1023,1021,
		1,0,0,0,1023,1024,1,0,0,0,1024,85,1,0,0,0,1025,1023,1,0,0,0,1026,1033,
		3,302,151,0,1027,1029,5,145,0,0,1028,1030,3,436,218,0,1029,1028,1,0,0,
		0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,1031,1033,5,146,0,0,1032,1026,1,
		0,0,0,1032,1027,1,0,0,0,1033,1042,1,0,0,0,1034,1040,5,197,0,0,1035,1037,
		5,145,0,0,1036,1038,3,436,218,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,
		1039,1,0,0,0,1039,1041,5,146,0,0,1040,1035,1,0,0,0,1040,1041,1,0,0,0,1041,
		1043,1,0,0,0,1042,1034,1,0,0,0,1042,1043,1,0,0,0,1043,87,1,0,0,0,1044,
		1046,5,1,0,0,1045,1047,5,197,0,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,
		1048,1,0,0,0,1048,1049,5,81,0,0,1049,1050,3,412,206,0,1050,1053,5,197,
		0,0,1051,1052,5,142,0,0,1052,1054,3,302,151,0,1053,1051,1,0,0,0,1053,1054,
		1,0,0,0,1054,89,1,0,0,0,1055,1056,5,1,0,0,1056,1057,5,82,0,0,1057,1059,
		5,197,0,0,1058,1060,5,14,0,0,1059,1058,1,0,0,0,1059,1060,1,0,0,0,1060,
		1061,1,0,0,0,1061,1062,5,145,0,0,1062,1063,3,92,46,0,1063,1064,5,146,0,
		0,1064,91,1,0,0,0,1065,1070,3,94,47,0,1066,1067,5,152,0,0,1067,1069,3,
		94,47,0,1068,1066,1,0,0,0,1069,1072,1,0,0,0,1070,1068,1,0,0,0,1070,1071,
		1,0,0,0,1071,93,1,0,0,0,1072,1070,1,0,0,0,1073,1077,5,197,0,0,1074,1078,
		3,412,206,0,1075,1078,3,346,173,0,1076,1078,3,462,231,0,1077,1074,1,0,
		0,0,1077,1075,1,0,0,0,1077,1076,1,0,0,0,1078,1080,1,0,0,0,1079,1081,5,
		197,0,0,1080,1079,1,0,0,0,1080,1081,1,0,0,0,1081,1083,1,0,0,0,1082,1084,
		5,197,0,0,1083,1082,1,0,0,0,1083,1084,1,0,0,0,1084,1089,1,0,0,0,1085,1088,
		3,404,202,0,1086,1088,3,18,9,0,1087,1085,1,0,0,0,1087,1086,1,0,0,0,1088,
		1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,95,1,0,0,0,1091,
		1089,1,0,0,0,1092,1097,3,98,49,0,1093,1094,5,152,0,0,1094,1096,3,98,49,
		0,1095,1093,1,0,0,0,1096,1099,1,0,0,0,1097,1095,1,0,0,0,1097,1098,1,0,
		0,0,1098,97,1,0,0,0,1099,1097,1,0,0,0,1100,1103,3,418,209,0,1101,1104,
		5,109,0,0,1102,1104,3,412,206,0,1103,1101,1,0,0,0,1103,1102,1,0,0,0,1104,
		99,1,0,0,0,1105,1110,3,102,51,0,1106,1107,5,152,0,0,1107,1109,3,102,51,
		0,1108,1106,1,0,0,0,1109,1112,1,0,0,0,1110,1108,1,0,0,0,1110,1111,1,0,
		0,0,1111,101,1,0,0,0,1112,1110,1,0,0,0,1113,1124,5,165,0,0,1114,1117,3,
		462,231,0,1115,1116,5,14,0,0,1116,1118,5,197,0,0,1117,1115,1,0,0,0,1117,
		1118,1,0,0,0,1118,1124,1,0,0,0,1119,1120,3,512,256,0,1120,1121,5,14,0,
		0,1121,1122,5,197,0,0,1122,1124,1,0,0,0,1123,1113,1,0,0,0,1123,1114,1,
		0,0,0,1123,1119,1,0,0,0,1124,103,1,0,0,0,1125,1127,5,1,0,0,1126,1128,5,
		197,0,0,1127,1126,1,0,0,0,1127,1128,1,0,0,0,1128,1129,1,0,0,0,1129,1130,
		3,106,53,0,1130,105,1,0,0,0,1131,1132,5,59,0,0,1132,1134,5,197,0,0,1133,
		1135,5,14,0,0,1134,1133,1,0,0,0,1134,1135,1,0,0,0,1135,1142,1,0,0,0,1136,
		1143,3,176,88,0,1137,1139,5,145,0,0,1138,1140,3,96,48,0,1139,1138,1,0,
		0,0,1139,1140,1,0,0,0,1140,1141,1,0,0,0,1141,1143,5,146,0,0,1142,1136,
		1,0,0,0,1142,1137,1,0,0,0,1143,1147,1,0,0,0,1144,1146,3,174,87,0,1145,
		1144,1,0,0,0,1146,1149,1,0,0,0,1147,1145,1,0,0,0,1147,1148,1,0,0,0,1148,
		107,1,0,0,0,1149,1147,1,0,0,0,1150,1151,5,78,0,0,1151,1152,5,30,0,0,1152,
		1156,3,418,209,0,1153,1154,5,14,0,0,1154,1157,3,478,239,0,1155,1157,3,
		478,239,0,1156,1153,1,0,0,0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,1160,
		1,0,0,0,1158,1159,5,13,0,0,1159,1161,3,202,101,0,1160,1158,1,0,0,0,1160,
		1161,1,0,0,0,1161,109,1,0,0,0,1162,1163,5,112,0,0,1163,1164,3,40,20,0,
		1164,111,1,0,0,0,1165,1166,5,50,0,0,1166,1167,3,182,91,0,1167,1168,5,52,
		0,0,1168,1173,3,114,57,0,1169,1170,5,152,0,0,1170,1172,3,114,57,0,1171,
		1169,1,0,0,0,1172,1175,1,0,0,0,1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,
		113,1,0,0,0,1175,1173,1,0,0,0,1176,1177,5,145,0,0,1177,1178,3,436,218,
		0,1178,1179,5,146,0,0,1179,115,1,0,0,0,1180,1181,5,1,0,0,1181,1182,5,132,
		0,0,1182,1184,5,197,0,0,1183,1185,5,14,0,0,1184,1183,1,0,0,0,1184,1185,
		1,0,0,0,1185,1186,1,0,0,0,1186,1187,3,118,59,0,1187,117,1,0,0,0,1188,1192,
		3,120,60,0,1189,1191,3,120,60,0,1190,1189,1,0,0,0,1191,1194,1,0,0,0,1192,
		1190,1,0,0,0,1192,1193,1,0,0,0,1193,119,1,0,0,0,1194,1192,1,0,0,0,1195,
		1197,3,18,9,0,1196,1195,1,0,0,0,1197,1200,1,0,0,0,1198,1196,1,0,0,0,1198,
		1199,1,0,0,0,1199,1203,1,0,0,0,1200,1198,1,0,0,0,1201,1204,5,197,0,0,1202,
		1204,5,24,0,0,1203,1201,1,0,0,0,1203,1202,1,0,0,0,1204,1206,1,0,0,0,1205,
		1207,3,122,61,0,1206,1205,1,0,0,0,1206,1207,1,0,0,0,1207,1209,1,0,0,0,
		1208,1210,3,132,66,0,1209,1208,1,0,0,0,1209,1210,1,0,0,0,1210,1211,1,0,
		0,0,1211,1213,5,149,0,0,1212,1214,3,142,71,0,1213,1212,1,0,0,0,1213,1214,
		1,0,0,0,1214,1216,1,0,0,0,1215,1217,5,152,0,0,1216,1215,1,0,0,0,1216,1217,
		1,0,0,0,1217,1218,1,0,0,0,1218,1223,5,150,0,0,1219,1220,3,104,52,0,1220,
		1221,5,152,0,0,1221,1223,1,0,0,0,1222,1198,1,0,0,0,1222,1219,1,0,0,0,1223,
		121,1,0,0,0,1224,1225,5,145,0,0,1225,1226,3,124,62,0,1226,1227,5,146,0,
		0,1227,123,1,0,0,0,1228,1233,3,126,63,0,1229,1230,5,152,0,0,1230,1232,
		3,126,63,0,1231,1229,1,0,0,0,1232,1235,1,0,0,0,1233,1231,1,0,0,0,1233,
		1234,1,0,0,0,1234,125,1,0,0,0,1235,1233,1,0,0,0,1236,1239,3,418,209,0,
		1237,1239,3,128,64,0,1238,1236,1,0,0,0,1238,1237,1,0,0,0,1239,1241,1,0,
		0,0,1240,1242,3,130,65,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,127,
		1,0,0,0,1243,1244,5,145,0,0,1244,1245,3,418,209,0,1245,1246,5,152,0,0,
		1246,1247,3,418,209,0,1247,1248,1,0,0,0,1248,1249,5,146,0,0,1249,129,1,
		0,0,0,1250,1251,5,14,0,0,1251,1252,5,197,0,0,1252,131,1,0,0,0,1253,1254,
		5,140,0,0,1254,1259,3,134,67,0,1255,1256,5,152,0,0,1256,1258,3,134,67,
		0,1257,1255,1,0,0,0,1258,1261,1,0,0,0,1259,1257,1,0,0,0,1259,1260,1,0,
		0,0,1260,133,1,0,0,0,1261,1259,1,0,0,0,1262,1264,3,418,209,0,1263,1265,
		3,136,68,0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,1265,135,1,0,0,0,1266,1267,
		5,172,0,0,1267,1272,3,138,69,0,1268,1269,5,152,0,0,1269,1271,3,138,69,
		0,1270,1268,1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1272,1273,1,0,
		0,0,1273,1275,1,0,0,0,1274,1272,1,0,0,0,1275,1276,5,170,0,0,1276,137,1,
		0,0,0,1277,1280,3,140,70,0,1278,1280,5,144,0,0,1279,1277,1,0,0,0,1279,
		1278,1,0,0,0,1280,139,1,0,0,0,1281,1283,3,418,209,0,1282,1284,3,136,68,
		0,1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,141,1,0,0,0,1285,1290,3,144,
		72,0,1286,1287,5,152,0,0,1287,1289,3,144,72,0,1288,1286,1,0,0,0,1289,1292,
		1,0,0,0,1290,1288,1,0,0,0,1290,1291,1,0,0,0,1291,143,1,0,0,0,1292,1290,
		1,0,0,0,1293,1294,5,24,0,0,1294,1295,7,1,0,0,1295,1296,5,145,0,0,1296,
		1297,3,32,16,0,1297,1298,5,146,0,0,1298,1307,1,0,0,0,1299,1300,5,197,0,
		0,1300,1304,7,1,0,0,1301,1305,3,302,151,0,1302,1305,3,520,260,0,1303,1305,
		3,522,261,0,1304,1301,1,0,0,0,1304,1302,1,0,0,0,1304,1303,1,0,0,0,1305,
		1307,1,0,0,0,1306,1293,1,0,0,0,1306,1299,1,0,0,0,1307,145,1,0,0,0,1308,
		1309,5,1,0,0,1309,1310,5,129,0,0,1310,1312,5,197,0,0,1311,1313,5,14,0,
		0,1312,1311,1,0,0,0,1312,1313,1,0,0,0,1313,1314,1,0,0,0,1314,1315,3,152,
		76,0,1315,147,1,0,0,0,1316,1317,5,1,0,0,1317,1318,3,8,4,0,1318,149,1,0,
		0,0,1319,1320,5,1,0,0,1320,1321,3,6,3,0,1321,151,1,0,0,0,1322,1334,3,156,
		78,0,1323,1324,3,154,77,0,1324,1325,5,152,0,0,1325,1330,3,154,77,0,1326,
		1327,5,152,0,0,1327,1329,3,154,77,0,1328,1326,1,0,0,0,1329,1332,1,0,0,
		0,1330,1328,1,0,0,0,1330,1331,1,0,0,0,1331,1334,1,0,0,0,1332,1330,1,0,
		0,0,1333,1322,1,0,0,0,1333,1323,1,0,0,0,1334,153,1,0,0,0,1335,1336,5,129,
		0,0,1336,1338,5,197,0,0,1337,1339,5,14,0,0,1338,1337,1,0,0,0,1338,1339,
		1,0,0,0,1339,1340,1,0,0,0,1340,1341,3,156,78,0,1341,155,1,0,0,0,1342,1346,
		5,128,0,0,1343,1344,5,188,0,0,1344,1347,5,197,0,0,1345,1347,3,160,80,0,
		1346,1343,1,0,0,0,1346,1345,1,0,0,0,1347,1350,1,0,0,0,1348,1349,5,29,0,
		0,1349,1351,3,160,80,0,1350,1348,1,0,0,0,1350,1351,1,0,0,0,1351,1419,1,
		0,0,0,1352,1354,5,130,0,0,1353,1355,5,39,0,0,1354,1353,1,0,0,0,1354,1355,
		1,0,0,0,1355,1357,1,0,0,0,1356,1358,3,158,79,0,1357,1356,1,0,0,0,1357,
		1358,1,0,0,0,1358,1362,1,0,0,0,1359,1360,5,188,0,0,1360,1361,5,197,0,0,
		1361,1363,5,9,0,0,1362,1359,1,0,0,0,1362,1363,1,0,0,0,1363,1364,1,0,0,
		0,1364,1370,3,160,80,0,1365,1367,5,131,0,0,1366,1368,5,39,0,0,1367,1366,
		1,0,0,0,1367,1368,1,0,0,0,1368,1369,1,0,0,0,1369,1371,3,160,80,0,1370,
		1365,1,0,0,0,1370,1371,1,0,0,0,1371,1419,1,0,0,0,1372,1374,5,117,0,0,1373,
		1375,5,39,0,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,0,0,1376,
		1381,3,164,82,0,1377,1378,5,152,0,0,1378,1380,3,164,82,0,1379,1377,1,0,
		0,0,1380,1383,1,0,0,0,1381,1379,1,0,0,0,1381,1382,1,0,0,0,1382,1385,1,
		0,0,0,1383,1381,1,0,0,0,1384,1386,3,170,85,0,1385,1384,1,0,0,0,1385,1386,
		1,0,0,0,1386,1388,1,0,0,0,1387,1389,3,172,86,0,1388,1387,1,0,0,0,1388,
		1389,1,0,0,0,1389,1419,1,0,0,0,1390,1395,3,168,84,0,1391,1392,5,152,0,
		0,1392,1394,3,168,84,0,1393,1391,1,0,0,0,1394,1397,1,0,0,0,1395,1393,1,
		0,0,0,1395,1396,1,0,0,0,1396,1398,1,0,0,0,1397,1395,1,0,0,0,1398,1399,
		5,30,0,0,1399,1400,3,390,195,0,1400,1419,1,0,0,0,1401,1403,5,19,0,0,1402,
		1404,5,39,0,0,1403,1402,1,0,0,0,1403,1404,1,0,0,0,1404,1405,1,0,0,0,1405,
		1410,3,166,83,0,1406,1407,5,152,0,0,1407,1409,3,166,83,0,1408,1406,1,0,
		0,0,1409,1412,1,0,0,0,1410,1408,1,0,0,0,1410,1411,1,0,0,0,1411,1413,1,
		0,0,0,1412,1410,1,0,0,0,1413,1414,5,197,0,0,1414,1416,3,506,253,0,1415,
		1417,5,197,0,0,1416,1415,1,0,0,0,1416,1417,1,0,0,0,1417,1419,1,0,0,0,1418,
		1342,1,0,0,0,1418,1352,1,0,0,0,1418,1372,1,0,0,0,1418,1390,1,0,0,0,1418,
		1401,1,0,0,0,1419,157,1,0,0,0,1420,1421,5,42,0,0,1421,1423,5,145,0,0,1422,
		1424,3,436,218,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,1425,1,0,0,0,
		1425,1426,5,146,0,0,1426,159,1,0,0,0,1427,1443,3,162,81,0,1428,1431,3,
		220,110,0,1429,1430,5,188,0,0,1430,1432,5,197,0,0,1431,1429,1,0,0,0,1431,
		1432,1,0,0,0,1432,1437,1,0,0,0,1433,1435,5,14,0,0,1434,1433,1,0,0,0,1434,
		1435,1,0,0,0,1435,1436,1,0,0,0,1436,1438,3,480,240,0,1437,1434,1,0,0,0,
		1437,1438,1,0,0,0,1438,1443,1,0,0,0,1439,1443,3,260,130,0,1440,1441,5,
		119,0,0,1441,1443,3,486,243,0,1442,1427,1,0,0,0,1442,1428,1,0,0,0,1442,
		1439,1,0,0,0,1442,1440,1,0,0,0,1443,161,1,0,0,0,1444,1449,3,390,195,0,
		1445,1447,5,14,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,
		0,1448,1450,5,197,0,0,1449,1446,1,0,0,0,1449,1450,1,0,0,0,1450,163,1,0,
		0,0,1451,1456,3,462,231,0,1452,1453,7,2,0,0,1453,1455,3,462,231,0,1454,
		1452,1,0,0,0,1455,1458,1,0,0,0,1456,1454,1,0,0,0,1456,1457,1,0,0,0,1457,
		1459,1,0,0,0,1458,1456,1,0,0,0,1459,1460,5,30,0,0,1460,1465,3,390,195,
		0,1461,1463,5,14,0,0,1462,1461,1,0,0,0,1462,1463,1,0,0,0,1463,1464,1,0,
		0,0,1464,1466,3,480,240,0,1465,1462,1,0,0,0,1465,1466,1,0,0,0,1466,165,
		1,0,0,0,1467,1468,3,462,231,0,1468,1469,5,30,0,0,1469,1470,3,390,195,0,
		1470,167,1,0,0,0,1471,1473,5,40,0,0,1472,1474,5,39,0,0,1473,1472,1,0,0,
		0,1473,1474,1,0,0,0,1474,1475,1,0,0,0,1475,1476,3,302,151,0,1476,1477,
		5,14,0,0,1477,1478,5,197,0,0,1478,169,1,0,0,0,1479,1481,5,130,0,0,1480,
		1482,5,39,0,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,1483,1,0,0,0,1483,
		1488,3,162,81,0,1484,1485,5,152,0,0,1485,1487,3,162,81,0,1486,1484,1,0,
		0,0,1487,1490,1,0,0,0,1488,1486,1,0,0,0,1488,1489,1,0,0,0,1489,171,1,0,
		0,0,1490,1488,1,0,0,0,1491,1493,5,131,0,0,1492,1494,5,39,0,0,1493,1492,
		1,0,0,0,1493,1494,1,0,0,0,1494,1495,1,0,0,0,1495,1496,3,160,80,0,1496,
		173,1,0,0,0,1497,1498,5,197,0,0,1498,1499,3,186,93,0,1499,175,1,0,0,0,
		1500,1505,3,178,89,0,1501,1502,5,152,0,0,1502,1504,3,178,89,0,1503,1501,
		1,0,0,0,1504,1507,1,0,0,0,1505,1503,1,0,0,0,1505,1506,1,0,0,0,1506,177,
		1,0,0,0,1507,1505,1,0,0,0,1508,1511,5,165,0,0,1509,1511,3,412,206,0,1510,
		1508,1,0,0,0,1510,1509,1,0,0,0,1511,179,1,0,0,0,1512,1513,5,82,0,0,1513,
		1514,5,197,0,0,1514,181,1,0,0,0,1515,1519,5,57,0,0,1516,1519,5,56,0,0,
		1517,1519,5,58,0,0,1518,1515,1,0,0,0,1518,1516,1,0,0,0,1518,1517,1,0,0,
		0,1518,1519,1,0,0,0,1519,1520,1,0,0,0,1520,1521,5,51,0,0,1521,1527,3,418,
		209,0,1522,1524,5,145,0,0,1523,1525,3,186,93,0,1524,1523,1,0,0,0,1524,
		1525,1,0,0,0,1525,1526,1,0,0,0,1526,1528,5,146,0,0,1527,1522,1,0,0,0,1527,
		1528,1,0,0,0,1528,1530,1,0,0,0,1529,1531,3,184,92,0,1530,1529,1,0,0,0,
		1530,1531,1,0,0,0,1531,183,1,0,0,0,1532,1533,5,138,0,0,1533,1534,5,145,
		0,0,1534,1535,3,302,151,0,1535,1536,5,146,0,0,1536,185,1,0,0,0,1537,1542,
		5,197,0,0,1538,1539,5,152,0,0,1539,1541,5,197,0,0,1540,1538,1,0,0,0,1541,
		1544,1,0,0,0,1542,1540,1,0,0,0,1542,1543,1,0,0,0,1543,187,1,0,0,0,1544,
		1542,1,0,0,0,1545,1550,3,480,240,0,1546,1547,5,152,0,0,1547,1549,3,480,
		240,0,1548,1546,1,0,0,0,1549,1552,1,0,0,0,1550,1548,1,0,0,0,1550,1551,
		1,0,0,0,1551,189,1,0,0,0,1552,1550,1,0,0,0,1553,1556,3,216,108,0,1554,
		1557,3,192,96,0,1555,1557,3,194,97,0,1556,1554,1,0,0,0,1556,1555,1,0,0,
		0,1557,191,1,0,0,0,1558,1559,5,152,0,0,1559,1561,3,216,108,0,1560,1558,
		1,0,0,0,1561,1564,1,0,0,0,1562,1560,1,0,0,0,1562,1563,1,0,0,0,1563,193,
		1,0,0,0,1564,1562,1,0,0,0,1565,1569,3,196,98,0,1566,1568,3,196,98,0,1567,
		1566,1,0,0,0,1568,1571,1,0,0,0,1569,1567,1,0,0,0,1569,1570,1,0,0,0,1570,
		195,1,0,0,0,1571,1569,1,0,0,0,1572,1576,5,34,0,0,1573,1576,5,35,0,0,1574,
		1576,5,36,0,0,1575,1572,1,0,0,0,1575,1573,1,0,0,0,1575,1574,1,0,0,0,1576,
		1577,1,0,0,0,1577,1579,5,31,0,0,1578,1575,1,0,0,0,1578,1579,1,0,0,0,1579,
		1582,1,0,0,0,1580,1582,5,32,0,0,1581,1578,1,0,0,0,1581,1580,1,0,0,0,1582,
		1583,1,0,0,0,1583,1584,5,33,0,0,1584,1586,3,216,108,0,1585,1587,3,198,
		99,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,197,1,0,0,0,1588,1589,5,
		37,0,0,1589,1594,3,200,100,0,1590,1591,5,9,0,0,1591,1593,3,200,100,0,1592,
		1590,1,0,0,0,1593,1596,1,0,0,0,1594,1592,1,0,0,0,1594,1595,1,0,0,0,1595,
		199,1,0,0,0,1596,1594,1,0,0,0,1597,1598,3,462,231,0,1598,1599,5,142,0,
		0,1599,1600,3,462,231,0,1600,201,1,0,0,0,1601,1602,3,306,153,0,1602,203,
		1,0,0,0,1603,1607,5,56,0,0,1604,1607,5,57,0,0,1605,1607,5,58,0,0,1606,
		1603,1,0,0,0,1606,1604,1,0,0,0,1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,
		1609,1,0,0,0,1608,1610,5,42,0,0,1609,1608,1,0,0,0,1609,1610,1,0,0,0,1610,
		1611,1,0,0,0,1611,1612,3,206,103,0,1612,205,1,0,0,0,1613,1618,3,208,104,
		0,1614,1615,5,152,0,0,1615,1617,3,208,104,0,1616,1614,1,0,0,0,1617,1620,
		1,0,0,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,207,1,0,0,0,1620,1618,
		1,0,0,0,1621,1625,5,165,0,0,1622,1625,3,214,107,0,1623,1625,3,210,105,
		0,1624,1621,1,0,0,0,1624,1622,1,0,0,0,1624,1623,1,0,0,0,1625,209,1,0,0,
		0,1626,1628,3,302,151,0,1627,1629,3,212,106,0,1628,1627,1,0,0,0,1628,1629,
		1,0,0,0,1629,1634,1,0,0,0,1630,1632,5,14,0,0,1631,1630,1,0,0,0,1631,1632,
		1,0,0,0,1632,1633,1,0,0,0,1633,1635,3,480,240,0,1634,1631,1,0,0,0,1634,
		1635,1,0,0,0,1635,211,1,0,0,0,1636,1637,5,188,0,0,1637,1638,5,197,0,0,
		1638,213,1,0,0,0,1639,1640,5,197,0,0,1640,1641,5,182,0,0,1641,1644,5,165,
		0,0,1642,1643,5,14,0,0,1643,1645,5,197,0,0,1644,1642,1,0,0,0,1644,1645,
		1,0,0,0,1645,215,1,0,0,0,1646,1651,3,390,195,0,1647,1651,3,220,110,0,1648,
		1651,3,222,111,0,1649,1651,3,224,112,0,1650,1646,1,0,0,0,1650,1647,1,0,
		0,0,1650,1648,1,0,0,0,1650,1649,1,0,0,0,1651,1653,1,0,0,0,1652,1654,3,
		226,113,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1658,1,0,0,0,1655,1656,
		5,14,0,0,1656,1659,3,478,239,0,1657,1659,3,478,239,0,1658,1655,1,0,0,0,
		1658,1657,1,0,0,0,1658,1659,1,0,0,0,1659,1661,1,0,0,0,1660,1662,5,60,0,
		0,1661,1660,1,0,0,0,1661,1662,1,0,0,0,1662,1665,1,0,0,0,1663,1666,5,61,
		0,0,1664,1666,5,62,0,0,1665,1663,1,0,0,0,1665,1664,1,0,0,0,1665,1666,1,
		0,0,0,1666,217,1,0,0,0,1667,1668,5,120,0,0,1668,1674,5,197,0,0,1669,1671,
		5,145,0,0,1670,1672,3,436,218,0,1671,1670,1,0,0,0,1671,1672,1,0,0,0,1672,
		1673,1,0,0,0,1673,1675,5,146,0,0,1674,1669,1,0,0,0,1674,1675,1,0,0,0,1675,
		219,1,0,0,0,1676,1680,5,63,0,0,1677,1679,3,18,9,0,1678,1677,1,0,0,0,1679,
		1682,1,0,0,0,1680,1678,1,0,0,0,1680,1681,1,0,0,0,1681,1683,1,0,0,0,1682,
		1680,1,0,0,0,1683,1684,5,147,0,0,1684,1685,3,360,180,0,1685,1686,5,148,
		0,0,1686,221,1,0,0,0,1687,1688,5,64,0,0,1688,1689,5,151,0,0,1689,1690,
		5,197,0,0,1690,1693,5,147,0,0,1691,1694,5,195,0,0,1692,1694,5,194,0,0,
		1693,1691,1,0,0,0,1693,1692,1,0,0,0,1694,1700,1,0,0,0,1695,1698,5,65,0,
		0,1696,1699,5,195,0,0,1697,1699,5,194,0,0,1698,1696,1,0,0,0,1698,1697,
		1,0,0,0,1699,1701,1,0,0,0,1700,1695,1,0,0,0,1700,1701,1,0,0,0,1701,1702,
		1,0,0,0,1702,1703,5,148,0,0,1703,223,1,0,0,0,1704,1705,5,197,0,0,1705,
		1706,5,151,0,0,1706,1712,3,418,209,0,1707,1709,5,145,0,0,1708,1710,3,436,
		218,0,1709,1708,1,0,0,0,1709,1710,1,0,0,0,1710,1711,1,0,0,0,1711,1713,
		5,146,0,0,1712,1707,1,0,0,0,1712,1713,1,0,0,0,1713,1715,1,0,0,0,1714,1716,
		3,404,202,0,1715,1714,1,0,0,0,1715,1716,1,0,0,0,1716,225,1,0,0,0,1717,
		1718,5,182,0,0,1718,1723,3,228,114,0,1719,1720,5,182,0,0,1720,1722,3,228,
		114,0,1721,1719,1,0,0,0,1722,1725,1,0,0,0,1723,1721,1,0,0,0,1723,1724,
		1,0,0,0,1724,1736,1,0,0,0,1725,1723,1,0,0,0,1726,1727,5,189,0,0,1727,1732,
		3,230,115,0,1728,1729,5,189,0,0,1729,1731,3,230,115,0,1730,1728,1,0,0,
		0,1731,1734,1,0,0,0,1732,1730,1,0,0,0,1732,1733,1,0,0,0,1733,1736,1,0,
		0,0,1734,1732,1,0,0,0,1735,1717,1,0,0,0,1735,1726,1,0,0,0,1736,227,1,0,
		0,0,1737,1738,5,197,0,0,1738,1739,5,151,0,0,1739,1740,3,232,116,0,1740,
		229,1,0,0,0,1741,1742,5,197,0,0,1742,1744,5,151,0,0,1743,1741,1,0,0,0,
		1743,1744,1,0,0,0,1744,1745,1,0,0,0,1745,1746,3,232,116,0,1746,231,1,0,
		0,0,1747,1750,5,197,0,0,1748,1750,5,123,0,0,1749,1747,1,0,0,0,1749,1748,
		1,0,0,0,1750,1756,1,0,0,0,1751,1753,5,145,0,0,1752,1754,3,438,219,0,1753,
		1752,1,0,0,0,1753,1754,1,0,0,0,1754,1755,1,0,0,0,1755,1757,5,146,0,0,1756,
		1751,1,0,0,0,1756,1757,1,0,0,0,1757,233,1,0,0,0,1758,1763,3,236,118,0,
		1759,1760,5,152,0,0,1760,1762,3,236,118,0,1761,1759,1,0,0,0,1762,1765,
		1,0,0,0,1763,1761,1,0,0,0,1763,1764,1,0,0,0,1764,235,1,0,0,0,1765,1763,
		1,0,0,0,1766,1770,3,302,151,0,1767,1770,3,238,119,0,1768,1770,3,240,120,
		0,1769,1766,1,0,0,0,1769,1767,1,0,0,0,1769,1768,1,0,0,0,1770,237,1,0,0,
		0,1771,1772,7,3,0,0,1772,1773,5,145,0,0,1773,1778,3,244,122,0,1774,1775,
		5,152,0,0,1775,1777,3,244,122,0,1776,1774,1,0,0,0,1777,1780,1,0,0,0,1778,
		1776,1,0,0,0,1778,1779,1,0,0,0,1779,1781,1,0,0,0,1780,1778,1,0,0,0,1781,
		1782,5,146,0,0,1782,239,1,0,0,0,1783,1784,5,135,0,0,1784,1785,5,137,0,
		0,1785,1786,5,145,0,0,1786,1791,3,242,121,0,1787,1788,5,152,0,0,1788,1790,
		3,242,121,0,1789,1787,1,0,0,0,1790,1793,1,0,0,0,1791,1789,1,0,0,0,1791,
		1792,1,0,0,0,1792,1794,1,0,0,0,1793,1791,1,0,0,0,1794,1795,5,146,0,0,1795,
		241,1,0,0,0,1796,1799,3,238,119,0,1797,1799,3,244,122,0,1798,1796,1,0,
		0,0,1798,1797,1,0,0,0,1799,243,1,0,0,0,1800,1814,3,302,151,0,1801,1810,
		5,145,0,0,1802,1807,3,302,151,0,1803,1804,5,152,0,0,1804,1806,3,302,151,
		0,1805,1803,1,0,0,0,1806,1809,1,0,0,0,1807,1805,1,0,0,0,1807,1808,1,0,
		0,0,1808,1811,1,0,0,0,1809,1807,1,0,0,0,1810,1802,1,0,0,0,1810,1811,1,
		0,0,0,1811,1812,1,0,0,0,1812,1814,5,146,0,0,1813,1800,1,0,0,0,1813,1801,
		1,0,0,0,1814,245,1,0,0,0,1815,1820,3,248,124,0,1816,1817,5,152,0,0,1817,
		1819,3,248,124,0,1818,1816,1,0,0,0,1819,1822,1,0,0,0,1820,1818,1,0,0,0,
		1820,1821,1,0,0,0,1821,247,1,0,0,0,1822,1820,1,0,0,0,1823,1826,3,302,151,
		0,1824,1827,5,54,0,0,1825,1827,5,55,0,0,1826,1824,1,0,0,0,1826,1825,1,
		0,0,0,1826,1827,1,0,0,0,1827,249,1,0,0,0,1828,1829,3,306,153,0,1829,251,
		1,0,0,0,1830,1832,3,256,128,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,
		1837,1,0,0,0,1833,1838,5,43,0,0,1834,1838,5,48,0,0,1835,1838,5,49,0,0,
		1836,1838,5,79,0,0,1837,1833,1,0,0,0,1837,1834,1,0,0,0,1837,1835,1,0,0,
		0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1867,1,0,0,0,1839,1846,5,11,
		0,0,1840,1847,3,486,243,0,1841,1844,3,506,253,0,1842,1844,5,197,0,0,1843,
		1841,1,0,0,0,1843,1842,1,0,0,0,1844,1845,1,0,0,0,1845,1847,5,47,0,0,1846,
		1840,1,0,0,0,1846,1843,1,0,0,0,1847,1868,1,0,0,0,1848,1849,5,84,0,0,1849,
		1868,3,262,131,0,1850,1851,5,27,0,0,1851,1854,3,302,151,0,1852,1853,5,
		28,0,0,1853,1855,3,70,35,0,1854,1852,1,0,0,0,1854,1855,1,0,0,0,1855,1868,
		1,0,0,0,1856,1857,5,27,0,0,1857,1860,5,131,0,0,1858,1859,5,9,0,0,1859,
		1861,3,302,151,0,1860,1858,1,0,0,0,1860,1861,1,0,0,0,1861,1864,1,0,0,0,
		1862,1863,5,28,0,0,1863,1865,3,70,35,0,1864,1862,1,0,0,0,1864,1865,1,0,
		0,0,1865,1868,1,0,0,0,1866,1868,1,0,0,0,1867,1839,1,0,0,0,1867,1848,1,
		0,0,0,1867,1850,1,0,0,0,1867,1856,1,0,0,0,1867,1866,1,0,0,0,1868,1870,
		1,0,0,0,1869,1871,3,254,127,0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,
		253,1,0,0,0,1872,1873,5,9,0,0,1873,1874,5,27,0,0,1874,1877,5,131,0,0,1875,
		1876,5,9,0,0,1876,1878,3,302,151,0,1877,1875,1,0,0,0,1877,1878,1,0,0,0,
		1878,1881,1,0,0,0,1879,1880,5,28,0,0,1880,1882,3,70,35,0,1881,1879,1,0,
		0,0,1881,1882,1,0,0,0,1882,255,1,0,0,0,1883,1888,5,119,0,0,1884,1889,3,
		486,243,0,1885,1886,3,506,253,0,1886,1887,5,47,0,0,1887,1889,1,0,0,0,1888,
		1884,1,0,0,0,1888,1885,1,0,0,0,1889,257,1,0,0,0,1890,1893,3,514,257,0,
		1891,1893,5,197,0,0,1892,1890,1,0,0,0,1892,1891,1,0,0,0,1893,1902,1,0,
		0,0,1894,1897,5,152,0,0,1895,1897,5,111,0,0,1896,1894,1,0,0,0,1896,1895,
		1,0,0,0,1897,1900,1,0,0,0,1898,1901,3,514,257,0,1899,1901,5,197,0,0,1900,
		1898,1,0,0,0,1900,1899,1,0,0,0,1901,1903,1,0,0,0,1902,1896,1,0,0,0,1902,
		1903,1,0,0,0,1903,259,1,0,0,0,1904,1909,3,262,131,0,1905,1906,5,152,0,
		0,1906,1908,3,262,131,0,1907,1905,1,0,0,0,1908,1911,1,0,0,0,1909,1907,
		1,0,0,0,1909,1910,1,0,0,0,1910,261,1,0,0,0,1911,1909,1,0,0,0,1912,1913,
		5,145,0,0,1913,1914,3,438,219,0,1914,1915,5,146,0,0,1915,263,1,0,0,0,1916,
		1917,5,27,0,0,1917,1918,3,302,151,0,1918,1919,5,28,0,0,1919,1920,3,302,
		151,0,1920,265,1,0,0,0,1921,1922,5,26,0,0,1922,1923,3,302,151,0,1923,267,
		1,0,0,0,1924,1925,5,113,0,0,1925,1927,5,145,0,0,1926,1928,3,270,135,0,
		1927,1926,1,0,0,0,1927,1928,1,0,0,0,1928,1929,1,0,0,0,1929,1931,3,272,
		136,0,1930,1932,3,276,138,0,1931,1930,1,0,0,0,1931,1932,1,0,0,0,1932,1934,
		1,0,0,0,1933,1935,3,280,140,0,1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,
		1936,1,0,0,0,1936,1938,3,278,139,0,1937,1939,3,282,141,0,1938,1937,1,0,
		0,0,1938,1939,1,0,0,0,1939,1941,1,0,0,0,1940,1942,3,298,149,0,1941,1940,
		1,0,0,0,1941,1942,1,0,0,0,1942,1943,1,0,0,0,1943,1944,5,146,0,0,1944,269,
		1,0,0,0,1945,1946,5,117,0,0,1946,1947,5,39,0,0,1947,1952,3,302,151,0,1948,
		1949,5,152,0,0,1949,1951,3,302,151,0,1950,1948,1,0,0,0,1951,1954,1,0,0,
		0,1952,1950,1,0,0,0,1952,1953,1,0,0,0,1953,271,1,0,0,0,1954,1952,1,0,0,
		0,1955,1956,5,115,0,0,1956,1961,3,274,137,0,1957,1958,5,152,0,0,1958,1960,
		3,274,137,0,1959,1957,1,0,0,0,1960,1963,1,0,0,0,1961,1959,1,0,0,0,1961,
		1962,1,0,0,0,1962,273,1,0,0,0,1963,1961,1,0,0,0,1964,1969,3,302,151,0,
		1965,1967,5,14,0,0,1966,1968,5,197,0,0,1967,1966,1,0,0,0,1967,1968,1,0,
		0,0,1968,1970,1,0,0,0,1969,1965,1,0,0,0,1969,1970,1,0,0,0,1970,275,1,0,
		0,0,1971,1972,5,43,0,0,1972,1973,5,118,0,0,1973,277,1,0,0,0,1974,1975,
		5,63,0,0,1975,1976,5,145,0,0,1976,1977,3,284,142,0,1977,1978,5,146,0,0,
		1978,279,1,0,0,0,1979,1980,5,119,0,0,1980,1981,3,480,240,0,1981,1982,3,
		480,240,0,1982,1983,3,480,240,0,1983,1984,3,480,240,0,1984,1985,3,480,
		240,0,1985,281,1,0,0,0,1986,1987,5,197,0,0,1987,1990,3,486,243,0,1988,
		1989,5,8,0,0,1989,1991,5,131,0,0,1990,1988,1,0,0,0,1990,1991,1,0,0,0,1991,
		283,1,0,0,0,1992,1997,3,286,143,0,1993,1994,5,175,0,0,1994,1996,3,286,
		143,0,1995,1993,1,0,0,0,1996,1999,1,0,0,0,1997,1995,1,0,0,0,1997,1998,
		1,0,0,0,1998,285,1,0,0,0,1999,1997,1,0,0,0,2000,2002,3,288,144,0,2001,
		2000,1,0,0,0,2002,2003,1,0,0,0,2003,2001,1,0,0,0,2003,2004,1,0,0,0,2004,
		287,1,0,0,0,2005,2009,3,292,146,0,2006,2009,3,290,145,0,2007,2009,3,294,
		147,0,2008,2005,1,0,0,0,2008,2006,1,0,0,0,2008,2007,1,0,0,0,2009,289,1,
		0,0,0,2010,2011,5,145,0,0,2011,2012,3,284,142,0,2012,2016,5,146,0,0,2013,
		2017,5,165,0,0,2014,2017,5,159,0,0,2015,2017,5,144,0,0,2016,2013,1,0,0,
		0,2016,2014,1,0,0,0,2016,2015,1,0,0,0,2016,2017,1,0,0,0,2017,2019,1,0,
		0,0,2018,2020,3,296,148,0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,2020,291,
		1,0,0,0,2021,2022,5,114,0,0,2022,2023,5,145,0,0,2023,2028,3,284,142,0,
		2024,2025,5,152,0,0,2025,2027,3,284,142,0,2026,2024,1,0,0,0,2027,2030,
		1,0,0,0,2028,2026,1,0,0,0,2028,2029,1,0,0,0,2029,2031,1,0,0,0,2030,2028,
		1,0,0,0,2031,2032,5,146,0,0,2032,293,1,0,0,0,2033,2042,5,197,0,0,2034,
		2038,5,165,0,0,2035,2038,5,159,0,0,2036,2038,5,144,0,0,2037,2034,1,0,0,
		0,2037,2035,1,0,0,0,2037,2036,1,0,0,0,2038,2040,1,0,0,0,2039,2041,5,144,
		0,0,2040,2039,1,0,0,0,2040,2041,1,0,0,0,2041,2043,1,0,0,0,2042,2037,1,
		0,0,0,2042,2043,1,0,0,0,2043,2045,1,0,0,0,2044,2046,3,296,148,0,2045,2044,
		1,0,0,0,2045,2046,1,0,0,0,2046,295,1,0,0,0,2047,2049,5,149,0,0,2048,2050,
		3,302,151,0,2049,2048,1,0,0,0,2049,2050,1,0,0,0,2050,2052,1,0,0,0,2051,
		2053,5,152,0,0,2052,2051,1,0,0,0,2052,2053,1,0,0,0,2053,2055,1,0,0,0,2054,
		2056,3,302,151,0,2055,2054,1,0,0,0,2055,2056,1,0,0,0,2056,2057,1,0,0,0,
		2057,2058,5,150,0,0,2058,297,1,0,0,0,2059,2060,5,116,0,0,2060,2065,3,300,
		150,0,2061,2062,5,152,0,0,2062,2064,3,300,150,0,2063,2061,1,0,0,0,2064,
		2067,1,0,0,0,2065,2063,1,0,0,0,2065,2066,1,0,0,0,2066,299,1,0,0,0,2067,
		2065,1,0,0,0,2068,2069,5,197,0,0,2069,2070,5,14,0,0,2070,2071,3,302,151,
		0,2071,301,1,0,0,0,2072,2073,3,304,152,0,2073,303,1,0,0,0,2074,2075,6,
		152,-1,0,2075,2077,5,25,0,0,2076,2078,3,264,132,0,2077,2076,1,0,0,0,2078,
		2079,1,0,0,0,2079,2077,1,0,0,0,2079,2080,1,0,0,0,2080,2082,1,0,0,0,2081,
		2083,3,266,133,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2084,1,0,0,0,
		2084,2085,5,29,0,0,2085,2086,6,152,-1,0,2086,2103,1,0,0,0,2087,2088,6,
		152,-1,0,2088,2089,5,25,0,0,2089,2091,3,302,151,0,2090,2092,3,264,132,
		0,2091,2090,1,0,0,0,2092,2093,1,0,0,0,2093,2091,1,0,0,0,2093,2094,1,0,
		0,0,2094,2096,1,0,0,0,2095,2097,3,266,133,0,2096,2095,1,0,0,0,2096,2097,
		1,0,0,0,2097,2098,1,0,0,0,2098,2099,5,29,0,0,2099,2100,6,152,-1,0,2100,
		2103,1,0,0,0,2101,2103,3,306,153,0,2102,2074,1,0,0,0,2102,2087,1,0,0,0,
		2102,2101,1,0,0,0,2103,305,1,0,0,0,2104,2109,3,308,154,0,2105,2106,5,8,
		0,0,2106,2108,3,308,154,0,2107,2105,1,0,0,0,2108,2111,1,0,0,0,2109,2107,
		1,0,0,0,2109,2110,1,0,0,0,2110,307,1,0,0,0,2111,2109,1,0,0,0,2112,2117,
		3,310,155,0,2113,2114,5,9,0,0,2114,2116,3,310,155,0,2115,2113,1,0,0,0,
		2116,2119,1,0,0,0,2117,2115,1,0,0,0,2117,2118,1,0,0,0,2118,309,1,0,0,0,
		2119,2117,1,0,0,0,2120,2125,3,312,156,0,2121,2122,7,4,0,0,2122,2124,3,
		312,156,0,2123,2121,1,0,0,0,2124,2127,1,0,0,0,2125,2123,1,0,0,0,2125,2126,
		1,0,0,0,2126,311,1,0,0,0,2127,2125,1,0,0,0,2128,2132,3,314,157,0,2129,
		2130,5,10,0,0,2130,2132,3,314,157,0,2131,2128,1,0,0,0,2131,2129,1,0,0,
		0,2132,313,1,0,0,0,2133,2160,3,316,158,0,2134,2141,5,142,0,0,2135,2141,
		5,38,0,0,2136,2137,5,38,0,0,2137,2141,5,10,0,0,2138,2141,5,143,0,0,2139,
		2141,5,156,0,0,2140,2134,1,0,0,0,2140,2135,1,0,0,0,2140,2136,1,0,0,0,2140,
		2138,1,0,0,0,2140,2139,1,0,0,0,2141,2156,1,0,0,0,2142,2157,3,316,158,0,
		2143,2147,5,44,0,0,2144,2147,5,45,0,0,2145,2147,5,43,0,0,2146,2143,1,0,
		0,0,2146,2144,1,0,0,0,2146,2145,1,0,0,0,2147,2154,1,0,0,0,2148,2150,5,
		145,0,0,2149,2151,3,436,218,0,2150,2149,1,0,0,0,2150,2151,1,0,0,0,2151,
		2152,1,0,0,0,2152,2155,5,146,0,0,2153,2155,3,336,168,0,2154,2148,1,0,0,
		0,2154,2153,1,0,0,0,2155,2157,1,0,0,0,2156,2142,1,0,0,0,2156,2146,1,0,
		0,0,2157,2159,1,0,0,0,2158,2140,1,0,0,0,2159,2162,1,0,0,0,2160,2158,1,
		0,0,0,2160,2161,1,0,0,0,2161,315,1,0,0,0,2162,2160,1,0,0,0,2163,2229,3,
		320,160,0,2164,2169,5,172,0,0,2165,2169,5,170,0,0,2166,2169,5,171,0,0,
		2167,2169,5,169,0,0,2168,2164,1,0,0,0,2168,2165,1,0,0,0,2168,2166,1,0,
		0,0,2168,2167,1,0,0,0,2169,2184,1,0,0,0,2170,2185,3,320,160,0,2171,2175,
		5,44,0,0,2172,2175,5,45,0,0,2173,2175,5,43,0,0,2174,2171,1,0,0,0,2174,
		2172,1,0,0,0,2174,2173,1,0,0,0,2175,2182,1,0,0,0,2176,2178,5,145,0,0,2177,
		2179,3,436,218,0,2178,2177,1,0,0,0,2178,2179,1,0,0,0,2179,2180,1,0,0,0,
		2180,2183,5,146,0,0,2181,2183,3,336,168,0,2182,2176,1,0,0,0,2182,2181,
		1,0,0,0,2183,2185,1,0,0,0,2184,2170,1,0,0,0,2184,2174,1,0,0,0,2185,2187,
		1,0,0,0,2186,2168,1,0,0,0,2187,2190,1,0,0,0,2188,2186,1,0,0,0,2188,2189,
		1,0,0,0,2189,2230,1,0,0,0,2190,2188,1,0,0,0,2191,2193,5,10,0,0,2192,2191,
		1,0,0,0,2192,2193,1,0,0,0,2193,2227,1,0,0,0,2194,2197,5,3,0,0,2195,2198,
		5,145,0,0,2196,2198,5,147,0,0,2197,2195,1,0,0,0,2197,2196,1,0,0,0,2198,
		2199,1,0,0,0,2199,2209,3,302,151,0,2200,2201,5,151,0,0,2201,2210,3,302,
		151,0,2202,2203,5,152,0,0,2203,2205,3,302,151,0,2204,2202,1,0,0,0,2205,
		2208,1,0,0,0,2206,2204,1,0,0,0,2206,2207,1,0,0,0,2207,2210,1,0,0,0,2208,
		2206,1,0,0,0,2209,2200,1,0,0,0,2209,2206,1,0,0,0,2210,2213,1,0,0,0,2211,
		2214,5,146,0,0,2212,2214,5,148,0,0,2213,2211,1,0,0,0,2213,2212,1,0,0,0,
		2214,2228,1,0,0,0,2215,2216,5,3,0,0,2216,2228,3,318,159,0,2217,2218,5,
		4,0,0,2218,2228,3,358,179,0,2219,2220,5,5,0,0,2220,2223,3,320,160,0,2221,
		2222,5,7,0,0,2222,2224,3,516,258,0,2223,2221,1,0,0,0,2223,2224,1,0,0,0,
		2224,2228,1,0,0,0,2225,2226,5,6,0,0,2226,2228,3,320,160,0,2227,2194,1,
		0,0,0,2227,2215,1,0,0,0,2227,2217,1,0,0,0,2227,2219,1,0,0,0,2227,2225,
		1,0,0,0,2228,2230,1,0,0,0,2229,2188,1,0,0,0,2229,2192,1,0,0,0,2230,317,
		1,0,0,0,2231,2232,3,340,170,0,2232,319,1,0,0,0,2233,2243,3,322,161,0,2234,
		2235,5,177,0,0,2235,2240,3,322,161,0,2236,2237,5,177,0,0,2237,2239,3,322,
		161,0,2238,2236,1,0,0,0,2239,2242,1,0,0,0,2240,2238,1,0,0,0,2240,2241,
		1,0,0,0,2241,2244,1,0,0,0,2242,2240,1,0,0,0,2243,2234,1,0,0,0,2243,2244,
		1,0,0,0,2244,321,1,0,0,0,2245,2250,3,324,162,0,2246,2247,7,5,0,0,2247,
		2249,3,324,162,0,2248,2246,1,0,0,0,2249,2252,1,0,0,0,2250,2248,1,0,0,0,
		2250,2251,1,0,0,0,2251,323,1,0,0,0,2252,2250,1,0,0,0,2253,2258,3,326,163,
		0,2254,2255,7,6,0,0,2255,2257,3,326,163,0,2256,2254,1,0,0,0,2257,2260,
		1,0,0,0,2258,2256,1,0,0,0,2258,2259,1,0,0,0,2259,325,1,0,0,0,2260,2258,
		1,0,0,0,2261,2326,3,328,164,0,2262,2326,3,512,256,0,2263,2326,3,330,165,
		0,2264,2265,5,145,0,0,2265,2266,3,302,151,0,2266,2267,5,146,0,0,2267,2268,
		3,466,233,0,2268,2326,1,0,0,0,2269,2326,3,346,173,0,2270,2326,3,462,231,
		0,2271,2326,3,344,172,0,2272,2326,3,334,167,0,2273,2326,3,338,169,0,2274,
		2275,5,127,0,0,2275,2276,5,149,0,0,2276,2281,3,332,166,0,2277,2278,5,152,
		0,0,2278,2280,3,332,166,0,2279,2277,1,0,0,0,2280,2283,1,0,0,0,2281,2279,
		1,0,0,0,2281,2282,1,0,0,0,2282,2284,1,0,0,0,2283,2281,1,0,0,0,2284,2285,
		5,150,0,0,2285,2326,1,0,0,0,2286,2287,5,127,0,0,2287,2288,3,410,205,0,
		2288,2297,5,145,0,0,2289,2294,3,302,151,0,2290,2291,5,152,0,0,2291,2293,
		3,302,151,0,2292,2290,1,0,0,0,2293,2296,1,0,0,0,2294,2292,1,0,0,0,2294,
		2295,1,0,0,0,2295,2298,1,0,0,0,2296,2294,1,0,0,0,2297,2289,1,0,0,0,2297,
		2298,1,0,0,0,2298,2299,1,0,0,0,2299,2300,5,146,0,0,2300,2301,3,466,233,
		0,2301,2326,1,0,0,0,2302,2303,5,127,0,0,2303,2304,3,410,205,0,2304,2305,
		5,147,0,0,2305,2306,3,302,151,0,2306,2312,5,148,0,0,2307,2309,5,147,0,
		0,2308,2310,3,302,151,0,2309,2308,1,0,0,0,2309,2310,1,0,0,0,2310,2311,
		1,0,0,0,2311,2313,5,148,0,0,2312,2307,1,0,0,0,2312,2313,1,0,0,0,2313,2326,
		1,0,0,0,2314,2315,5,127,0,0,2315,2316,3,410,205,0,2316,2317,5,147,0,0,
		2317,2320,5,148,0,0,2318,2319,5,147,0,0,2319,2321,5,148,0,0,2320,2318,
		1,0,0,0,2320,2321,1,0,0,0,2321,2322,1,0,0,0,2322,2323,3,344,172,0,2323,
		2326,1,0,0,0,2324,2326,3,520,260,0,2325,2261,1,0,0,0,2325,2262,1,0,0,0,
		2325,2263,1,0,0,0,2325,2264,1,0,0,0,2325,2269,1,0,0,0,2325,2270,1,0,0,
		0,2325,2271,1,0,0,0,2325,2272,1,0,0,0,2325,2273,1,0,0,0,2325,2274,1,0,
		0,0,2325,2286,1,0,0,0,2325,2302,1,0,0,0,2325,2314,1,0,0,0,2325,2324,1,
		0,0,0,2326,327,1,0,0,0,2327,2328,5,162,0,0,2328,2329,3,462,231,0,2329,
		329,1,0,0,0,2330,2331,3,508,254,0,2331,2332,3,466,233,0,2332,331,1,0,0,
		0,2333,2336,3,462,231,0,2334,2335,5,142,0,0,2335,2337,3,302,151,0,2336,
		2334,1,0,0,0,2336,2337,1,0,0,0,2337,333,1,0,0,0,2338,2339,3,340,170,0,
		2339,2340,3,466,233,0,2340,335,1,0,0,0,2341,2342,3,340,170,0,2342,337,
		1,0,0,0,2343,2344,5,71,0,0,2344,2345,3,340,170,0,2345,339,1,0,0,0,2346,
		2347,5,145,0,0,2347,2349,5,24,0,0,2348,2350,5,42,0,0,2349,2348,1,0,0,0,
		2349,2350,1,0,0,0,2350,2351,1,0,0,0,2351,2352,3,206,103,0,2352,2353,5,
		30,0,0,2353,2356,3,342,171,0,2354,2355,5,13,0,0,2355,2357,3,202,101,0,
		2356,2354,1,0,0,0,2356,2357,1,0,0,0,2357,2361,1,0,0,0,2358,2359,5,40,0,
		0,2359,2360,5,39,0,0,2360,2362,3,234,117,0,2361,2358,1,0,0,0,2361,2362,
		1,0,0,0,2362,2365,1,0,0,0,2363,2364,5,41,0,0,2364,2366,3,250,125,0,2365,
		2363,1,0,0,0,2365,2366,1,0,0,0,2366,2367,1,0,0,0,2367,2368,5,146,0,0,2368,
		341,1,0,0,0,2369,2371,3,390,195,0,2370,2372,3,226,113,0,2371,2370,1,0,
		0,0,2371,2372,1,0,0,0,2372,2376,1,0,0,0,2373,2374,5,14,0,0,2374,2377,3,
		478,239,0,2375,2377,3,478,239,0,2376,2373,1,0,0,0,2376,2375,1,0,0,0,2376,
		2377,1,0,0,0,2377,2380,1,0,0,0,2378,2381,5,61,0,0,2379,2381,5,62,0,0,2380,
		2378,1,0,0,0,2380,2379,1,0,0,0,2380,2381,1,0,0,0,2381,343,1,0,0,0,2382,
		2391,5,149,0,0,2383,2388,3,302,151,0,2384,2385,5,152,0,0,2385,2387,3,302,
		151,0,2386,2384,1,0,0,0,2387,2390,1,0,0,0,2388,2386,1,0,0,0,2388,2389,
		1,0,0,0,2389,2392,1,0,0,0,2390,2388,1,0,0,0,2391,2383,1,0,0,0,2391,2392,
		1,0,0,0,2392,2393,1,0,0,0,2393,2394,5,150,0,0,2394,2395,3,466,233,0,2395,
		345,1,0,0,0,2396,2397,5,15,0,0,2397,2399,5,145,0,0,2398,2400,7,7,0,0,2399,
		2398,1,0,0,0,2399,2400,1,0,0,0,2400,2401,1,0,0,0,2401,2402,3,424,212,0,
		2402,2403,5,146,0,0,2403,2554,1,0,0,0,2404,2405,5,16,0,0,2405,2407,5,145,
		0,0,2406,2408,7,7,0,0,2407,2406,1,0,0,0,2407,2408,1,0,0,0,2408,2409,1,
		0,0,0,2409,2410,3,424,212,0,2410,2411,5,146,0,0,2411,2554,1,0,0,0,2412,
		2413,5,23,0,0,2413,2416,5,145,0,0,2414,2417,5,43,0,0,2415,2417,5,42,0,
		0,2416,2414,1,0,0,0,2416,2415,1,0,0,0,2416,2417,1,0,0,0,2417,2418,1,0,
		0,0,2418,2419,3,424,212,0,2419,2420,5,146,0,0,2420,2554,1,0,0,0,2421,2422,
		5,20,0,0,2422,2424,5,145,0,0,2423,2425,7,7,0,0,2424,2423,1,0,0,0,2424,
		2425,1,0,0,0,2425,2426,1,0,0,0,2426,2427,3,424,212,0,2427,2428,5,146,0,
		0,2428,2554,1,0,0,0,2429,2430,5,21,0,0,2430,2432,5,145,0,0,2431,2433,7,
		7,0,0,2432,2431,1,0,0,0,2432,2433,1,0,0,0,2433,2434,1,0,0,0,2434,2435,
		3,424,212,0,2435,2436,5,146,0,0,2436,2554,1,0,0,0,2437,2438,5,22,0,0,2438,
		2440,5,145,0,0,2439,2441,7,7,0,0,2440,2439,1,0,0,0,2440,2441,1,0,0,0,2441,
		2442,1,0,0,0,2442,2443,3,424,212,0,2443,2444,5,146,0,0,2444,2554,1,0,0,
		0,2445,2554,3,348,174,0,2446,2447,5,19,0,0,2447,2448,5,145,0,0,2448,2449,
		3,302,151,0,2449,2450,5,152,0,0,2450,2455,3,302,151,0,2451,2452,5,152,
		0,0,2452,2454,3,302,151,0,2453,2451,1,0,0,0,2454,2457,1,0,0,0,2455,2453,
		1,0,0,0,2455,2456,1,0,0,0,2456,2458,1,0,0,0,2457,2455,1,0,0,0,2458,2459,
		5,146,0,0,2459,2554,1,0,0,0,2460,2461,5,66,0,0,2461,2462,5,145,0,0,2462,
		2465,3,302,151,0,2463,2464,5,152,0,0,2464,2466,3,302,151,0,2465,2463,1,
		0,0,0,2465,2466,1,0,0,0,2466,2467,1,0,0,0,2467,2468,5,146,0,0,2468,2469,
		3,466,233,0,2469,2554,1,0,0,0,2470,2471,5,67,0,0,2471,2472,5,145,0,0,2472,
		2475,3,302,151,0,2473,2474,5,152,0,0,2474,2476,3,302,151,0,2475,2473,1,
		0,0,0,2475,2476,1,0,0,0,2476,2477,1,0,0,0,2477,2478,5,146,0,0,2478,2479,
		3,466,233,0,2479,2554,1,0,0,0,2480,2481,5,68,0,0,2481,2482,5,145,0,0,2482,
		2483,3,302,151,0,2483,2484,5,146,0,0,2484,2554,1,0,0,0,2485,2486,5,69,
		0,0,2486,2487,5,145,0,0,2487,2488,3,302,151,0,2488,2489,5,146,0,0,2489,
		2490,3,466,233,0,2490,2554,1,0,0,0,2491,2492,5,70,0,0,2492,2493,5,145,
		0,0,2493,2494,3,302,151,0,2494,2495,5,152,0,0,2495,2496,3,462,231,0,2496,
		2497,5,146,0,0,2497,2554,1,0,0,0,2498,2499,5,135,0,0,2499,2500,5,145,0,
		0,2500,2501,3,302,151,0,2501,2502,5,146,0,0,2502,2554,1,0,0,0,2503,2504,
		5,136,0,0,2504,2505,5,145,0,0,2505,2506,3,436,218,0,2506,2507,5,146,0,
		0,2507,2554,1,0,0,0,2508,2509,5,74,0,0,2509,2510,5,145,0,0,2510,2511,3,
		302,151,0,2511,2512,5,152,0,0,2512,2517,3,418,209,0,2513,2514,5,152,0,
		0,2514,2516,3,418,209,0,2515,2513,1,0,0,0,2516,2519,1,0,0,0,2517,2515,
		1,0,0,0,2517,2518,1,0,0,0,2518,2520,1,0,0,0,2519,2517,1,0,0,0,2520,2521,
		5,146,0,0,2521,2554,1,0,0,0,2522,2523,5,75,0,0,2523,2524,5,145,0,0,2524,
		2525,3,302,151,0,2525,2526,5,146,0,0,2526,2554,1,0,0,0,2527,2528,5,76,
		0,0,2528,2529,5,145,0,0,2529,2530,3,302,151,0,2530,2531,7,8,0,0,2531,2534,
		3,412,206,0,2532,2533,5,152,0,0,2533,2535,3,432,216,0,2534,2532,1,0,0,
		0,2534,2535,1,0,0,0,2535,2536,1,0,0,0,2536,2537,5,146,0,0,2537,2538,3,
		466,233,0,2538,2554,1,0,0,0,2539,2540,5,71,0,0,2540,2541,5,145,0,0,2541,
		2542,3,462,231,0,2542,2543,5,146,0,0,2543,2554,1,0,0,0,2544,2547,5,77,
		0,0,2545,2546,5,145,0,0,2546,2548,5,146,0,0,2547,2545,1,0,0,0,2547,2548,
		1,0,0,0,2548,2549,1,0,0,0,2549,2554,3,466,233,0,2550,2551,5,57,0,0,2551,
		2552,5,145,0,0,2552,2554,5,146,0,0,2553,2396,1,0,0,0,2553,2404,1,0,0,0,
		2553,2412,1,0,0,0,2553,2421,1,0,0,0,2553,2429,1,0,0,0,2553,2437,1,0,0,
		0,2553,2445,1,0,0,0,2553,2446,1,0,0,0,2553,2460,1,0,0,0,2553,2470,1,0,
		0,0,2553,2480,1,0,0,0,2553,2485,1,0,0,0,2553,2491,1,0,0,0,2553,2498,1,
		0,0,0,2553,2503,1,0,0,0,2553,2508,1,0,0,0,2553,2522,1,0,0,0,2553,2527,
		1,0,0,0,2553,2539,1,0,0,0,2553,2544,1,0,0,0,2553,2550,1,0,0,0,2554,347,
		1,0,0,0,2555,2559,5,48,0,0,2556,2559,5,49,0,0,2557,2559,5,2,0,0,2558,2555,
		1,0,0,0,2558,2556,1,0,0,0,2558,2557,1,0,0,0,2559,2560,1,0,0,0,2560,2562,
		5,145,0,0,2561,2563,3,424,212,0,2562,2561,1,0,0,0,2562,2563,1,0,0,0,2563,
		2564,1,0,0,0,2564,2565,5,146,0,0,2565,2566,3,466,233,0,2566,349,1,0,0,
		0,2567,2573,3,352,176,0,2568,2570,5,145,0,0,2569,2571,3,354,177,0,2570,
		2569,1,0,0,0,2570,2571,1,0,0,0,2571,2572,1,0,0,0,2572,2574,5,146,0,0,2573,
		2568,1,0,0,0,2573,2574,1,0,0,0,2574,351,1,0,0,0,2575,2586,3,484,242,0,
		2576,2586,5,49,0,0,2577,2586,5,48,0,0,2578,2586,5,2,0,0,2579,2586,5,17,
		0,0,2580,2586,5,18,0,0,2581,2586,5,13,0,0,2582,2586,5,80,0,0,2583,2586,
		5,119,0,0,2584,2586,5,4,0,0,2585,2575,1,0,0,0,2585,2576,1,0,0,0,2585,2577,
		1,0,0,0,2585,2578,1,0,0,0,2585,2579,1,0,0,0,2585,2580,1,0,0,0,2585,2581,
		1,0,0,0,2585,2582,1,0,0,0,2585,2583,1,0,0,0,2585,2584,1,0,0,0,2586,353,
		1,0,0,0,2587,2589,7,7,0,0,2588,2587,1,0,0,0,2588,2589,1,0,0,0,2589,2590,
		1,0,0,0,2590,2595,3,356,178,0,2591,2592,5,152,0,0,2592,2594,3,356,178,
		0,2593,2591,1,0,0,0,2594,2597,1,0,0,0,2595,2593,1,0,0,0,2595,2596,1,0,
		0,0,2596,355,1,0,0,0,2597,2595,1,0,0,0,2598,2600,3,14,7,0,2599,2598,1,
		0,0,0,2599,2600,1,0,0,0,2600,2601,1,0,0,0,2601,2602,3,428,214,0,2602,357,
		1,0,0,0,2603,2604,3,320,160,0,2604,2605,5,9,0,0,2605,2606,3,320,160,0,
		2606,359,1,0,0,0,2607,2608,3,362,181,0,2608,361,1,0,0,0,2609,2613,3,366,
		183,0,2610,2612,3,364,182,0,2611,2610,1,0,0,0,2612,2615,1,0,0,0,2613,2611,
		1,0,0,0,2613,2614,1,0,0,0,2614,363,1,0,0,0,2615,2613,1,0,0,0,2616,2623,
		5,140,0,0,2617,2618,5,139,0,0,2618,2619,3,302,151,0,2619,2620,5,148,0,
		0,2620,2621,5,170,0,0,2621,2623,1,0,0,0,2622,2616,1,0,0,0,2622,2617,1,
		0,0,0,2623,2624,1,0,0,0,2624,2625,3,366,183,0,2625,365,1,0,0,0,2626,2631,
		3,368,184,0,2627,2628,5,8,0,0,2628,2630,3,368,184,0,2629,2627,1,0,0,0,
		2630,2633,1,0,0,0,2631,2629,1,0,0,0,2631,2632,1,0,0,0,2632,367,1,0,0,0,
		2633,2631,1,0,0,0,2634,2639,3,370,185,0,2635,2636,5,9,0,0,2636,2638,3,
		370,185,0,2637,2635,1,0,0,0,2638,2641,1,0,0,0,2639,2637,1,0,0,0,2639,2640,
		1,0,0,0,2640,369,1,0,0,0,2641,2639,1,0,0,0,2642,2644,3,388,194,0,2643,
		2642,1,0,0,0,2643,2644,1,0,0,0,2644,2645,1,0,0,0,2645,2648,3,372,186,0,
		2646,2647,5,83,0,0,2647,2649,3,372,186,0,2648,2646,1,0,0,0,2648,2649,1,
		0,0,0,2649,371,1,0,0,0,2650,2655,5,11,0,0,2651,2655,5,10,0,0,2652,2653,
		5,12,0,0,2653,2655,3,376,188,0,2654,2650,1,0,0,0,2654,2651,1,0,0,0,2654,
		2652,1,0,0,0,2655,2657,1,0,0,0,2656,2658,3,388,194,0,2657,2656,1,0,0,0,
		2657,2658,1,0,0,0,2658,2660,1,0,0,0,2659,2654,1,0,0,0,2659,2660,1,0,0,
		0,2660,2661,1,0,0,0,2661,2662,3,374,187,0,2662,373,1,0,0,0,2663,2669,3,
		380,190,0,2664,2665,5,145,0,0,2665,2666,3,360,180,0,2666,2667,5,146,0,
		0,2667,2669,1,0,0,0,2668,2663,1,0,0,0,2668,2664,1,0,0,0,2669,2674,1,0,
		0,0,2670,2671,5,13,0,0,2671,2675,3,384,192,0,2672,2673,5,121,0,0,2673,
		2675,3,386,193,0,2674,2670,1,0,0,0,2674,2672,1,0,0,0,2674,2675,1,0,0,0,
		2675,375,1,0,0,0,2676,2677,5,145,0,0,2677,2682,3,378,189,0,2678,2679,5,
		152,0,0,2679,2681,3,378,189,0,2680,2678,1,0,0,0,2681,2684,1,0,0,0,2682,
		2680,1,0,0,0,2682,2683,1,0,0,0,2683,2685,1,0,0,0,2684,2682,1,0,0,0,2685,
		2686,5,146,0,0,2686,377,1,0,0,0,2687,2688,3,440,220,0,2688,379,1,0,0,0,
		2689,2692,3,382,191,0,2690,2692,3,406,203,0,2691,2689,1,0,0,0,2691,2690,
		1,0,0,0,2692,381,1,0,0,0,2693,2694,5,197,0,0,2694,2697,5,151,0,0,2695,
		2698,5,197,0,0,2696,2698,5,84,0,0,2697,2695,1,0,0,0,2697,2696,1,0,0,0,
		2698,2699,1,0,0,0,2699,2701,5,145,0,0,2700,2702,3,426,213,0,2701,2700,
		1,0,0,0,2701,2702,1,0,0,0,2702,2703,1,0,0,0,2703,2704,5,146,0,0,2704,383,
		1,0,0,0,2705,2706,5,197,0,0,2706,2707,5,151,0,0,2707,2708,5,197,0,0,2708,
		2710,5,145,0,0,2709,2711,3,438,219,0,2710,2709,1,0,0,0,2710,2711,1,0,0,
		0,2711,2712,1,0,0,0,2712,2713,5,146,0,0,2713,385,1,0,0,0,2714,2715,5,145,
		0,0,2715,2716,3,302,151,0,2716,2717,5,146,0,0,2717,387,1,0,0,0,2718,2728,
		5,147,0,0,2719,2724,3,302,151,0,2720,2722,5,151,0,0,2721,2723,3,302,151,
		0,2722,2721,1,0,0,0,2722,2723,1,0,0,0,2723,2725,1,0,0,0,2724,2720,1,0,
		0,0,2724,2725,1,0,0,0,2725,2729,1,0,0,0,2726,2727,5,151,0,0,2727,2729,
		3,302,151,0,2728,2719,1,0,0,0,2728,2726,1,0,0,0,2729,2730,1,0,0,0,2730,
		2731,5,148,0,0,2731,389,1,0,0,0,2732,2733,5,197,0,0,2733,2735,5,142,0,
		0,2734,2732,1,0,0,0,2734,2735,1,0,0,0,2735,2736,1,0,0,0,2736,2742,3,418,
		209,0,2737,2739,5,145,0,0,2738,2740,3,436,218,0,2739,2738,1,0,0,0,2739,
		2740,1,0,0,0,2740,2741,1,0,0,0,2741,2743,5,146,0,0,2742,2737,1,0,0,0,2742,
		2743,1,0,0,0,2743,2745,1,0,0,0,2744,2746,3,392,196,0,2745,2744,1,0,0,0,
		2745,2746,1,0,0,0,2746,391,1,0,0,0,2747,2751,3,394,197,0,2748,2750,3,394,
		197,0,2749,2748,1,0,0,0,2750,2753,1,0,0,0,2751,2749,1,0,0,0,2751,2752,
		1,0,0,0,2752,393,1,0,0,0,2753,2751,1,0,0,0,2754,2756,5,147,0,0,2755,2757,
		3,396,198,0,2756,2755,1,0,0,0,2756,2757,1,0,0,0,2757,2758,1,0,0,0,2758,
		2760,3,302,151,0,2759,2761,3,404,202,0,2760,2759,1,0,0,0,2760,2761,1,0,
		0,0,2761,2764,1,0,0,0,2762,2763,5,14,0,0,2763,2765,5,197,0,0,2764,2762,
		1,0,0,0,2764,2765,1,0,0,0,2765,2768,1,0,0,0,2766,2767,5,13,0,0,2767,2769,
		3,302,151,0,2768,2766,1,0,0,0,2768,2769,1,0,0,0,2769,2770,1,0,0,0,2770,
		2771,5,148,0,0,2771,395,1,0,0,0,2772,2773,5,24,0,0,2773,2774,3,398,199,
		0,2774,2775,5,30,0,0,2775,397,1,0,0,0,2776,2781,3,400,200,0,2777,2778,
		5,152,0,0,2778,2780,3,400,200,0,2779,2777,1,0,0,0,2780,2783,1,0,0,0,2781,
		2779,1,0,0,0,2781,2782,1,0,0,0,2782,399,1,0,0,0,2783,2781,1,0,0,0,2784,
		2792,5,165,0,0,2785,2792,3,402,201,0,2786,2789,3,302,151,0,2787,2788,5,
		14,0,0,2788,2790,3,480,240,0,2789,2787,1,0,0,0,2789,2790,1,0,0,0,2790,
		2792,1,0,0,0,2791,2784,1,0,0,0,2791,2785,1,0,0,0,2791,2786,1,0,0,0,2792,
		401,1,0,0,0,2793,2794,5,197,0,0,2794,2795,5,182,0,0,2795,2798,5,165,0,
		0,2796,2797,5,14,0,0,2797,2799,5,197,0,0,2798,2796,1,0,0,0,2798,2799,1,
		0,0,0,2799,403,1,0,0,0,2800,2801,5,188,0,0,2801,2802,5,197,0,0,2802,2803,
		5,145,0,0,2803,2804,5,197,0,0,2804,2805,5,146,0,0,2805,405,1,0,0,0,2806,
		2807,5,197,0,0,2807,2809,5,142,0,0,2808,2806,1,0,0,0,2808,2809,1,0,0,0,
		2809,2810,1,0,0,0,2810,2816,3,418,209,0,2811,2813,5,145,0,0,2812,2814,
		3,436,218,0,2813,2812,1,0,0,0,2813,2814,1,0,0,0,2814,2815,1,0,0,0,2815,
		2817,5,146,0,0,2816,2811,1,0,0,0,2816,2817,1,0,0,0,2817,2819,1,0,0,0,2818,
		2820,3,392,196,0,2819,2818,1,0,0,0,2819,2820,1,0,0,0,2820,2822,1,0,0,0,
		2821,2823,3,408,204,0,2822,2821,1,0,0,0,2822,2823,1,0,0,0,2823,407,1,0,
		0,0,2824,2825,5,188,0,0,2825,2830,5,197,0,0,2826,2827,5,145,0,0,2827,2828,
		3,506,253,0,2828,2829,5,146,0,0,2829,2831,1,0,0,0,2830,2826,1,0,0,0,2830,
		2831,1,0,0,0,2831,409,1,0,0,0,2832,2834,3,418,209,0,2833,2835,3,414,207,
		0,2834,2833,1,0,0,0,2834,2835,1,0,0,0,2835,411,1,0,0,0,2836,2838,3,418,
		209,0,2837,2839,3,414,207,0,2838,2837,1,0,0,0,2838,2839,1,0,0,0,2839,2843,
		1,0,0,0,2840,2842,3,416,208,0,2841,2840,1,0,0,0,2842,2845,1,0,0,0,2843,
		2841,1,0,0,0,2843,2844,1,0,0,0,2844,413,1,0,0,0,2845,2843,1,0,0,0,2846,
		2847,5,172,0,0,2847,2852,3,412,206,0,2848,2849,5,152,0,0,2849,2851,3,412,
		206,0,2850,2848,1,0,0,0,2851,2854,1,0,0,0,2852,2850,1,0,0,0,2852,2853,
		1,0,0,0,2853,2855,1,0,0,0,2854,2852,1,0,0,0,2855,2856,5,170,0,0,2856,415,
		1,0,0,0,2857,2859,5,147,0,0,2858,2860,5,197,0,0,2859,2858,1,0,0,0,2859,
		2860,1,0,0,0,2860,2861,1,0,0,0,2861,2862,5,148,0,0,2862,417,1,0,0,0,2863,
		2868,3,482,241,0,2864,2865,5,182,0,0,2865,2867,3,482,241,0,2866,2864,1,
		0,0,0,2867,2870,1,0,0,0,2868,2866,1,0,0,0,2868,2869,1,0,0,0,2869,419,1,
		0,0,0,2870,2868,1,0,0,0,2871,2872,5,172,0,0,2872,2873,3,422,211,0,2873,
		2874,5,170,0,0,2874,421,1,0,0,0,2875,2880,3,418,209,0,2876,2877,5,152,
		0,0,2877,2879,3,418,209,0,2878,2876,1,0,0,0,2879,2882,1,0,0,0,2880,2878,
		1,0,0,0,2880,2881,1,0,0,0,2881,423,1,0,0,0,2882,2880,1,0,0,0,2883,2888,
		3,428,214,0,2884,2885,5,152,0,0,2885,2887,3,428,214,0,2886,2884,1,0,0,
		0,2887,2890,1,0,0,0,2888,2886,1,0,0,0,2888,2889,1,0,0,0,2889,425,1,0,0,
		0,2890,2888,1,0,0,0,2891,2896,3,430,215,0,2892,2893,5,152,0,0,2893,2895,
		3,430,215,0,2894,2892,1,0,0,0,2895,2898,1,0,0,0,2896,2894,1,0,0,0,2896,
		2897,1,0,0,0,2897,427,1,0,0,0,2898,2896,1,0,0,0,2899,2902,3,432,216,0,
		2900,2902,3,440,220,0,2901,2899,1,0,0,0,2901,2900,1,0,0,0,2902,429,1,0,
		0,0,2903,2906,3,434,217,0,2904,2906,3,442,221,0,2905,2903,1,0,0,0,2905,
		2904,1,0,0,0,2906,431,1,0,0,0,2907,2908,5,197,0,0,2908,2915,5,151,0,0,
		2909,2916,3,302,151,0,2910,2912,5,145,0,0,2911,2913,3,436,218,0,2912,2911,
		1,0,0,0,2912,2913,1,0,0,0,2913,2914,1,0,0,0,2914,2916,5,146,0,0,2915,2909,
		1,0,0,0,2915,2910,1,0,0,0,2916,433,1,0,0,0,2917,2918,5,197,0,0,2918,2925,
		5,151,0,0,2919,2926,3,440,220,0,2920,2922,5,145,0,0,2921,2923,3,438,219,
		0,2922,2921,1,0,0,0,2922,2923,1,0,0,0,2923,2924,1,0,0,0,2924,2926,5,146,
		0,0,2925,2919,1,0,0,0,2925,2920,1,0,0,0,2926,435,1,0,0,0,2927,2932,3,302,
		151,0,2928,2929,5,152,0,0,2929,2931,3,302,151,0,2930,2928,1,0,0,0,2931,
		2934,1,0,0,0,2932,2930,1,0,0,0,2932,2933,1,0,0,0,2933,437,1,0,0,0,2934,
		2932,1,0,0,0,2935,2940,3,442,221,0,2936,2937,5,152,0,0,2937,2939,3,442,
		221,0,2938,2936,1,0,0,0,2939,2942,1,0,0,0,2940,2938,1,0,0,0,2940,2941,
		1,0,0,0,2941,439,1,0,0,0,2942,2940,1,0,0,0,2943,2954,3,446,223,0,2944,
		2954,3,486,243,0,2945,2954,3,444,222,0,2946,2954,3,452,226,0,2947,2954,
		3,450,225,0,2948,2954,3,454,227,0,2949,2954,3,456,228,0,2950,2954,3,458,
		229,0,2951,2954,5,165,0,0,2952,2954,3,402,201,0,2953,2943,1,0,0,0,2953,
		2944,1,0,0,0,2953,2945,1,0,0,0,2953,2946,1,0,0,0,2953,2947,1,0,0,0,2953,
		2948,1,0,0,0,2953,2949,1,0,0,0,2953,2950,1,0,0,0,2953,2951,1,0,0,0,2953,
		2952,1,0,0,0,2954,441,1,0,0,0,2955,2958,3,448,224,0,2956,2958,3,440,220,
		0,2957,2955,1,0,0,0,2957,2956,1,0,0,0,2958,443,1,0,0,0,2959,2965,3,302,
		151,0,2960,2966,5,54,0,0,2961,2966,5,55,0,0,2962,2966,5,100,0,0,2963,2966,
		5,99,0,0,2964,2966,5,98,0,0,2965,2960,1,0,0,0,2965,2961,1,0,0,0,2965,2962,
		1,0,0,0,2965,2963,1,0,0,0,2965,2964,1,0,0,0,2965,2966,1,0,0,0,2966,445,
		1,0,0,0,2967,2968,5,73,0,0,2968,447,1,0,0,0,2969,2970,5,49,0,0,2970,449,
		1,0,0,0,2971,2972,5,165,0,0,2972,2976,5,157,0,0,2973,2977,3,506,253,0,
		2974,2977,5,197,0,0,2975,2977,3,508,254,0,2976,2973,1,0,0,0,2976,2974,
		1,0,0,0,2976,2975,1,0,0,0,2977,451,1,0,0,0,2978,2982,3,506,253,0,2979,
		2982,5,197,0,0,2980,2982,3,508,254,0,2981,2978,1,0,0,0,2981,2979,1,0,0,
		0,2981,2980,1,0,0,0,2982,2983,1,0,0,0,2983,2987,5,151,0,0,2984,2988,3,
		506,253,0,2985,2988,5,197,0,0,2986,2988,3,508,254,0,2987,2984,1,0,0,0,
		2987,2985,1,0,0,0,2987,2986,1,0,0,0,2988,453,1,0,0,0,2989,2993,3,506,253,
		0,2990,2993,5,197,0,0,2991,2993,3,508,254,0,2992,2989,1,0,0,0,2992,2990,
		1,0,0,0,2992,2991,1,0,0,0,2993,2994,1,0,0,0,2994,2995,5,49,0,0,2995,455,
		1,0,0,0,2996,3000,3,506,253,0,2997,3000,5,197,0,0,2998,3000,3,508,254,
		0,2999,2996,1,0,0,0,2999,2997,1,0,0,0,2999,2998,1,0,0,0,3000,3001,1,0,
		0,0,3001,3002,5,72,0,0,3002,457,1,0,0,0,3003,3004,5,147,0,0,3004,3009,
		3,460,230,0,3005,3006,5,152,0,0,3006,3008,3,460,230,0,3007,3005,1,0,0,
		0,3008,3011,1,0,0,0,3009,3007,1,0,0,0,3009,3010,1,0,0,0,3010,3012,1,0,
		0,0,3011,3009,1,0,0,0,3012,3013,5,148,0,0,3013,459,1,0,0,0,3014,3018,3,
		452,226,0,3015,3018,3,450,225,0,3016,3018,3,514,257,0,3017,3014,1,0,0,
		0,3017,3015,1,0,0,0,3017,3016,1,0,0,0,3018,461,1,0,0,0,3019,3020,3,464,
		232,0,3020,3021,3,466,233,0,3021,463,1,0,0,0,3022,3024,3,474,237,0,3023,
		3025,5,144,0,0,3024,3023,1,0,0,0,3024,3025,1,0,0,0,3025,465,1,0,0,0,3026,
		3028,3,468,234,0,3027,3026,1,0,0,0,3028,3031,1,0,0,0,3029,3027,1,0,0,0,
		3029,3030,1,0,0,0,3030,467,1,0,0,0,3031,3029,1,0,0,0,3032,3034,3,470,235,
		0,3033,3035,5,144,0,0,3034,3033,1,0,0,0,3034,3035,1,0,0,0,3035,469,1,0,
		0,0,3036,3040,3,472,236,0,3037,3038,5,182,0,0,3038,3040,3,474,237,0,3039,
		3036,1,0,0,0,3039,3037,1,0,0,0,3040,471,1,0,0,0,3041,3042,5,147,0,0,3042,
		3047,3,302,151,0,3043,3044,5,152,0,0,3044,3046,3,302,151,0,3045,3043,1,
		0,0,0,3046,3049,1,0,0,0,3047,3045,1,0,0,0,3047,3048,1,0,0,0,3048,3050,
		1,0,0,0,3049,3047,1,0,0,0,3050,3051,5,148,0,0,3051,473,1,0,0,0,3052,3058,
		3,476,238,0,3053,3055,5,145,0,0,3054,3056,3,354,177,0,3055,3054,1,0,0,
		0,3055,3056,1,0,0,0,3056,3057,1,0,0,0,3057,3059,5,146,0,0,3058,3053,1,
		0,0,0,3058,3059,1,0,0,0,3059,475,1,0,0,0,3060,3068,3,480,240,0,3061,3062,
		5,186,0,0,3062,3064,5,182,0,0,3063,3065,3,480,240,0,3064,3063,1,0,0,0,
		3064,3065,1,0,0,0,3065,3067,1,0,0,0,3066,3061,1,0,0,0,3067,3070,1,0,0,
		0,3068,3066,1,0,0,0,3068,3069,1,0,0,0,3069,477,1,0,0,0,3070,3068,1,0,0,
		0,3071,3074,5,197,0,0,3072,3074,5,193,0,0,3073,3071,1,0,0,0,3073,3072,
		1,0,0,0,3074,479,1,0,0,0,3075,3132,5,197,0,0,3076,3132,5,193,0,0,3077,
		3132,5,119,0,0,3078,3132,5,84,0,0,3079,3132,5,16,0,0,3080,3132,5,22,0,
		0,3081,3132,5,4,0,0,3082,3132,5,76,0,0,3083,3132,5,19,0,0,3084,3132,5,
		129,0,0,3085,3132,5,23,0,0,3086,3132,5,116,0,0,3087,3132,5,7,0,0,3088,
		3132,5,47,0,0,3089,3132,5,11,0,0,3090,3132,5,48,0,0,3091,3132,5,36,0,0,
		3092,3132,5,120,0,0,3093,3132,5,85,0,0,3094,3132,5,74,0,0,3095,3132,5,
		33,0,0,3096,3132,5,49,0,0,3097,3132,5,34,0,0,3098,3132,5,73,0,0,3099,3132,
		5,17,0,0,3100,3132,5,124,0,0,3101,3132,5,118,0,0,3102,3132,5,20,0,0,3103,
		3132,5,123,0,0,3104,3132,5,65,0,0,3105,3132,5,18,0,0,3106,3132,5,31,0,
		0,3107,3132,5,117,0,0,3108,3132,5,63,0,0,3109,3132,5,66,0,0,3110,3132,
		5,67,0,0,3111,3132,5,70,0,0,3112,3132,5,61,0,0,3113,3132,5,62,0,0,3114,
		3132,5,35,0,0,3115,3132,5,59,0,0,3116,3132,5,80,0,0,3117,3132,5,79,0,0,
		3118,3132,5,21,0,0,3119,3132,5,15,0,0,3120,3132,5,64,0,0,3121,3132,5,82,
		0,0,3122,3132,5,75,0,0,3123,3132,5,60,0,0,3124,3132,5,83,0,0,3125,3132,
		5,122,0,0,3126,3132,5,81,0,0,3127,3132,5,72,0,0,3128,3132,5,13,0,0,3129,
		3132,5,121,0,0,3130,3132,5,2,0,0,3131,3075,1,0,0,0,3131,3076,1,0,0,0,3131,
		3077,1,0,0,0,3131,3078,1,0,0,0,3131,3079,1,0,0,0,3131,3080,1,0,0,0,3131,
		3081,1,0,0,0,3131,3082,1,0,0,0,3131,3083,1,0,0,0,3131,3084,1,0,0,0,3131,
		3085,1,0,0,0,3131,3086,1,0,0,0,3131,3087,1,0,0,0,3131,3088,1,0,0,0,3131,
		3089,1,0,0,0,3131,3090,1,0,0,0,3131,3091,1,0,0,0,3131,3092,1,0,0,0,3131,
		3093,1,0,0,0,3131,3094,1,0,0,0,3131,3095,1,0,0,0,3131,3096,1,0,0,0,3131,
		3097,1,0,0,0,3131,3098,1,0,0,0,3131,3099,1,0,0,0,3131,3100,1,0,0,0,3131,
		3101,1,0,0,0,3131,3102,1,0,0,0,3131,3103,1,0,0,0,3131,3104,1,0,0,0,3131,
		3105,1,0,0,0,3131,3106,1,0,0,0,3131,3107,1,0,0,0,3131,3108,1,0,0,0,3131,
		3109,1,0,0,0,3131,3110,1,0,0,0,3131,3111,1,0,0,0,3131,3112,1,0,0,0,3131,
		3113,1,0,0,0,3131,3114,1,0,0,0,3131,3115,1,0,0,0,3131,3116,1,0,0,0,3131,
		3117,1,0,0,0,3131,3118,1,0,0,0,3131,3119,1,0,0,0,3131,3120,1,0,0,0,3131,
		3121,1,0,0,0,3131,3122,1,0,0,0,3131,3123,1,0,0,0,3131,3124,1,0,0,0,3131,
		3125,1,0,0,0,3131,3126,1,0,0,0,3131,3127,1,0,0,0,3131,3128,1,0,0,0,3131,
		3129,1,0,0,0,3131,3130,1,0,0,0,3132,481,1,0,0,0,3133,3137,5,197,0,0,3134,
		3137,5,47,0,0,3135,3137,5,193,0,0,3136,3133,1,0,0,0,3136,3134,1,0,0,0,
		3136,3135,1,0,0,0,3137,483,1,0,0,0,3138,3141,5,197,0,0,3139,3141,5,193,
		0,0,3140,3138,1,0,0,0,3140,3139,1,0,0,0,3141,485,1,0,0,0,3142,3144,3,488,
		244,0,3143,3145,3,490,245,0,3144,3143,1,0,0,0,3144,3145,1,0,0,0,3145,3147,
		1,0,0,0,3146,3148,3,492,246,0,3147,3146,1,0,0,0,3147,3148,1,0,0,0,3148,
		3150,1,0,0,0,3149,3151,3,494,247,0,3150,3149,1,0,0,0,3150,3151,1,0,0,0,
		3151,3153,1,0,0,0,3152,3154,3,496,248,0,3153,3152,1,0,0,0,3153,3154,1,
		0,0,0,3154,3156,1,0,0,0,3155,3157,3,498,249,0,3156,3155,1,0,0,0,3156,3157,
		1,0,0,0,3157,3159,1,0,0,0,3158,3160,3,500,250,0,3159,3158,1,0,0,0,3159,
		3160,1,0,0,0,3160,3162,1,0,0,0,3161,3163,3,502,251,0,3162,3161,1,0,0,0,
		3162,3163,1,0,0,0,3163,3165,1,0,0,0,3164,3166,3,504,252,0,3165,3164,1,
		0,0,0,3165,3166,1,0,0,0,3166,3260,1,0,0,0,3167,3169,3,490,245,0,3168,3170,
		3,492,246,0,3169,3168,1,0,0,0,3169,3170,1,0,0,0,3170,3172,1,0,0,0,3171,
		3173,3,494,247,0,3172,3171,1,0,0,0,3172,3173,1,0,0,0,3173,3175,1,0,0,0,
		3174,3176,3,496,248,0,3175,3174,1,0,0,0,3175,3176,1,0,0,0,3176,3178,1,
		0,0,0,3177,3179,3,498,249,0,3178,3177,1,0,0,0,3178,3179,1,0,0,0,3179,3181,
		1,0,0,0,3180,3182,3,500,250,0,3181,3180,1,0,0,0,3181,3182,1,0,0,0,3182,
		3184,1,0,0,0,3183,3185,3,502,251,0,3184,3183,1,0,0,0,3184,3185,1,0,0,0,
		3185,3187,1,0,0,0,3186,3188,3,504,252,0,3187,3186,1,0,0,0,3187,3188,1,
		0,0,0,3188,3260,1,0,0,0,3189,3191,3,492,246,0,3190,3192,3,494,247,0,3191,
		3190,1,0,0,0,3191,3192,1,0,0,0,3192,3194,1,0,0,0,3193,3195,3,496,248,0,
		3194,3193,1,0,0,0,3194,3195,1,0,0,0,3195,3197,1,0,0,0,3196,3198,3,498,
		249,0,3197,3196,1,0,0,0,3197,3198,1,0,0,0,3198,3200,1,0,0,0,3199,3201,
		3,500,250,0,3200,3199,1,0,0,0,3200,3201,1,0,0,0,3201,3203,1,0,0,0,3202,
		3204,3,502,251,0,3203,3202,1,0,0,0,3203,3204,1,0,0,0,3204,3206,1,0,0,0,
		3205,3207,3,504,252,0,3206,3205,1,0,0,0,3206,3207,1,0,0,0,3207,3260,1,
		0,0,0,3208,3210,3,494,247,0,3209,3211,3,496,248,0,3210,3209,1,0,0,0,3210,
		3211,1,0,0,0,3211,3213,1,0,0,0,3212,3214,3,498,249,0,3213,3212,1,0,0,0,
		3213,3214,1,0,0,0,3214,3216,1,0,0,0,3215,3217,3,500,250,0,3216,3215,1,
		0,0,0,3216,3217,1,0,0,0,3217,3219,1,0,0,0,3218,3220,3,502,251,0,3219,3218,
		1,0,0,0,3219,3220,1,0,0,0,3220,3222,1,0,0,0,3221,3223,3,504,252,0,3222,
		3221,1,0,0,0,3222,3223,1,0,0,0,3223,3260,1,0,0,0,3224,3226,3,496,248,0,
		3225,3227,3,498,249,0,3226,3225,1,0,0,0,3226,3227,1,0,0,0,3227,3229,1,
		0,0,0,3228,3230,3,500,250,0,3229,3228,1,0,0,0,3229,3230,1,0,0,0,3230,3232,
		1,0,0,0,3231,3233,3,502,251,0,3232,3231,1,0,0,0,3232,3233,1,0,0,0,3233,
		3235,1,0,0,0,3234,3236,3,504,252,0,3235,3234,1,0,0,0,3235,3236,1,0,0,0,
		3236,3260,1,0,0,0,3237,3239,3,498,249,0,3238,3240,3,500,250,0,3239,3238,
		1,0,0,0,3239,3240,1,0,0,0,3240,3242,1,0,0,0,3241,3243,3,502,251,0,3242,
		3241,1,0,0,0,3242,3243,1,0,0,0,3243,3245,1,0,0,0,3244,3246,3,504,252,0,
		3245,3244,1,0,0,0,3245,3246,1,0,0,0,3246,3260,1,0,0,0,3247,3249,3,500,
		250,0,3248,3250,3,502,251,0,3249,3248,1,0,0,0,3249,3250,1,0,0,0,3250,3252,
		1,0,0,0,3251,3253,3,504,252,0,3252,3251,1,0,0,0,3252,3253,1,0,0,0,3253,
		3260,1,0,0,0,3254,3256,3,502,251,0,3255,3257,3,504,252,0,3256,3255,1,0,
		0,0,3256,3257,1,0,0,0,3257,3260,1,0,0,0,3258,3260,3,504,252,0,3259,3142,
		1,0,0,0,3259,3167,1,0,0,0,3259,3189,1,0,0,0,3259,3208,1,0,0,0,3259,3224,
		1,0,0,0,3259,3237,1,0,0,0,3259,3247,1,0,0,0,3259,3254,1,0,0,0,3259,3258,
		1,0,0,0,3260,487,1,0,0,0,3261,3265,3,514,257,0,3262,3265,5,197,0,0,3263,
		3265,3,508,254,0,3264,3261,1,0,0,0,3264,3262,1,0,0,0,3264,3263,1,0,0,0,
		3265,3266,1,0,0,0,3266,3267,7,9,0,0,3267,489,1,0,0,0,3268,3272,3,514,257,
		0,3269,3272,5,197,0,0,3270,3272,3,508,254,0,3271,3268,1,0,0,0,3271,3269,
		1,0,0,0,3271,3270,1,0,0,0,3272,3273,1,0,0,0,3273,3274,7,10,0,0,3274,491,
		1,0,0,0,3275,3279,3,514,257,0,3276,3279,5,197,0,0,3277,3279,3,508,254,
		0,3278,3275,1,0,0,0,3278,3276,1,0,0,0,3278,3277,1,0,0,0,3279,3280,1,0,
		0,0,3280,3281,7,11,0,0,3281,493,1,0,0,0,3282,3286,3,514,257,0,3283,3286,
		5,197,0,0,3284,3286,3,508,254,0,3285,3282,1,0,0,0,3285,3283,1,0,0,0,3285,
		3284,1,0,0,0,3286,3287,1,0,0,0,3287,3288,7,12,0,0,3288,495,1,0,0,0,3289,
		3293,3,514,257,0,3290,3293,5,197,0,0,3291,3293,3,508,254,0,3292,3289,1,
		0,0,0,3292,3290,1,0,0,0,3292,3291,1,0,0,0,3293,3294,1,0,0,0,3294,3295,
		7,13,0,0,3295,497,1,0,0,0,3296,3300,3,514,257,0,3297,3300,5,197,0,0,3298,
		3300,3,508,254,0,3299,3296,1,0,0,0,3299,3297,1,0,0,0,3299,3298,1,0,0,0,
		3300,3301,1,0,0,0,3301,3302,7,14,0,0,3302,499,1,0,0,0,3303,3307,3,514,
		257,0,3304,3307,5,197,0,0,3305,3307,3,508,254,0,3306,3303,1,0,0,0,3306,
		3304,1,0,0,0,3306,3305,1,0,0,0,3307,3308,1,0,0,0,3308,3309,7,15,0,0,3309,
		501,1,0,0,0,3310,3314,3,514,257,0,3311,3314,5,197,0,0,3312,3314,3,508,
		254,0,3313,3310,1,0,0,0,3313,3311,1,0,0,0,3313,3312,1,0,0,0,3314,3315,
		1,0,0,0,3315,3316,7,16,0,0,3316,503,1,0,0,0,3317,3321,3,514,257,0,3318,
		3321,5,197,0,0,3319,3321,3,508,254,0,3320,3317,1,0,0,0,3320,3318,1,0,0,
		0,3320,3319,1,0,0,0,3321,3322,1,0,0,0,3322,3323,7,17,0,0,3323,505,1,0,
		0,0,3324,3325,7,18,0,0,3325,507,1,0,0,0,3326,3335,5,144,0,0,3327,3329,
		5,151,0,0,3328,3330,3,510,255,0,3329,3328,1,0,0,0,3329,3330,1,0,0,0,3330,
		3333,1,0,0,0,3331,3332,5,151,0,0,3332,3334,3,412,206,0,3333,3331,1,0,0,
		0,3333,3334,1,0,0,0,3334,3336,1,0,0,0,3335,3327,1,0,0,0,3335,3336,1,0,
		0,0,3336,509,1,0,0,0,3337,3339,5,157,0,0,3338,3337,1,0,0,0,3338,3339,1,
		0,0,0,3339,3340,1,0,0,0,3340,3345,3,482,241,0,3341,3342,5,157,0,0,3342,
		3344,3,482,241,0,3343,3341,1,0,0,0,3344,3347,1,0,0,0,3345,3343,1,0,0,0,
		3345,3346,1,0,0,0,3346,511,1,0,0,0,3347,3345,1,0,0,0,3348,3354,3,514,257,
		0,3349,3354,3,516,258,0,3350,3354,5,107,0,0,3351,3354,5,108,0,0,3352,3354,
		5,109,0,0,3353,3348,1,0,0,0,3353,3349,1,0,0,0,3353,3350,1,0,0,0,3353,3351,
		1,0,0,0,3353,3352,1,0,0,0,3354,513,1,0,0,0,3355,3358,5,162,0,0,3356,3358,
		5,159,0,0,3357,3355,1,0,0,0,3357,3356,1,0,0,0,3357,3358,1,0,0,0,3358,3359,
		1,0,0,0,3359,3360,3,506,253,0,3360,515,1,0,0,0,3361,3364,5,195,0,0,3362,
		3364,5,194,0,0,3363,3361,1,0,0,0,3363,3362,1,0,0,0,3364,517,1,0,0,0,3365,
		3369,3,512,256,0,3366,3369,3,520,260,0,3367,3369,3,522,261,0,3368,3365,
		1,0,0,0,3368,3366,1,0,0,0,3368,3367,1,0,0,0,3369,519,1,0,0,0,3370,3371,
		5,149,0,0,3371,3372,3,526,263,0,3372,3373,5,150,0,0,3373,521,1,0,0,0,3374,
		3376,5,147,0,0,3375,3377,3,524,262,0,3376,3375,1,0,0,0,3376,3377,1,0,0,
		0,3377,3378,1,0,0,0,3378,3379,5,148,0,0,3379,523,1,0,0,0,3380,3385,3,518,
		259,0,3381,3382,5,152,0,0,3382,3384,3,518,259,0,3383,3381,1,0,0,0,3384,
		3387,1,0,0,0,3385,3383,1,0,0,0,3385,3386,1,0,0,0,3386,3389,1,0,0,0,3387,
		3385,1,0,0,0,3388,3390,5,152,0,0,3389,3388,1,0,0,0,3389,3390,1,0,0,0,3390,
		525,1,0,0,0,3391,3396,3,528,264,0,3392,3393,5,152,0,0,3393,3395,3,528,
		264,0,3394,3392,1,0,0,0,3395,3398,1,0,0,0,3396,3394,1,0,0,0,3396,3397,
		1,0,0,0,3397,3400,1,0,0,0,3398,3396,1,0,0,0,3399,3401,5,152,0,0,3400,3399,
		1,0,0,0,3400,3401,1,0,0,0,3401,527,1,0,0,0,3402,3405,3,516,258,0,3403,
		3405,3,480,240,0,3404,3402,1,0,0,0,3404,3403,1,0,0,0,3405,3406,1,0,0,0,
		3406,3407,5,151,0,0,3407,3408,3,518,259,0,3408,529,1,0,0,0,473,533,535,
		554,557,560,565,568,572,581,590,597,612,615,622,634,642,645,648,653,670,
		673,680,684,690,693,697,702,706,710,715,719,728,731,733,738,742,747,757,
		763,767,773,778,783,785,789,795,800,809,814,817,824,834,839,847,853,856,
		862,866,870,873,876,880,884,889,893,898,902,909,915,922,926,933,938,944,
		954,962,969,975,979,982,989,994,996,1002,1008,1023,1029,1032,1037,1040,
		1042,1046,1053,1059,1070,1077,1080,1083,1087,1089,1097,1103,1110,1117,
		1123,1127,1134,1139,1142,1147,1156,1160,1173,1184,1192,1198,1203,1206,
		1209,1213,1216,1222,1233,1238,1241,1259,1264,1272,1279,1283,1290,1304,
		1306,1312,1330,1333,1338,1346,1350,1354,1357,1362,1367,1370,1374,1381,
		1385,1388,1395,1403,1410,1416,1418,1423,1431,1434,1437,1442,1446,1449,
		1456,1462,1465,1473,1481,1488,1493,1505,1510,1518,1524,1527,1530,1542,
		1550,1556,1562,1569,1575,1578,1581,1586,1594,1606,1609,1618,1624,1628,
		1631,1634,1644,1650,1653,1658,1661,1665,1671,1674,1680,1693,1698,1700,
		1709,1712,1715,1723,1732,1735,1743,1749,1753,1756,1763,1769,1778,1791,
		1798,1807,1810,1813,1820,1826,1831,1837,1843,1846,1854,1860,1864,1867,
		1870,1877,1881,1888,1892,1896,1900,1902,1909,1927,1931,1934,1938,1941,
		1952,1961,1967,1969,1990,1997,2003,2008,2016,2019,2028,2037,2040,2042,
		2045,2049,2052,2055,2065,2079,2082,2093,2096,2102,2109,2117,2125,2131,
		2140,2146,2150,2154,2156,2160,2168,2174,2178,2182,2184,2188,2192,2197,
		2206,2209,2213,2223,2227,2229,2240,2243,2250,2258,2281,2294,2297,2309,
		2312,2320,2325,2336,2349,2356,2361,2365,2371,2376,2380,2388,2391,2399,
		2407,2416,2424,2432,2440,2455,2465,2475,2517,2534,2547,2553,2558,2562,
		2570,2573,2585,2588,2595,2599,2613,2622,2631,2639,2643,2648,2654,2657,
		2659,2668,2674,2682,2691,2697,2701,2710,2722,2724,2728,2734,2739,2742,
		2745,2751,2756,2760,2764,2768,2781,2789,2791,2798,2808,2813,2816,2819,
		2822,2830,2834,2838,2843,2852,2859,2868,2880,2888,2896,2901,2905,2912,
		2915,2922,2925,2932,2940,2953,2957,2965,2976,2981,2987,2992,2999,3009,
		3017,3024,3029,3034,3039,3047,3055,3058,3064,3068,3073,3131,3136,3140,
		3144,3147,3150,3153,3156,3159,3162,3165,3169,3172,3175,3178,3181,3184,
		3187,3191,3194,3197,3200,3203,3206,3210,3213,3216,3219,3222,3226,3229,
		3232,3235,3239,3242,3245,3249,3252,3256,3259,3264,3271,3278,3285,3292,
		3299,3306,3313,3320,3329,3333,3335,3338,3345,3353,3357,3363,3368,3376,
		3385,3389,3396,3400,3404
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace com.espertech.esper.grammar.@internal.generated
